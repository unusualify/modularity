{"ast":null,"code":"export function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return \"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, mergeProps as _mergeProps, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \\\"vue\\\" export function render(_ctx, _cache, $props, $setup, $data, $options) { const _component_v_btn = _resolveComponent(\\\"v-btn\\\") const _component_v_snackbar = _resolveComponent(\\\"v-snackbar\\\") return (_openBlock(), _createBlock(_component_v_snackbar, { modelValue: _ctx.show, \\\"onUpdate:modelValue\\\": _cache[1] || (_cache[1] = $event => ((_ctx.show) = $event)), timeout: _ctx.timeout, color: _ctx.type, absolute: \\\"\\\", top: \\\"\\\", right: \\\"\\\" }, { action: _withCtx(({ attrs }) => [ _createVNode(_component_v_btn, _mergeProps(attrs, { text: \\\"\\\", onClick: _cache[0] || (_cache[0] = $event => (_ctx.show = false)) }), { default: _withCtx(() => [ _createTextVNode(_toDisplayString(_ctx.$tc('close')), 1 /* TEXT */) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */) ]), default: _withCtx(() => [ _createTextVNode(_toDisplayString($options.text) + \\\" \\\", 1 /* TEXT */) ]), _: 1 /* STABLE */ }, 8 /* PROPS */, [\\\"modelValue\\\", \\\"timeout\\\", \\\"color\\\"])) }\";\n}","map":{"version":3,"names":[],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/Alert.vue"],"sourcesContent":["<template>\n    <v-snackbar\n        v-model=\"show\"\n        :timeout=\"timeout\"\n        :color=\"type\"\n        absolute\n        top\n        right\n    >\n        {{ text }}\n\n        <template v-slot:action=\"{ attrs }\">\n            <v-btn\n                v-bind=\"attrs\"\n                text\n                @click=\"show = false\"\n            >\n                {{ $tc('close') }}\n            </v-btn>\n        </template>\n    </v-snackbar>\n</template>\n\n<script>\n    import { AlertMixin } from '@/mixins'\n    export default {\n        mixins: [AlertMixin],\n        data: () => ({\n            // show: false,\n            // message: null,\n            // type: 'info',\n            timeout: 3000\n        }),\n        computed: {\n            text() {\n                return this.message || this.defaultMessage\n            },\n            defaultMessage() {\n                return this.$t('messages.' + this.type)\n            }\n        },\n        methods: {\n            info(message = null, timeout = 3000){\n                this.open('info', message, timeout);\n            },\n            success(message = null, timeout = 3000){\n                this.open('success', message, timeout);\n            },\n            warning(message = null, timeout = 3000){\n                this.open('warning', message, timeout);\n            },\n            error(message = null, timeout = 3000){\n                this.open('error', message, timeout);\n            },\n        }\n    }\n</script>"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}