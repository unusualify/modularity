{"ast":null,"code":"import _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { renderSlot as _renderSlot, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, toHandlers as _toHandlers, mergeProps as _mergeProps, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _this = this;\n  var _component_v_spacer = _resolveComponent(\"v-spacer\");\n  var _component_v_icon = _resolveComponent(\"v-icon\");\n  var _component_v_system_bar = _resolveComponent(\"v-system-bar\");\n  var _component_v_card = _resolveComponent(\"v-card\");\n  var _component_v_dialog = _resolveComponent(\"v-dialog\");\n  return _openBlock(), _createBlock(_component_v_dialog, _mergeProps({\n    modelValue: $options.dialog,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n      return $options.dialog = $event;\n    })\n  }, _toHandlers({\n    toggleFullScreen: $options.toggleFullScreen\n  }), _ctx.bindProps(), {\n    fullscreen: $data.full,\n    width: $options.modalWidth\n  }), {\n    activator: _withCtx(function (_ref) {\n      var on = _ref.on,\n        attrs = _ref.attrs;\n      return [_renderSlot(_ctx.$slots, \"activator\", {\n        attrs: _objectSpread({}, attrs),\n        on: _objectSpread({}, on)\n      }, function () {\n        return [_createCommentVNode(\" <v-btn\\n                    color=\\\"primary\\\"\\n                    dark\\n                    class=\\\"mb-2\\\"\\n                    v-bind=\\\"{attrs}\\\"\\n                    v-on=\\\"on\\\"\\n                    >\\n                    {{ $tc('show') }}\\n                </v-btn> \")];\n      })];\n    }),\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_v_card, null, {\n        \"default\": _withCtx(function () {\n          return [$props.systembar ? _renderSlot(_ctx.$slots, \"systembar\", {\n            key: 0\n          }, function () {\n            return [_createVNode(_component_v_system_bar, {\n              window: \"\",\n              dark: \"\"\n            }, {\n              \"default\": _withCtx(function () {\n                return [_createVNode(_component_v_spacer), _createVNode(_component_v_icon, {\n                  onClick: _cache[0] || (_cache[0] = function ($event) {\n                    return $options.toggleFullScreen();\n                  }),\n                  \"x-small\": $data.full\n                }, {\n                  \"default\": _withCtx(function () {\n                    return [_createTextVNode(\" mdi-checkbox-blank-outline \")];\n                  }),\n                  _: 1 /* STABLE */\n                }, 8 /* PROPS */, [\"x-small\"]), _createCommentVNode(\" <v-icon @click=\\\"cancelModal(on.closeDialog)\\\" >mdi-close</v-icon> \"), _createVNode(_component_v_icon, {\n                  onClick: _cache[1] || (_cache[1] = function ($event) {\n                    return $options.close();\n                  })\n                }, {\n                  \"default\": _withCtx(function () {\n                    return [_createTextVNode(\"mdi-close\")];\n                  }),\n                  _: 1 /* STABLE */\n                })];\n              }),\n\n              _: 1 /* STABLE */\n            })];\n          }) : _createCommentVNode(\"v-if\", true), _renderSlot(_ctx.$slots, \"body\", {\n            attrs: {},\n            on: {\n              openDialog: _this.open,\n              closeDialog: _this.close,\n              confirmDialog: _this.confirm\n            },\n            closeDialog: $options.close\n          })];\n        }),\n        _: 3 /* FORWARDED */\n      })];\n    }),\n\n    _: 3 /* FORWARDED */\n  }, 16 /* FULL_PROPS */, [\"modelValue\", \"fullscreen\", \"width\"]);\n}","map":{"version":3,"names":["_createBlock","_component_v_dialog","_mergeProps","$options","dialog","$event","_toHandlers","toggleFullScreen","_ctx","bindProps","fullscreen","$data","full","width","modalWidth","activator","_withCtx","_ref","on","attrs","_renderSlot","$slots","_objectSpread","_createCommentVNode","_createVNode","_component_v_card","$props","systembar","key","_component_v_system_bar","window","dark","_component_v_spacer","_component_v_icon","onClick","_cache","close","open","confirm","closeDialog"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/modals/Modal.vue"],"sourcesContent":["<template>\n\n    <v-dialog\n        v-model=\"dialog\"\n        v-on=\"{\n            toggleFullScreen: toggleFullScreen\n        }\"\n\n        v-bind=\"bindProps()\"\n        :fullscreen=\"full\"\n        :width=\"modalWidth\"\n    >\n\n        <template v-slot:activator=\"{ on, attrs }\">\n            <slot\n                name=\"activator\"\n                :attrs=\"{\n                    ...attrs\n                }\"\n                :on=\"{\n                    ...on\n                }\"\n                >\n                <!-- <v-btn\n                    color=\"primary\"\n                    dark\n                    class=\"mb-2\"\n                    v-bind=\"{attrs}\"\n                    v-on=\"on\"\n                    >\n                    {{ $tc('show') }}\n                </v-btn> -->\n            </slot>\n        </template>\n\n        <v-card>\n            <slot\n                v-if=\"systembar\"\n                name=\"systembar\"\n\n                >\n                <v-system-bar\n                        window\n                        dark\n                    >\n                        <v-spacer></v-spacer>\n\n                        <v-icon\n                            @click=\"toggleFullScreen()\"\n                            :x-small=\"full\"\n                            >\n                            mdi-checkbox-blank-outline\n                        </v-icon>\n                        <!-- <v-icon @click=\"cancelModal(on.closeDialog)\" >mdi-close</v-icon> -->\n                        <v-icon @click=\"close()\" >mdi-close</v-icon>\n                </v-system-bar>\n            </slot>\n\n            <slot\n                name=\"body\"\n                :attrs=\"{\n                }\"\n                :on=\"{\n                    openDialog: this.open,\n                    closeDialog: this.close,\n                    confirmDialog: this.confirm\n                }\"\n                :closeDialog=\"close\"\n                >\n\n            </slot>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\nimport htmlClasses from '@/utils/htmlClasses'\n\nexport default {\n  props: {\n    value: {\n      type: Boolean\n    },\n    name: {\n      type: String,\n      default: 'Item'\n    },\n    transition: {\n      type: String,\n      default: 'bottom'\n    },\n\n    widthType: {\n      type: String\n    },\n    systembar: {\n      type: Boolean,\n      default: false\n    },\n    fullscreen: {\n      type: Boolean,\n      default: false\n    }\n\n  },\n  data () {\n    return {\n      // dialog: this.value,\n      widths: {\n        sm: '300px',\n        md: '500px',\n        lg: '750px'\n      },\n      width: this.widthType,\n\n      modalClass: htmlClasses.modal,\n      firstFocusableEl: null,\n      lastFocusableEl: null,\n\n      full: this.fullscreen\n    }\n  },\n\n  computed: {\n    dialog: {\n      get () {\n        return this.value\n      },\n      set (value) {\n        __log('modal->dialog->setter', value)\n        this.$emit('input', value)\n      }\n    },\n    // full: {\n    //     get () {\n    //         return this.fullscreen\n    //         return this.fullScreen\n    //     },\n    //     set (value) {\n    //         // this.$emit('screenListener', this.full)\n    //     }\n    // },\n    togglePersistent () {\n      return this.persistent\n    },\n\n    toggleScrollable () {\n      return this.scrollable\n    },\n    modalWidth () {\n      return this.width ? this.widths[this.width] : null\n    }\n  },\n\n  watch: {\n\n  },\n\n  methods: {\n    toggle () {\n      this.dialog = !this.dialog\n    },\n    close () {\n      this.dialog = false\n    },\n    open () {\n      this.dialog = true\n    },\n    confirm () {\n      this.dialog = false\n    },\n\n    attrs (attrs) {\n      __log(attrs)\n      return attrs\n    },\n\n    toggleFullScreen () {\n      __log(this.full)\n      return this.full = !this.full\n    },\n\n    screenListener (e) {\n      // __log(e.target);\n      this.full = e.target.fullScreen\n    }\n  },\n  beforeDestroy: function () {\n\n  },\n  created () {\n    // setInterval((self) => {\n    //     __log(self.dialog)\n    // }, 1000, this)\n  }\n}\n</script>\n\n<style>\n\n</style>\n"],"mappings":";;;;;;;;;uBAEIA,YAAA,CAsEWC,mBAAA,EAtEXC,WAAA,CAsEW;gBArEEC,QAAA,CAAAC,MAAM;;aAAND,QAAA,CAAAC,MAAM,GAAAC,MAAA;IAAA;KACfC,WAAA,CAEE;sBAFoCH,QAAA,CAAAI;MAI9BC,IAAA,CAAAC,SAAS;IAChBC,UAAU,EAAEC,KAAA,CAAAC,IAAI;IAChBC,KAAK,EAAEV,QAAA,CAAAW;;IAGSC,SAAS,EAAAC,QAAA,CACtB,UAAAC,IAAA;MAAA,IAD0BC,EAAE,GAAAD,IAAA,CAAFC,EAAE;QAAEC,KAAK,GAAAF,IAAA,CAALE,KAAK;MAAA,QACnCC,WAAA,CAkBOZ,IAAA,CAAAa,MAAA;QAhBFF,KAAK,EAAAG,aAAA,KAA2BH,KAAK,C;QAGrCD,EAAE,EAAAI,aAAA,KAA2BJ,EAAE;SALpC;QAAA,OAkBO,CATHK,mBAAA,kRAQY,C;;;wBAIpB;MAAA,OAoCS,CApCTC,YAAA,CAoCSC,iBAAA;4BAnCL;UAAA,OAoBO,CAnBGC,MAAA,CAAAC,SAAS,GADnBP,WAAA,CAoBOZ,IAAA,CAAAa,MAAA;YAAAO,GAAA;UAAA,GApBP;YAAA,OAoBO,CAfHJ,YAAA,CAceK,uBAAA;cAbPC,MAAM,EAAN,EAAM;cACNC,IAAI,EAAJ;;kCAEA;gBAAA,OAAqB,CAArBP,YAAA,CAAqBQ,mBAAA,GAErBR,YAAA,CAKSS,iBAAA;kBAJJC,OAAK,EAAAC,MAAA,QAAAA,MAAA,gBAAA9B,MAAA;oBAAA,OAAEF,QAAA,CAAAI,gBAAgB;kBAAA;kBACvB,SAAO,EAAEI,KAAA,CAAAC;;sCACT;oBAAA,OAEL,C,iBAFK,8BAEL,E;;;gDACAW,mBAAA,wEAAyE,EACzEC,YAAA,CAA4CS,iBAAA;kBAAnCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,gBAAA9B,MAAA;oBAAA,OAAEF,QAAA,CAAAiC,KAAK;kBAAA;;sCAAK;oBAAA,OAAS,C,iBAAT,WAAS,E;;;;;;;;kDAI/ChB,WAAA,CAYOZ,IAAA,CAAAa,MAAA;YAVFF,KAAK,EAAE,C,CACP;YACAD,EAAE;gCAAyCmB,IAAI;iCAAwCD,KAAK;mCAA0CE;;YAKtIC,WAAW,EAAEpC,QAAA,CAAAiC"},"metadata":{},"sourceType":"module","externalDependencies":[]}