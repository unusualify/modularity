{"ast":null,"code":"import { mapGetters, mapState } from 'vuex';\nimport { FORM } from '@/store/mutations/index';\nimport ACTIONS from '@/store/actions';\nexport default {\n  // name: \"ue-form-base\",\n  props: {\n    value: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n    schema: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n    rowAttribute: {\n      type: Object,\n      default() {\n        return {\n          noGutters: false\n          // justify:'center', \n          // align:'center'\n        };\n      }\n    },\n\n    async: {\n      type: Boolean,\n      default: true\n    },\n    hasSubmit: {\n      type: Boolean,\n      default: false\n    },\n    stickyFrame: {\n      type: Boolean,\n      default: false\n    },\n    stickyButton: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      id: Math.ceil(Math.random() * 1000000) + \"-form\",\n      valid: false\n    };\n  },\n  beforeCreate() {},\n  created() {\n    // __log(this.$root)\n    // Object.fromEntries(this.inputs[1].extras.map(v => ([v,true])))\n\n    // console.log(this.inputs[2])\n  },\n  watch: {\n    inputSchema(val) {\n      __log('inputSchema changed', val);\n    }\n  },\n  computed: {\n    issetModel() {\n      return Object.keys(this.value).length > 0;\n    },\n    issetSchema() {\n      return Object.keys(this.schema).length > 0;\n    },\n    hasStickyFrame() {\n      return this.stickyFrame || this.stickyButton;\n    },\n    inputSchema() {\n      return this.issetSchema ? this.schema : this.$store.state.form.inputs;\n    },\n    defaultItem: {\n      get() {\n        // __log(\n        //     this.issetModel ? this.value : this.$store.state.form.editedItem\n        // )\n        return this.issetModel ? this.value : this.$store.state.form.editedItem;\n      },\n      set(value) {}\n    },\n    model: {\n      get() {\n        console.log('formBase model getter', this.defaultItem, this.value);\n        return this.defaultItem;\n      },\n      set(value) {\n        __log('model setter', value);\n        // __log('ForBase.vue->model set', value)\n\n        // if(this.issetModel)\n        //     this.$emit('input', value)\n        // else    \n        //     this.$store.commit(FORM.SET_EDITED_ITEM, value)\n      }\n    },\n\n    reference() {\n      return 'ref-' + this.id;\n    },\n    formColumnAttrs() {\n      return this.hasStickyFrame ? {\n        'cols': '12',\n        'sm': '12',\n        'md': '12',\n        'lg': '8',\n        'xl': '6',\n        'order-lg': '0',\n        'order-xl': '0'\n      } : {\n        'cols': '12'\n      };\n    },\n    stickyColumnAttrs() {\n      return {\n        'cols': '12',\n        'sm': '12',\n        'md': '12',\n        'lg': '4',\n        'xl': '6',\n        'order-lg': '1',\n        'order-xl': '1'\n      };\n    },\n    ...mapState({\n      loading: state => state.form.loading,\n      errors: state => state.form.errors\n    })\n  },\n  methods: {\n    validate() {\n      this.$refs[this.reference].validate();\n    },\n    resetValidation() {\n      this.$refs[this.reference].resetValidation();\n    },\n    handleInput(v) {\n      // __log(\n      //     'handleInput', \n      //     v.obj.key,\n      //     v.obj.value,\n      //     this.model\n      // )\n      // this.model = this.model;\n    },\n    handleUpdate(v) {\n      __log('handleUpdate', v);\n    },\n    handleResize(v) {\n      // __log('handleResize', v)\n    },\n    handleBlur(v) {\n      // __log('handleBlur', v)\n    },\n    saveForm(callback = null, errorCallback = null) {\n      let fields = {};\n      Object.keys(this.defaultItem).forEach((key, i) => {\n        fields[key] = this.model[key] == null || this.defaultItem[key] != '' ? this.defaultItem[key] : this.model[key];\n      });\n      if (!!this.model.id) fields.id = this.model.id;\n\n      // __log(\n      //     this.defaultItem,\n      //     fields,\n      // );\n      // return;\n      this.$store.commit(FORM.SET_EDITED_ITEM, fields);\n      this.$store.dispatch(ACTIONS.SAVE_FORM, {\n        item: null,\n        callback: callback,\n        errorCallback: errorCallback\n      });\n    },\n    submit() {\n      if (this.async) {\n        this.saveForm();\n      }\n\n      // this.$v.$touch()\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}