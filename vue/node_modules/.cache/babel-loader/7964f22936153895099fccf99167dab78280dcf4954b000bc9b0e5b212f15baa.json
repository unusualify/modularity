{"ast":null,"code":"import _defineProperty from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { mapState } from 'vuex';\nimport { DATATABLE, FORM, ALERT } from '@/store/mutations';\nimport ACTIONS from '@/store/actions';\nimport { DatatableMixin } from '@/mixins';\nexport default {\n  mixins: [DatatableMixin],\n  data: function data() {\n    return {\n      formModalActive: false,\n      dialogActive: false,\n      langs: ['tr', 'en'],\n      cellInput: ''\n    };\n  },\n  computed: {\n    dialogDescription: function dialogDescription() {\n      return this.$t('confirm-deletion', {\n        route: this.transName.toLowerCase(),\n        name: this.editedItem[this.titleKey]\n      });\n    },\n    transName: function transName() {\n      return this.$t('modules.' + this.name.toLowerCase());\n    }\n  },\n  watch: {\n    formModalActive: function formModalActive(val) {\n      val || this.resetEditedItem();\n    },\n    dialogActive: function dialogActive(val) {\n      val || this.resetEditedItem();\n    },\n    editedItem: function editedItem(val) {\n      // console.log('editedItem watcher', this.editedItem )\n    }\n  },\n  beforeCreate: function beforeCreate() {},\n  created: function created() {},\n  mounted: function mounted() {},\n  methods: {\n    editItem: function editItem(item) {\n      this.editedIndex = this.elements.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.formModalActive = true;\n    },\n    emitEditedItem: function emitEditedItem(v) {\n      this.editedItem = v;\n    },\n    confirmForm: function confirmForm(editedItem) {\n      var _this = this;\n      this.$store.commit(FORM.UPDATE_FORM_LOADING, true);\n      __log(editedItem);\n      this.$store.dispatch(ACTIONS.SAVE_FORM, editedItem).then(function () {\n        _this.$nextTick(function () {\n          // this.$store.dispatch(ACTIONS.GET_DATATABLE)\n          this.formModalActive = false;\n        });\n      }, function (errorResponse) {\n        // this.$store.commit(NOTIFICATION.SET_NOTIF, {\n        //   message: 'Your content can not be edited, please retry',\n        //   variant: 'error'\n        // })\n      });\n    },\n    deleteItem: function deleteItem(item) {\n      this.setEditedItem(item);\n      this.openDialog();\n    },\n    openDialog: function openDialog() {\n      this.dialogActive = true;\n    },\n    confirmDialog: function confirmDialog() {\n      this[\"delete\"](this.editedItem);\n    },\n    \"delete\": function _delete(item) {\n      this.$store.dispatch(ACTIONS.DELETE_ITEM, item);\n    },\n    columnChanged: function columnChanged(value) {\n      this.cellInput = value;\n    },\n    openColumnEdit: function openColumnEdit(item) {\n      // this.resetEditedItem();\n      this.setEditedItem(item);\n      // this.$store.commit(ALERT.SET_ALERT, {\n      //   variant: 'info',\n      //   message: 'Dialog Opened'\n      // })\n      // this.$root.$refs.alert.info('Dialog Opened');\n    },\n    cancelColumnEdit: function cancelColumnEdit() {\n      this.resetEditedItem();\n      // this.$store.commit(ALERT.SET_ALERT, {\n      //   variant: 'warning',\n      //   message: 'cancelled'\n      // })\n      // this.$root.$refs.alert.error('Cancelled!')\n    },\n    closeColumnEdit: function closeColumnEdit() {\n      // this.resetEditedItem();\n    },\n    /**\n     * @param {string} key - related key of object\n     */\n    updateCell: function updateCell(key) {\n      this.$store.commit(ALERT.CLEAR_ALERT);\n      if (this.editedItem[key] !== this.cellInput) {\n        var data = _defineProperty({\n          id: this.editedItem.id\n        }, key, this.cellInput);\n        this.$store.dispatch(ACTIONS.SAVE_FORM, data);\n        //   .then(() => {\n        //     this.$nextTick(function () {\n        //       // this.$store.commit(ALERT.SET_ALERT, {\n        //       //   variant: 'success',\n        //       //   message: this.$tc('saved', 2, [key])\n        //       // })\n\n        //     })\n        // }, (errorResponse) => {\n        //   this.$store.commit(ALERT.SET_ALERT, {\n        //     message: 'Your content can not be edited, please retry',\n        //     variant: 'error'\n        //   });\n        // }) \n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}