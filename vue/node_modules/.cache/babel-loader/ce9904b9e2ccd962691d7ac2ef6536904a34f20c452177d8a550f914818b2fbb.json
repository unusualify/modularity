{"ast":null,"code":"import _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { mapState, mapGetters } from 'vuex';\nimport { ALERT } from '@/store/mutations/index';\nimport ACTIONS from '@/store/actions';\nimport openMediaLibrary from '@/behaviors/openMediaLibrary';\nexport default {\n  props: {},\n  data: function data() {\n    return {\n      csrf: document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content'),\n      sidebarToggle: false,\n      miniStatus: false\n    };\n  },\n  computed: _objectSpread({\n    isHoverable: function isHoverable() {\n      return this.$store.state.config.isMiniSidebar && this.isLgAndUp;\n    },\n    isMini: {\n      get: function get() {\n        return this.miniStatus = this.$store.state.config.isMiniSidebar && this.isLgAndUp;\n      },\n      set: function set(val) {\n        this.miniStatus = val;\n        // __log('miniStatus form isMini setter', val, this.miniStatus)\n      }\n    },\n    showToggleButton: function showToggleButton() {\n      return !this.isLgAndUp || !this.$store.state.config.isMiniSidebar;\n    },\n    isLgAndUp: function isLgAndUp() {\n      return this.$vuetify.display.lgAndUp;\n    }\n  }, mapState({\n    isMiniSidebar: function isMiniSidebar(state) {\n      return state.config.isMiniSidebar;\n    }\n  })),\n  watch: {\n    isLgAndUp: function isLgAndUp(val) {\n      // __log(\n      //     this.isMiniSidebar\n      // )\n      this.isMini = this.isMiniSidebar && val;\n      __log(this.sidebarToggle);\n      // this.sidebarToggle = false;\n    }\n  },\n\n  methods: {\n    toggleSidebar: function toggleSidebar() {\n      this.sidebarToggle = !this.sidebarToggle;\n    },\n    handleMethodCall: function handleMethodCall(functionName) {\n      for (var _len = arguments.length, val = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        val[_key - 1] = arguments[_key];\n      }\n      // __log(functionName)\n      return this[functionName].apply(this, val);\n    },\n    handleVmFunctionCall: function handleVmFunctionCall(functionName) {\n      var _window$vm;\n      for (var _len2 = arguments.length, val = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        val[_key2 - 1] = arguments[_key2];\n      }\n      return (_window$vm = window.vm)[functionName].apply(_window$vm, val);\n    },\n    openMediaLibrary: function openMediaLibrary() {},\n    bindProps: function bindProps(vue) {\n      __log(vue);\n    }\n  },\n  mounted: function mounted() {\n    if (this.isMiniSidebar && this.isLgAndUp) {\n      this.sidebarToggle = true;\n    } else if (!this.$store.state.config.isMiniSidebar) {\n      this.sidebarToggle = true;\n    }\n    // __log(\n    //     'root mixin mounted',\n    //     this.miniStatus,\n    //     this.sidebarToggle\n    // )\n  },\n  created: function created() {\n    openMediaLibrary();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}