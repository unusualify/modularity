{"ast":null,"code":"const inBrowser = typeof window !== 'undefined';\nexport const supportsPushState = inBrowser && function () {\n  const ua = window.navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\n    return false;\n  }\n  return window.history && 'pushState' in window.history;\n}();\n\n// use User Timing api (if present) for more accurate key precision\nconst Time = inBrowser && window.performance && window.performance.now ? window.performance : Date;\nlet _key = genKey();\nfunction genKey() {\n  return Time.now().toFixed(3);\n}\nexport function getStateKey() {\n  return _key;\n}\nexport function setStateKey(key) {\n  _key = key;\n}\nexport function pushState(url, replace) {\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  const history = window.history;\n  try {\n    if (replace) {\n      history.replaceState({\n        key: _key\n      }, '', url);\n    } else {\n      _key = genKey();\n      history.pushState({\n        key: _key\n      }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\nexport function replaceState(url) {\n  pushState(url, true);\n}\nexport function getURLWithoutQuery() {\n  return location.protocol + '//' + location.host + location.pathname;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}