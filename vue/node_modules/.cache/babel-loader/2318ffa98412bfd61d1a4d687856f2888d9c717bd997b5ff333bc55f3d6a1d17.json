{"ast":null,"code":"import { renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, mergeProps as _mergeProps, openBlock as _openBlock, createBlock as _createBlock, normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"d-flex flex-column align-items-center\",\n  style: {\n    \"position\": \"sticky\",\n    \"top\": \"100px\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"caption\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ue_btn = _resolveComponent(\"ue-btn\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_icon = _resolveComponent(\"v-icon\");\n  const _component_v_custom_form_base = _resolveComponent(\"v-custom-form-base\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_text_field = _resolveComponent(\"v-text-field\");\n  const _component_v_form = _resolveComponent(\"v-form\");\n  return _openBlock(), _createBlock(_component_v_form, {\n    ref: $options.reference,\n    modelValue: $data.valid,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.valid = $event),\n    \"lazy-validation\": \"\",\n    onSubmit: _withModifiers($options.submit, [\"prevent\"]),\n    id: $data.id\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createVNode(_component_v_row, null, {\n        default: _withCtx(() => [$options.hasStickyFrame ? (_openBlock(), _createBlock(_component_v_col, _mergeProps({\n          key: 0\n        }, $options.stickyColumnAttrs, {\n          class: \"d-flex flex-column\",\n          style: {\n            \"position\": \"sticky\"\n          }\n        }), {\n          default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [$props.hasSubmit && $props.stickyButton ? _renderSlot(_ctx.$slots, \"submitButton\", {\n            key: 0,\n            attrs: {},\n            on: {}\n          }, () => [_createVNode(_component_ue_btn, {\n            form: $data.id,\n            type: \"submit\",\n            width: \"60%\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$tc('submit')), 1)]),\n            _: 1\n          }, 8, [\"form\"])]) : _createCommentVNode(\"\", true), _renderSlot(_ctx.$slots, \"stickyBody\", {\n            attrs: {},\n            on: {}\n          })])]),\n          _: 3\n        }, 16)) : _createCommentVNode(\"\", true), _createVNode(_component_v_col, _normalizeProps(_guardReactiveProps($options.formColumnAttrs)), {\n          default: _withCtx(() => [_createVNode(_component_v_custom_form_base, {\n            id: \"treeview-slot\",\n            row: $props.rowAttribute,\n            model: $options.model,\n            schema: $options.inputSchema,\n            onUpdate: $options.handleUpdate,\n            onInput: $options.handleInput,\n            onResize: $options.handleResize,\n            onBlur: $options.handleBlur\n          }, {\n            [`slot-inject-prepend-key-treeview-slot-permissions`]: _withCtx(({\n              open\n            }) => [_createVNode(_component_v_icon, {\n              color: \"blue\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(open ? 'mdi-folder-open' : 'mdi-folder'), 1)]),\n              _: 2\n            }, 1024)]),\n            \"slot-inject-label-key-treeview-slot-permissions\": _withCtx(({\n              item\n            }) => [_createElementVNode(\"span\", _hoisted_2, _toDisplayString(item.name.toUpperCase()), 1)]),\n            _: 2\n          }, 1032, [\"row\", \"model\", \"schema\", \"onUpdate\", \"onInput\", \"onResize\", \"onBlur\"])]),\n          _: 1\n        }, 16)]),\n        _: 3\n      })]),\n      _: 3\n    }), $props.hasSubmit && !$props.stickyButton ? (_openBlock(), _createBlock(_component_v_container, {\n      key: 0\n    }, {\n      default: _withCtx(() => [_renderSlot(_ctx.$slots, \"submitButton\", {\n        attrs: {},\n        on: {}\n      }, () => [_createVNode(_component_ue_btn, {\n        form: $data.id,\n        type: \"submit\",\n        right: \"\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$tc('submit')), 1)]),\n        _: 1\n      }, 8, [\"form\"])])]),\n      _: 3\n    })) : _createCommentVNode(\"\", true), _createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_ctx.loading ? (_openBlock(), _createBlock(_component_v_text_field, {\n        key: 0,\n        color: \"success\",\n        loading: \"\",\n        disabled: \"\"\n      })) : _createCommentVNode(\"\", true)]),\n      _: 1\n    })]),\n    _: 3\n  }, 8, [\"modelValue\", \"onSubmit\", \"id\"]);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}