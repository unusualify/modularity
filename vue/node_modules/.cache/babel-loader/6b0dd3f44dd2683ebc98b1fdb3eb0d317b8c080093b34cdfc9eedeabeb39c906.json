{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Upload\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_v_icon = _resolveComponent(\"v-icon\");\n  var _component_v_card = _resolveComponent(\"v-card\");\n  var _component_v_spacer = _resolveComponent(\"v-spacer\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(\"import { renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, mergeProps as _mergeProps, openBlock as _openBlock, createBlock as _createBlock, normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, withModifiers as _withModifiers } from \\\"vue\\\" const _hoisted_1 = { class: \\\"d-flex flex-column align-items-center\\\", style: {\\\"position\\\":\\\"sticky\\\",\\\"top\\\":\\\"100px\\\"} } const _hoisted_2 = { class: \\\"caption\\\" } export function render(_ctx, _cache, $props, $setup, $data, $options) { const _component_ue_btn = _resolveComponent(\\\"ue-btn\\\") const _component_v_col = _resolveComponent(\\\"v-col\\\") const _component_v_icon = _resolveComponent(\\\"v-icon\\\") const _component_v_custom_form_base = _resolveComponent(\\\"v-custom-form-base\\\") const _component_v_row = _resolveComponent(\\\"v-row\\\") const _component_v_container = _resolveComponent(\\\"v-container\\\") const _component_v_text_field = _resolveComponent(\\\"v-text-field\\\") const _component_v_form = _resolveComponent(\\\"v-form\\\") return (_openBlock(), _createBlock(_component_v_form, { ref: $options.reference, modelValue: $data.valid, \\\"onUpdate:modelValue\\\": _cache[0] || (_cache[0] = $event => (($data.valid) = $event)), \\\"lazy-validation\\\": \\\"\\\", onSubmit: _withModifiers($options.submit, [\\\"prevent\\\"]), id: $data.id }, { default: _withCtx(() => [ _createVNode(_component_v_container, null, { default: _withCtx(() => [ _createVNode(_component_v_row, null, { default: _withCtx(() => [ ($options.hasStickyFrame) ? (_openBlock(), _createBlock(_component_v_col, _mergeProps({ key: 0 }, $options.stickyColumnAttrs, { class: \\\"d-flex flex-column\\\", style: {\\\"position\\\":\\\"sticky\\\"} }), { default: _withCtx(() => [ _createElementVNode(\\\"div\\\", _hoisted_1, [ ($props.hasSubmit && $props.stickyButton) ? _renderSlot(_ctx.$slots, \\\"submitButton\\\", { key: 0, attrs: { }, on: { } }, () => [ _createVNode(_component_ue_btn, { form: $data.id, type: \\\"submit\\\", width: \\\"60%\\\" }, { default: _withCtx(() => [ _createTextVNode(_toDisplayString(_ctx.$tc('submit')), 1 /* TEXT */) ]), _: 1 /* STABLE */ }, 8 /* PROPS */, [\\\"form\\\"]) ]) : _createCommentVNode(\\\"v-if\\\", true), _renderSlot(_ctx.$slots, \\\"stickyBody\\\", { attrs: { }, on: { } }, () => [ _createCommentVNode(\\\" \"), _createVNode(_component_v_card, {\n    \"class\": \"\\\\\\\"mt-6\\\\\\\"\",\n    height: \"\\\\\\\"\\\\\\\"\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createTextVNode(\"\\\\n \"), _createElementVNode(\"div\", null, [_createTextVNode(\"\\\\n \"), _createVNode(_component_v_icon, null, {\n        \"default\": _withCtx(function () {\n          return [_createTextVNode(\"mdi-camera\")];\n        }),\n        _: 1 /* STABLE */\n      }), _createTextVNode(\"\\\\n \"), _hoisted_1, _createTextVNode(\"\\\\n \")]), _createTextVNode(\"\\\\n \")];\n    }),\n    _: 1 /* STABLE */\n  }), _createTextVNode(\" \\\") ]) ]), _createCommentVNode(\\\" \"), _createVNode(_component_v_spacer), _createTextVNode(\" \\\") ]), _: 3 /* FORWARDED */ }, 16 /* FULL_PROPS */)) : _createCommentVNode(\\\"v-if\\\", true), _createVNode(_component_v_col, _normalizeProps(_guardReactiveProps($options.formColumnAttrs)), { default: _withCtx(() => [ _createVNode(_component_v_custom_form_base, { id: \\\"treeview-slot\\\", row: $props.rowAttribute, model: $options.model, schema: $options.inputSchema, onUpdate: $options.handleUpdate, onInput: $options.handleInput, onResize: $options.handleResize, onBlur: $options.handleBlur }, { [`slot-inject-prepend-key-treeview-slot-permissions`]: _withCtx(({open}) => [ _createVNode(_component_v_icon, { color: \\\"blue\\\" }, { default: _withCtx(() => [ _createTextVNode(_toDisplayString(open ? 'mdi-folder-open' : 'mdi-folder'), 1 /* TEXT */) ]), _: 2 /* DYNAMIC */ }, 1024 /* DYNAMIC_SLOTS */) ]), \\\"slot-inject-label-key-treeview-slot-permissions\\\": _withCtx(({item}) => [ _createElementVNode(\\\"span\\\", _hoisted_2, _toDisplayString(item.name.toUpperCase()), 1 /* TEXT */) ]), _: 2 /* DYNAMIC */ }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\\\"row\\\", \\\"model\\\", \\\"schema\\\", \\\"onUpdate\\\", \\\"onInput\\\", \\\"onResize\\\", \\\"onBlur\\\"]) ]), _: 1 /* STABLE */ }, 16 /* FULL_PROPS */) ]), _: 3 /* FORWARDED */ }) ]), _: 3 /* FORWARDED */ }), ($props.hasSubmit && !$props.stickyButton) ? (_openBlock(), _createBlock(_component_v_container, { key: 0 }, { default: _withCtx(() => [ _createCommentVNode(\\\" \"), _createVNode(_component_v_spacer), _createTextVNode(\" \\\"), _renderSlot(_ctx.$slots, \\\"submitButton\\\", { attrs: { }, on: { } }, () => [ _createVNode(_component_ue_btn, { form: $data.id, type: \\\"submit\\\", right: \\\"\\\" }, { default: _withCtx(() => [ _createTextVNode(_toDisplayString(_ctx.$tc('submit')), 1 /* TEXT */) ]), _: 1 /* STABLE */ }, 8 /* PROPS */, [\\\"form\\\"]) ]) ]), _: 3 /* FORWARDED */ })) : _createCommentVNode(\\\"v-if\\\", true), _createVNode(_component_v_container, null, { default: _withCtx(() => [ (_ctx.loading) ? (_openBlock(), _createBlock(_component_v_text_field, { key: 0, color: \\\"success\\\", loading: \\\"\\\", disabled: \\\"\\\" })) : _createCommentVNode(\\\"v-if\\\", true) ]), _: 1 /* STABLE */ }) ]), _: 3 /* FORWARDED */ }, 8 /* PROPS */, [\\\"modelValue\\\", \\\"onSubmit\\\", \\\"id\\\"])) }\")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_createVNode","_component_v_card","height","_component_v_icon","_hoisted_1","_component_v_spacer"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/FormBase.vue"],"sourcesContent":["<template>\n\n    <v-form \n        :ref=\"reference\" \n        v-model=\"valid\" \n        lazy-validation\n        @submit.prevent=\"submit\" \n        :id=\"id\"\n        >\n        <v-container>\n            <v-row>\n                <v-col\n                    v-if=\"hasStickyFrame\"\n                    v-bind=\"stickyColumnAttrs\"\n                    class=\"d-flex flex-column\"\n                    style=\"position:sticky;\"\n                    >\n                        <div class=\"d-flex flex-column align-items-center\" style=\"position:sticky;top:100px;\">\n                            <slot \n                                v-if=\"hasSubmit && stickyButton\"\n                                name=\"submitButton\"\n                                :attrs=\"{\n                                    \n                                }\"\n                                :on=\"{\n                                    \n                                }\"\n                                >\n                                <ue-btn\n                                    :form=\"id\"\n                                    type=\"submit\"\n                                    width=\"60%\"\n                                    \n                                    >\n                                    {{ $tc('submit') }}\n                                </ue-btn>\n                            </slot>\n\n                            <slot \n                                name=\"stickyBody\"\n                                :attrs=\"{\n                                    \n                                }\"\n                                :on=\"{\n                                    \n                                }\"\n                                >\n                                <!-- <v-card class=\"mt-6\" height=\"\">\n                                        <div>\n                                            <v-icon>mdi-camera</v-icon>\n                                            <h3>Upload</h3>\n                                        </div>\n                                </v-card> -->\n                            </slot>\n    \n\n                        </div>\n                        <!-- <v-spacer></v-spacer> -->\n\n                </v-col>\n                <v-col\n                    v-bind=\"formColumnAttrs\"\n                    >\n\n                    <v-custom-form-base \n                        id=\"treeview-slot\"\n                        \n                        :row=\"rowAttribute\"\n                        :model=\"model\"\n                        :schema=\"inputSchema\" \n                        \n                        @update=\"handleUpdate\"\n                        @input=\"handleInput\"\n                        @resize=\"handleResize\"\n                        @blur=\"handleBlur\"\n                        \n                        >\n                        <template v-slot:[`slot-inject-prepend-key-treeview-slot-permissions`]=\"{open}\" >  \n                            <v-icon color=\"blue\">\n                                {{open ? 'mdi-folder-open' : 'mdi-folder'}}\n                            </v-icon>\n                        </template>\n                        <template #slot-inject-label-key-treeview-slot-permissions=\"{item}\" >  \n                            <span class=\"caption\" >{{item.name.toUpperCase()}}</span>\n                        </template>\n                    </v-custom-form-base>\n                        \n                </v-col>\n            </v-row>\n        </v-container>\n\n        <v-container v-if=\"hasSubmit && !stickyButton\">\n                <!-- <v-spacer></v-spacer> -->\n                <slot \n                    name=\"submitButton\"\n                    :attrs=\"{\n                        \n                    }\"\n                    :on=\"{\n                        \n                    }\"\n                    >\n                    <ue-btn\n                        :form=\"id\"\n                        type=\"submit\"\n                        right\n                        >\n                        {{ $tc('submit') }}\n                    </ue-btn>\n                </slot>\n        </v-container>\n\n        <v-container>\n            <v-text-field\n                v-if=\"loading\"\n                color=\"success\"\n                loading\n                disabled\n            />\n        </v-container>\n    </v-form>\n\n</template>\n\n<script>\nimport { mapGetters, mapState } from 'vuex'\nimport { FORM } from '@/store/mutations/index'\nimport ACTIONS from '@/store/actions'\n\nexport default {\n    // name: \"ue-form-base\",\n    props: {\n        value: {\n            type: Object,\n            default() {\n                return {}\n            }\n        },\n        schema: {\n            type: Object,\n            default() {\n                return {}\n            }\n        },\n        rowAttribute: {\n            type: Object,\n            default() {\n                return {\n                    noGutters: false,\n                    // justify:'center', \n                    // align:'center'\n                }\n            }\n        },\n        async: {\n            type: Boolean,\n            default: true\n        },\n        hasSubmit: {\n            type: Boolean,\n            default: false\n        },\n        stickyFrame: {\n            type: Boolean,\n            default: false\n        },\n        stickyButton: {\n            type: Boolean,\n            default: false\n        },\n    },\n    data() {\n        return {\n            id: Math.ceil(Math.random()*1000000) + \"-form\",\n            valid: false,\n        }\n    },\n\n    beforeCreate(){\n\n    },\n\n    created() {\n        // __log(this.$root)\n        // Object.fromEntries(this.inputs[1].extras.map(v => ([v,true])))\n        \n        // console.log(this.inputs[2])\n    },\n\n    watch: {\n        inputSchema(val) {\n            __log('inputSchema changed', val )\n        }\n    },\n\n    computed: {\n        issetModel() {\n            return Object.keys(this.value).length > 0;\n        },\n        issetSchema() {\n            return Object.keys(this.schema).length > 0;\n        },\n        hasStickyFrame() {\n            return this.stickyFrame || this.stickyButton;\n        },\n        inputSchema() {\n            return this.issetSchema ? this.schema : this.$store.state.form.inputs;\n        },\n        defaultItem: {\n            get () {\n                // __log(\n                //     this.issetModel ? this.value : this.$store.state.form.editedItem\n                // )\n                return this.issetModel ? this.value : this.$store.state.form.editedItem;\n            },\n            set (value) {\n\n            }\n        },\n        model: {\n            get () {\n                console.log('formBase model getter', this.defaultItem, this.value)\n                return this.defaultItem;\n            },\n            set (value) {\n                __log('model setter', value)\n                // __log('ForBase.vue->model set', value)\n\n                // if(this.issetModel)\n                //     this.$emit('input', value)\n                // else    \n                //     this.$store.commit(FORM.SET_EDITED_ITEM, value)\n            }\n        },\n\n        reference(){\n            return 'ref-' + this.id;\n        },\n\n        formColumnAttrs() {\n            return this.hasStickyFrame ? \n                {\n                    'cols': '12',\n                    'sm': '12',\n                    'md': '12',\n                    'lg': '8',\n                    'xl': '6',\n                    'order-lg': '0',\n                    'order-xl': '0',\n                } :\n                {\n                    'cols': '12',\n                }\n\n        },\n\n        stickyColumnAttrs(){\n            return {\n                'cols': '12',\n                'sm': '12',\n                'md': '12',\n                'lg': '4',\n                'xl': '6',\n                'order-lg': '1',\n                'order-xl': '1',\n            };\n        },\n\n        ...mapState({\n            loading: state => state.form.loading,\n            errors: state => state.form.errors,\n        }),\n\n        \n    },\n    \n    methods: {\n        validate () {\n            this.$refs[this.reference].validate()\n        },\n        resetValidation () {\n            this.$refs[this.reference].resetValidation()\n        },\n\n        handleInput(v){\n            // __log(\n            //     'handleInput', \n            //     v.obj.key,\n            //     v.obj.value,\n            //     this.model\n            // )\n            // this.model = this.model;\n        },\n        handleUpdate(v){\n            __log('handleUpdate', v)\n        },\n        handleResize(v){\n            // __log('handleResize', v)\n            \n        },\n        handleBlur(v){\n            // __log('handleBlur', v)\n\n        },\n\n        saveForm(callback=null, errorCallback=null){\n\n            let fields = {};\n            Object.keys(this.defaultItem).forEach( (key,i) => {\n                fields[key] = (this.model[key]==null || this.defaultItem[key] != '') \n                    ? this.defaultItem[key]\n                    : this.model[key]\n            });\n\n            if(!!this.model.id)\n                fields.id = this.model.id;\n\n            // __log(\n            //     this.defaultItem,\n            //     fields,\n            // );\n            // return;\n            this.$store.commit(FORM.SET_EDITED_ITEM, fields);\n\n            this.$store.dispatch(ACTIONS.SAVE_FORM, {item:null, callback:callback, errorCallback:errorCallback})\n        },\n\n        submit () {\n            if(this.async){\n                this.saveForm();\n            }\n\n            // this.$v.$touch()\n        },\n    }\n\n}\n</script>\n\n<style>\n\n</style>"],"mappings":";8BA+CyPA,mBAAA,CAAe,YAAX,QAAM;;;;;;+9EAAnN,GAAAC,YAAA,CAAmTC,iBAAA;IAA3S,SAAM,cAAQ;IAACC,MAAM,EAAC;;wBAAK;MAAA,OAA0C,C,iBAA1C,MAA0C,GAAAH,mBAAA,CAA2L,c,iBAAtL,MAA8C,GAAAC,YAAA,CAA2BG,iBAAA;4BAAnB;UAAA,OAAU,C,iBAAV,YAAU,E;;;2BAAS,MAA8C,GAAAC,UAAe,E,iBAAA,MAA0C,E,oBAAM,MAAkC,E;;;uBAAS,qCAUvT,GAAAJ,YAAA,CAAqBK,mBAAA,G,iBAAA,02CAmC7B,GAAAL,YAAA,CAAqBK,mBAAA,G,iBAAA,suB"},"metadata":{},"sourceType":"module","externalDependencies":[]}