{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _mutations;\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n/**\n * Media Library\n *\n * Set options for the Media Library and all the medias attached into the form\n */\n\nimport Vue from 'vue';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { MEDIA_LIBRARY } from '../mutations';\nimport ACTIONS from '@/store/actions';\nvar state = {\n  /**\n   * An object of all crops available for cropper component configuration\n   * @type {Object}\n   */\n  crops: window[process.env.VUE_APP_NAME].STORE.medias.crops || {},\n  /**\n   * Display the file name of images\n   * @type {Object}\n   */\n  showFileName: window[process.env.VUE_APP_NAME].STORE.medias.showFileName || false,\n  /**\n   * Define types available in medias library\n   * @type {Array.<string>}\n   */\n  types: window[process.env.VUE_APP_NAME].STORE.medias.types || [],\n  /**\n   * Current type of media library\n   * @type {string}\n   */\n  type: 'image',\n  /**\n   * Connector is used to save media by usage (eg. cover, image, profile...)\n   * @type {string}\n   */\n  connector: null,\n  /**\n   * Define the max of medias that can be select from the media libray\n   * @type {number}\n   */\n  max: 0,\n  /**\n   * Define the maximum filesize allowed to attach in a field from the media library\n   * @type {number}\n   */\n  filesizeMax: 0,\n  /**\n   * Define the min image width allowed to attach in a field from the media library\n   * @type {number}\n   */\n  widthMin: 0,\n  /**\n   * Define the min image height allowed to attach in a field from the media library\n   * @type {number}\n   */\n  heightMin: 0,\n  /**\n   * Restrict the media library navigation between type\n   * @type {Boolean}\n   */\n  strict: true,\n  /**\n   * An object of selected medias by usage (connector)\n   * @type {Object.<string,Object>}\n   */\n  selected: window[process.env.VUE_APP_NAME].STORE.medias.selected || {},\n  /**\n   * An object of configs\n   * @type {Object.<string,Object>}\n   */\n  config: window[process.env.VUE_APP_NAME].STORE.medias.config || {\n    useWysiwyg: false,\n    wysiwygOptions: {}\n  },\n  /**\n   * An array of current uploading medias. When upload is ended, array is reset\n   * @type {Array}\n   */\n  loading: [],\n  /**\n   * The progress value of an upload. When upload is ended, this value is reset to 0.\n   * @type {number}\n   */\n  uploadProgress: 0,\n  /**\n   * An index used when mediaLibrary is open to replace a file\n   * @type {number}\n   */\n  indexToReplace: -1,\n  showModal: window[process.env.VUE_APP_NAME].STORE.medias.openModal || false\n};\n\n// getters\nvar getters = {\n  mediasByBlockId: function mediasByBlockId(state) {\n    return function (id) {\n      var ids = Object.keys(state.selected).filter(function (key) {\n        return key.startsWith(\"blocks[\".concat(id, \"]\"));\n      });\n      var medias = {};\n      ids.forEach(function (id) {\n        return medias[id] = state.selected[id];\n      });\n      return medias;\n    };\n  }\n};\nvar mutations = (_mutations = {}, _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_TYPE_TOTAL, function (state, type) {\n  state.types = state.types.map(function (t) {\n    if (t.value === type.type) t.total = type.total;\n    return t;\n  });\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_REPLACE_INDEX, function (state, index) {\n  state.indexToReplace = index;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.INCREMENT_MEDIA_TYPE_TOTAL, function (state, type) {\n  state.types = state.types.map(function (t) {\n    if (t.value === type) t.total = t.total + 1;\n    return t;\n  });\n}), _defineProperty(_mutations, MEDIA_LIBRARY.DECREMENT_MEDIA_TYPE_TOTAL, function (state, type) {\n  state.types = state.types.map(function (t) {\n    if (t.value === type) t.total = t.total - 1;\n    return t;\n  });\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIAS, function (state, _ref) {\n  var mediaRole = _ref.mediaRole,\n    index = _ref.index,\n    media = _ref.media;\n  Vue.set(state.selected[mediaRole], index, media);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.SAVE_MEDIAS, function (state, medias) {\n  if (state.connector) {\n    var key = state.connector;\n    var existedSelectedConnector = state.selected[key] && state.selected[key].length;\n    if (existedSelectedConnector && state.indexToReplace > -1) {\n      // Replace mode\n      state.selected[key].splice(state.indexToReplace, 1, cloneDeep(medias[0]));\n    } else if (existedSelectedConnector) {\n      // Add mode\n      medias.forEach(function (media) {\n        state.selected[key].push(cloneDeep(media));\n      });\n    } else {\n      // Create mode\n      var newMedias = {};\n      newMedias[key] = medias;\n      state.selected = Object.assign({}, state.selected, newMedias);\n    }\n    state.indexToReplace = -1;\n  }\n}), _defineProperty(_mutations, MEDIA_LIBRARY.DESTROY_SPECIFIC_MEDIA, function (state, media) {\n  if (state.selected[media.name]) {\n    state.selected[media.name].splice(media.index, 1);\n    if (state.selected[media.name].length === 0) Vue[\"delete\"](state.selected, media.name);\n  }\n  state.connector = null;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.DESTROY_MEDIAS, function (state, connector) {\n  if (state.selected[connector]) Vue[\"delete\"](state.selected, connector);\n  state.connector = null;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.REORDER_MEDIAS, function (state, newValues) {\n  var newMedias = {};\n  newMedias[newValues.name] = newValues.medias;\n  state.selected = Object.assign({}, state.selected, newMedias);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.PROGRESS_UPLOAD_MEDIA, function (state, media) {\n  var mediaToUpdate = state.loading.filter(function (m) {\n    return m.id === media.id;\n  });\n  // Update existing form field\n  if (mediaToUpdate.length) {\n    mediaToUpdate[0].error = false;\n    mediaToUpdate[0].progress = media.progress;\n  } else {\n    state.loading.unshift({\n      id: media.id,\n      name: media.name,\n      progress: media.progress,\n      replacementId: media.replacementId,\n      isReplacement: media.isReplacement\n    });\n  }\n}), _defineProperty(_mutations, MEDIA_LIBRARY.PROGRESS_UPLOAD, function (state, uploadProgress) {\n  state.uploadProgress = uploadProgress;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.DONE_UPLOAD_MEDIA, function (state, media) {\n  state.loading.forEach(function (m, index) {\n    if (m.id === media.id) state.loading.splice(index, 1);\n  });\n}), _defineProperty(_mutations, MEDIA_LIBRARY.ERROR_UPLOAD_MEDIA, function (state, media) {\n  state.loading.forEach(function (m, index) {\n    if (m.id === media.id) {\n      Vue.set(state.loading[index], 'progress', 0);\n      Vue.set(state.loading[index], 'error', true);\n      Vue.set(state.loading[index], 'errorMessage', media.errorMessage);\n    }\n  });\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_CONNECTOR, function (state, newValue) {\n  if (newValue && newValue !== '') state.connector = newValue;else state.connector = null;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_MODE, function (state, newValue) {\n  state.strict = newValue;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_TYPE, function (state, newValue) {\n  if (newValue && newValue !== '') state.type = newValue;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.RESET_MEDIA_TYPE, function (state) {\n  // __log(state)\n  state.type = state.types[0].value;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_MAX, function (state, newValue) {\n  state.max = Math.max(0, newValue);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_FILESIZE_MAX, function (state, newValue) {\n  state.filesizeMax = Math.max(0, newValue);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_WIDTH_MIN, function (state, newValue) {\n  state.widthMin = Math.max(0, newValue);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_HEIGHT_MIN, function (state, newValue) {\n  state.heightMin = Math.max(0, newValue);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.SET_MEDIA_METADATAS, function (state, metadatas) {\n  var connector = metadatas.media.context;\n  var medias = state.selected[connector];\n  var newValue = metadatas.value;\n\n  // Save all the custom metadatas here (with or wthout localization)\n  function setMetatadas(mediaToModify) {\n    if (newValue.locale) {\n      // if multi language we will fill an object\n      if (!mediaToModify.metadatas.custom[newValue.id]) {\n        mediaToModify.metadatas.custom[newValue.id] = {};\n      }\n      mediaToModify.metadatas.custom[newValue.id][newValue.locale] = newValue.value;\n    } else {\n      mediaToModify.metadatas.custom[newValue.id] = newValue.value;\n    }\n    return mediaToModify;\n  }\n  if (metadatas.media.hasOwnProperty('index')) {\n    var media = setMetatadas(cloneDeep(medias[metadatas.media.index]));\n    Vue.set(medias, metadatas.media.index, media);\n  }\n}), _defineProperty(_mutations, MEDIA_LIBRARY.DESTROY_MEDIA_CONNECTOR, function (state) {\n  state.connector = null;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.SET_MEDIA_CROP, function (state, crop) {\n  var key = crop.key;\n  var index = crop.index;\n  var media = state.selected[key][index];\n  function addCrop(mediaToModify) {\n    if (!mediaToModify.crops) mediaToModify.crops = {};\n\n    // save all the crop variants to the media\n    for (var variant in crop.values) {\n      var newValues = {};\n      newValues.name = crop.values[variant].name || variant;\n      newValues.x = crop.values[variant].x;\n      newValues.y = crop.values[variant].y;\n      newValues.width = crop.values[variant].width;\n      newValues.height = crop.values[variant].height;\n      mediaToModify.crops[variant] = newValues;\n    }\n    return mediaToModify;\n  }\n  var newMedia = addCrop(cloneDeep(media));\n  Vue.set(state.selected[key], index, newMedia);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.ADD_MEDIAS, function (state, _ref2) {\n  var medias = _ref2.medias;\n  state.selected = Object.assign({}, state.selected, medias);\n}), _mutations);\nvar actions = _defineProperty({}, ACTIONS.DUPLICATE_BLOCK, function (_ref3, _ref4) {\n  return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var commit, getters, block, id, medias, mediaIds, duplicates;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          commit = _ref3.commit, getters = _ref3.getters;\n          block = _ref4.block, id = _ref4.id;\n          // copy medias and update with the provided id\n          medias = _objectSpread({}, getters.mediasByBlockId(block.id));\n          mediaIds = Object.keys(medias);\n          duplicates = {};\n          mediaIds.forEach(function (mediaId) {\n            return duplicates[mediaId.replace(block.id, id)] = _toConsumableArray(medias[mediaId]);\n          });\n          commit(MEDIA_LIBRARY.ADD_MEDIAS, {\n            medias: duplicates\n          });\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }))();\n});\nexport default {\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}