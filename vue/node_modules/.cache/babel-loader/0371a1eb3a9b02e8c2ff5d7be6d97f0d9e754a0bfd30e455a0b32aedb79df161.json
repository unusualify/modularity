{"ast":null,"code":"import _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _mutations, _actions;\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport api from '@/store/api/datatable';\nimport { DATATABLE, ALERT } from '@/store/mutations';\nimport ACTIONS from '@/store/actions';\nimport { setStorage } from '@/utils/localeStorage';\n\n/* NESTED functions */\nvar getObject = function getObject(container, id, callback) {\n  container.forEach(function (item) {\n    if (item.id === id) callback(item);\n    if (item.children) getObject(item.children, id, callback);\n  });\n};\nvar deepRemoveFromObj = function deepRemoveFromObj(items) {\n  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['id', 'children'];\n  var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';\n  var deepItems = JSON.parse(JSON.stringify(items));\n  deepItems.forEach(function (obj) {\n    for (var prop in obj) {\n      if (!keys.includes(prop)) {\n        delete obj[prop];\n      }\n      if (prop === deep) {\n        obj[prop] = deepRemoveFromObj(obj[prop]);\n      }\n    }\n  });\n  return deepItems;\n};\nvar state = {\n  baseUrl: window[process.env.VUE_APP_NAME].STORE.datatable.baseUrl || '',\n  name: window[process.env.VUE_APP_NAME].STORE.datatable.name,\n  headers: window[process.env.VUE_APP_NAME].STORE.datatable.headers,\n  // inputs: window[process.env.VUE_APP_NAME].STORE.datatable.inputs,\n  search: window[process.env.VUE_APP_NAME].STORE.datatable.searchText,\n  options: window[process.env.VUE_APP_NAME].STORE.datatable.options,\n  actions: window[process.env.VUE_APP_NAME].STORE.datatable.actions,\n  actionsType: window[process.env.VUE_APP_NAME].STORE.datatable.actionsType,\n  data: window[process.env.VUE_APP_NAME].STORE.datatable.data || [],\n  total: parseInt(window[process.env.VUE_APP_NAME].STORE.datatable.total),\n  filter: window[process.env.VUE_APP_NAME].STORE.datatable.filter || {},\n  mainFilters: window[process.env.VUE_APP_NAME].STORE.datatable.mainFilters || [],\n  bulk: [],\n  // localStorageKey: window[process.env.VUE_APP_NAME].STORE.datatable.localStorageKey || window.location.pathname,\n  loading: false,\n  updateTracker: 0\n\n  // columns: window[process.env.VUE_APP_NAME].STORE.datatable.columns || [],\n  // dialog: false\n};\n\n// getters\nvar getters = {\n  // defaultItem: state => {\n  //   return state.inputs.reduce( (a,c) => (a[c.name] = c.default, a), {})\n  // },\n  totalElements: function totalElements(state) {\n    return state.total;\n  },\n  formatterColumns: function formatterColumns(state) {\n    return state.headers.filter(function (h) {\n      return h.hasOwnProperty('formatter') && !!h.formatter;\n    });\n  },\n  editableColumns: function editableColumns(state) {\n    return state.headers.filter(function (h) {\n      return h.hasOwnProperty('isColumnEditable') && h.isColumnEditable;\n    });\n  },\n  rowEditables: function rowEditables(state) {\n    return state.headers.filter(function (h) {\n      return h.hasOwnProperty('isRowEditable') && h.isRowEditable;\n    });\n  },\n  rowActions: function rowActions(state) {\n    return state.actions;\n  },\n  rowActionsType: function rowActionsType(state) {\n    return state.actionsType;\n  },\n  mainFilters: function mainFilters(state) {\n    return state.mainFilters;\n  }\n};\nvar mutations = (_mutations = {}, _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_OPTIONS, function (state, options) {\n  state.options = options;\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_SEARCH, function (state, search) {\n  state.search = search;\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_TOTAL, function (state, total) {\n  state.total = total;\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_DATA, function (state, data) {\n  // Each time the data is changing, we reset the bulk ids\n  state.bulk = [];\n  state.data = data;\n}), _defineProperty(_mutations, DATATABLE.SET_DATATABLE_DIALOG, function (state, val) {\n  state.dialog = val;\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_BULK, function (state, id) {\n  if (state.bulk.indexOf(id) > -1) {\n    state.bulk = state.bulk.filter(function (item) {\n      return item !== id;\n    });\n  } else {\n    state.bulk.push(id);\n  }\n}), _defineProperty(_mutations, DATATABLE.REPLACE_DATATABLE_BULK, function (state, ids) {\n  state.bulk = ids;\n}), _defineProperty(_mutations, DATATABLE.ADD_DATATABLE_COLUMN, function (state, column) {\n  state.columns.splice(column.index, 0, column.data);\n}), _defineProperty(_mutations, DATATABLE.REMOVE_DATATABLE_COLUMN, function (state, columnName) {\n  state.columns.forEach(function (column, index) {\n    if (column.name === columnName) state.columns.splice(index, 1);\n  });\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_FILTER, function (state, filter) {\n  state.filter = Object.assign({}, state.filter, filter);\n}), _defineProperty(_mutations, DATATABLE.CLEAR_DATATABLE_FILTER, function (state) {\n  state.filter = Object.assign({}, {\n    search: '',\n    status: state.filter.status\n  });\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_FILTER_STATUS, function (state, slug) {\n  state.filter.status = slug;\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_OFFSET, function (state, offsetNumber) {\n  state.offset = offsetNumber;\n  setStorage(state.localStorageKey + '_page-offset', state.offset);\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_PAGE, function (state, pageNumber) {\n  //   state.page = pageNumber\n  // state.options.page = pageNumber\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_MAXPAGE, function (state, maxPage) {\n  if (state.page > maxPage) state.page = maxPage;\n  state.maxPage = maxPage;\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_VISIBLITY, function (state, columnNames) {\n  setStorage(state.localStorageKey + '_columns-visible', JSON.stringify(columnNames));\n  state.columns.forEach(function (column) {\n    for (var i = 0; i < columnNames.length; i++) {\n      if (columnNames[i] === column.name) {\n        column.visible = true;\n        break;\n      }\n      column.visible = false;\n    }\n  });\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_SORT, function (state, column) {\n  var defaultSortDirection = 'asc';\n  if (state.sortKey === column.name) {\n    state.sortDir = state.sortDir === defaultSortDirection ? 'desc' : defaultSortDirection;\n  } else {\n    state.sortDir = defaultSortDirection;\n  }\n  state.sortKey = column.name;\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_NAV, function (state, newFilters) {\n  newFilters.forEach(function (newItem) {\n    state.mainFilters.forEach(function (filterItem) {\n      if (filterItem.name === newItem.name) filterItem.number = newItem.number;\n    });\n  });\n}), _defineProperty(_mutations, DATATABLE.PUBLISH_DATATABLE, function (state, data) {\n  var id = data.id;\n  var value = data.value;\n  function updateState(index) {\n    if (index >= 0) {\n      if (value === 'toggle') state.data[index].published = !state.data[index].published;else state.data[index].published = value;\n    }\n  }\n  function getIndex(id) {\n    return state.data.findIndex(function (item, index) {\n      return item.id === id;\n    });\n  }\n\n  // bulk\n  if (Array.isArray(id)) {\n    id.forEach(function (itemId) {\n      var index = getIndex(itemId);\n      updateState(index);\n    });\n    state.bulk = [];\n  } else {\n    var index = getIndex(id);\n    updateState(index);\n  }\n}), _defineProperty(_mutations, DATATABLE.FEATURE_DATATABLE, function (state, data) {\n  var id = data.id;\n  var value = data.value;\n  function updateState(index) {\n    if (index >= 0) {\n      if (value === 'toggle') state.data[index].featured = !state.data[index].featured;else state.data[index].featured = value;\n    }\n  }\n  function getIndex(id) {\n    return state.data.findIndex(function (item, index) {\n      return item.id === id;\n    });\n  }\n\n  // bulk\n  if (Array.isArray(id)) {\n    id.forEach(function (itemId) {\n      var index = getIndex(itemId);\n      updateState(index);\n    });\n    state.bulk = [];\n  } else {\n    var index = getIndex(id);\n    updateState(index);\n  }\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_LOADING, function (state, loading) {\n  state.loading = !state.loading;\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_NESTED, function (state, data) {\n  getObject(state.data, data.parentId, function (item) {\n    item.children = data.val;\n  });\n}), _defineProperty(_mutations, DATATABLE.UPDATE_DATATABLE_TRACKER, function (state, newTracker) {\n  state.updateTracker = newTracker ? state.updateTracker + 1 : 0;\n}), _mutations);\nvar activeOption = function activeOption(option, key) {\n  var exist = true;\n  var value;\n  if (key.match(/sortBy|sortDesc/)) {\n    if (option.length > 0) {\n      value = option[0];\n    } else {\n      exist = false;\n    }\n  } else if (key.match(/page|itemsPerPage/)) {\n    value = option;\n  } else {\n    exist = false;\n  }\n  return {\n    active: exist,\n    value: value\n  };\n};\nvar actions = (_actions = {}, _defineProperty(_actions, ACTIONS.DELETE_ITEM, function (_ref) {\n  var commit = _ref.commit,\n    state = _ref.state,\n    dispatch = _ref.dispatch;\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref2$id = _ref2.id,\n    id = _ref2$id === void 0 ? null : _ref2$id,\n    _ref2$callback = _ref2.callback,\n    callback = _ref2$callback === void 0 ? null : _ref2$callback,\n    _ref2$errorCallback = _ref2.errorCallback,\n    errorCallback = _ref2$errorCallback === void 0 ? null : _ref2$errorCallback;\n  api[\"delete\"](id, function (resp) {\n    commit(ALERT.SET_ALERT, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n    if (resp.data.variant == 'success') {\n      dispatch(ACTIONS.GET_DATATABLE);\n      callback(resp.data);\n    } else {\n      errorCallback(resp.data);\n    }\n  });\n}), _defineProperty(_actions, ACTIONS.GET_DATATABLE, function (_ref3) {\n  var commit = _ref3.commit,\n    state = _ref3.state,\n    getters = _ref3.getters;\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref4$payload = _ref4.payload,\n    payload = _ref4$payload === void 0 ? {} : _ref4$payload,\n    _ref4$callback = _ref4.callback,\n    callback = _ref4$callback === void 0 ? null : _ref4$callback,\n    _ref4$errorCallback = _ref4.errorCallback,\n    errorCallback = _ref4$errorCallback === void 0 ? null : _ref4$errorCallback;\n  // if (!state.loading) {\n\n  var keys = Object.keys(payload);\n  var _changed = keys.length == 0;\n  keys.every(function (key) {\n    if (__isset(state[key])) {\n      if (__isObject(state[key]) && __isObject(payload[key])) {\n        _changed = !Object.equals(payload[key], state[key]);\n      } else if (Array.isArray(payload[key]) && Array.isArray(state[key])) {\n        _changed = !Array.equals(payload[key], state[key]);\n      } else {\n        _changed = state[key] !== payload[key];\n      }\n    }\n    return !_changed;\n  });\n  if (_changed) {\n    commit(DATATABLE.UPDATE_DATATABLE_LOADING, true);\n    var parameters = _objectSpread(_objectSpread({}, Object.keys(state.options).reduce(function (filtered, key) {\n      var _activeOption = activeOption(__isset(payload.options) ? payload.options[key] : state.options[key], key),\n        active = _activeOption.active,\n        value = _activeOption.value;\n      if (active) {\n        filtered[key] = value;\n      }\n      return filtered;\n    }, {})), state.search != '' ? {\n      search: state.search\n    } : {});\n\n    // __log(parameters)\n    var params = _objectSpread({\n      // columns: getters.visibleColumnsNames,\n      // filter: state.filter\n      page: __isset(payload.options) ? payload.options.page : state.options.page,\n      itemsPerPage: __isset(payload.options) ? payload.options.itemsPerPage : state.options.itemsPerPage\n    }, state.search != '' ? {\n      search: state.search\n    } : {});\n    api.get(parameters, function (resp) {\n      // __log('ACTIONS.GET_DATATABLE')\n      commit(DATATABLE.UPDATE_DATATABLE_DATA, resp.data);\n      commit(DATATABLE.UPDATE_DATATABLE_TOTAL, resp.total);\n      commit(DATATABLE.UPDATE_DATATABLE_LOADING, false);\n      if (__isset(payload.options)) {\n        commit(DATATABLE.UPDATE_DATATABLE_OPTIONS, payload.options);\n      }\n      if (__isset(payload.search)) {\n        commit(DATATABLE.UPDATE_DATATABLE_SEARCH, payload.search);\n      }\n    });\n  }\n  // }\n}), _defineProperty(_actions, ACTIONS.SET_DATATABLE_NESTED, function (_ref5) {\n  var commit = _ref5.commit,\n    state = _ref5.state,\n    dispatch = _ref5.dispatch;\n  // Get all ids and children ids if any\n  var ids = deepRemoveFromObj(state.data);\n  api.reorder(ids, function (resp) {\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n  });\n}), _defineProperty(_actions, ACTIONS.SET_DATATABLE, function (_ref6) {\n  var commit = _ref6.commit,\n    state = _ref6.state,\n    dispatch = _ref6.dispatch;\n  var ids = state.data.map(function (row) {\n    return row.id;\n  });\n  api.reorder(ids, function (resp) {\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n  });\n}), _defineProperty(_actions, ACTIONS.TOGGLE_PUBLISH, function (_ref7, row) {\n  var commit = _ref7.commit,\n    state = _ref7.state,\n    dispatch = _ref7.dispatch;\n  api.togglePublished(row, function (resp) {\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n    dispatch(ACTIONS.GET_DATATABLE);\n  }, function (errorResp) {\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: errorResp.data.error.message,\n      variant: 'error'\n    });\n  });\n}), _defineProperty(_actions, ACTIONS.DUPLICATE_ROW, function (_ref8, row) {\n  var commit = _ref8.commit,\n    state = _ref8.state,\n    dispatch = _ref8.dispatch;\n  api.duplicate(row, function (resp) {\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n    if (resp.data.hasOwnProperty('redirect')) {\n      window.location.replace(resp.data.redirect);\n    }\n  });\n}), _defineProperty(_actions, ACTIONS.RESTORE_ROW, function (_ref9, row) {\n  var commit = _ref9.commit,\n    state = _ref9.state,\n    dispatch = _ref9.dispatch;\n  api.restore(row, function (resp) {\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n    dispatch(ACTIONS.GET_DATATABLE);\n  });\n}), _defineProperty(_actions, ACTIONS.DESTROY_ROW, function (_ref10, row) {\n  var commit = _ref10.commit,\n    state = _ref10.state,\n    dispatch = _ref10.dispatch;\n  api.destroy(row, function (resp) {\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n    dispatch(ACTIONS.GET_DATATABLE);\n  });\n}), _defineProperty(_actions, ACTIONS.BULK_PUBLISH, function (_ref11, payload) {\n  var commit = _ref11.commit,\n    state = _ref11.state,\n    dispatch = _ref11.dispatch;\n  api.bulkPublish({\n    ids: state.bulk.join(),\n    toPublish: payload.toPublish\n  }, function (resp) {\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n    dispatch(ACTIONS.GET_DATATABLE);\n  });\n}), _defineProperty(_actions, ACTIONS.TOGGLE_FEATURE, function (_ref12, row) {\n  var commit = _ref12.commit,\n    state = _ref12.state;\n  api.toggleFeatured(row, function (resp) {\n    commit(DATATABLE.FEATURE_DATATABLE, {\n      id: row.id,\n      value: 'toggle'\n    });\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n  });\n}), _defineProperty(_actions, ACTIONS.BULK_FEATURE, function (_ref13, payload) {\n  var commit = _ref13.commit,\n    state = _ref13.state;\n  api.bulkFeature({\n    ids: state.bulk.join(),\n    toFeature: payload.toFeature\n  }, function (resp) {\n    commit(DATATABLE.FEATURE_DATATABLE, {\n      id: state.bulk,\n      value: true\n    });\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n  });\n}), _defineProperty(_actions, ACTIONS.BULK_DELETE, function (_ref14) {\n  var commit = _ref14.commit,\n    state = _ref14.state,\n    dispatch = _ref14.dispatch;\n  api.bulkDelete(state.bulk.join(), function (resp) {\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n    dispatch(ACTIONS.GET_DATATABLE);\n  });\n}), _defineProperty(_actions, ACTIONS.BULK_RESTORE, function (_ref15) {\n  var commit = _ref15.commit,\n    state = _ref15.state,\n    dispatch = _ref15.dispatch;\n  api.bulkRestore(state.bulk.join(), function (resp) {\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n    dispatch(ACTIONS.GET_DATATABLE);\n  });\n}), _defineProperty(_actions, ACTIONS.BULK_DESTROY, function (_ref16) {\n  var commit = _ref16.commit,\n    state = _ref16.state,\n    dispatch = _ref16.dispatch;\n  api.bulkDestroy(state.bulk.join(), function (resp) {\n    commit(NOTIFICATION.SET_NOTIF, {\n      message: resp.data.message,\n      variant: resp.data.variant\n    });\n    dispatch(ACTIONS.GET_DATATABLE);\n  });\n}), _actions);\nexport default {\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}