{"ast":null,"code":"import _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { mapGetters, mapState } from 'vuex';\nimport { FORM } from '@/store/mutations/index';\nimport ACTIONS from '@/store/actions';\nexport default {\n  // name: \"ue-form-base\",\n  props: {\n    value: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    schema: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    rowAttribute: {\n      type: Object,\n      \"default\": function _default() {\n        return {\n          noGutters: false\n          // justify:'center', \n          // align:'center'\n        };\n      }\n    },\n\n    async: {\n      type: Boolean,\n      \"default\": true\n    },\n    hasSubmit: {\n      type: Boolean,\n      \"default\": false\n    },\n    stickyFrame: {\n      type: Boolean,\n      \"default\": false\n    },\n    stickyButton: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      id: Math.ceil(Math.random() * 1000000) + \"-form\",\n      valid: false\n    };\n  },\n  beforeCreate: function beforeCreate() {},\n  created: function created() {\n    // __log(this.$root)\n    // Object.fromEntries(this.inputs[1].extras.map(v => ([v,true])))\n\n    // console.log(this.inputs[2])\n  },\n  watch: {\n    inputSchema: function inputSchema(val) {\n      __log('inputSchema changed', val);\n    }\n  },\n  computed: _objectSpread({\n    issetModel: function issetModel() {\n      return Object.keys(this.value).length > 0;\n    },\n    issetSchema: function issetSchema() {\n      return Object.keys(this.schema).length > 0;\n    },\n    hasStickyFrame: function hasStickyFrame() {\n      return this.stickyFrame || this.stickyButton;\n    },\n    inputSchema: function inputSchema() {\n      return this.issetSchema ? this.schema : this.$store.state.form.inputs;\n    },\n    defaultItem: {\n      get: function get() {\n        // __log(\n        //     this.issetModel ? this.value : this.$store.state.form.editedItem\n        // )\n        return this.issetModel ? this.value : this.$store.state.form.editedItem;\n      },\n      set: function set(value) {}\n    },\n    model: {\n      get: function get() {\n        console.log('formBase model getter', this.defaultItem, this.value);\n        return this.defaultItem;\n      },\n      set: function set(value) {\n        __log('model setter', value);\n        // __log('ForBase.vue->model set', value)\n\n        // if(this.issetModel)\n        //     this.$emit('input', value)\n        // else    \n        //     this.$store.commit(FORM.SET_EDITED_ITEM, value)\n      }\n    },\n    reference: function reference() {\n      return 'ref-' + this.id;\n    },\n    formColumnAttrs: function formColumnAttrs() {\n      return this.hasStickyFrame ? {\n        'cols': '12',\n        'sm': '12',\n        'md': '12',\n        'lg': '8',\n        'xl': '6',\n        'order-lg': '0',\n        'order-xl': '0'\n      } : {\n        'cols': '12'\n      };\n    },\n    stickyColumnAttrs: function stickyColumnAttrs() {\n      return {\n        'cols': '12',\n        'sm': '12',\n        'md': '12',\n        'lg': '4',\n        'xl': '6',\n        'order-lg': '1',\n        'order-xl': '1'\n      };\n    }\n  }, mapState({\n    loading: function loading(state) {\n      return state.form.loading;\n    },\n    errors: function errors(state) {\n      return state.form.errors;\n    }\n  })),\n  methods: {\n    validate: function validate() {\n      this.$refs[this.reference].validate();\n    },\n    resetValidation: function resetValidation() {\n      this.$refs[this.reference].resetValidation();\n    },\n    handleInput: function handleInput(v) {\n      // __log(\n      //     'handleInput', \n      //     v.obj.key,\n      //     v.obj.value,\n      //     this.model\n      // )\n      // this.model = this.model;\n    },\n    handleUpdate: function handleUpdate(v) {\n      __log('handleUpdate', v);\n    },\n    handleResize: function handleResize(v) {\n      // __log('handleResize', v)\n    },\n    handleBlur: function handleBlur(v) {\n      // __log('handleBlur', v)\n    },\n    saveForm: function saveForm() {\n      var _this = this;\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var errorCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var fields = {};\n      Object.keys(this.defaultItem).forEach(function (key, i) {\n        fields[key] = _this.model[key] == null || _this.defaultItem[key] != '' ? _this.defaultItem[key] : _this.model[key];\n      });\n      if (!!this.model.id) fields.id = this.model.id;\n\n      // __log(\n      //     this.defaultItem,\n      //     fields,\n      // );\n      // return;\n      this.$store.commit(FORM.SET_EDITED_ITEM, fields);\n      this.$store.dispatch(ACTIONS.SAVE_FORM, {\n        item: null,\n        callback: callback,\n        errorCallback: errorCallback\n      });\n    },\n    submit: function submit() {\n      if (this.async) {\n        this.saveForm();\n      }\n\n      // this.$v.$touch()\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}