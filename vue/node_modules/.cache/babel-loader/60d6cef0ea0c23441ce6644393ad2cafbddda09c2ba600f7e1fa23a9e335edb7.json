{"ast":null,"code":"import _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\n// Import\n// import Vue from 'vue'\n// import { getCurrentInstance } from 'vue'\nimport { get, isPlainObject, isFunction, isString, isNumber, isEmpty, orderBy, delay } from 'lodash';\n\n// import VueMask from 'v-mask'\n// Vue.use(VueMask, {\n//   placeholders: {\n//     // Info Mask https://github.com/probil/v-mask\n//     // '#': null,       // passing `null` removes default placeholder, so `#` is treated as character\n//     // D: /\\d/,         // define new placeholder\n//   }\n// })\n//\n// Declaration\nvar typeToComponent = {\n  // maps schema.type to prop 'type' in v-text-field  - https://www.wufoo.com/html5/\n  text: 'v-text-field',\n  password: 'v-text-field',\n  email: 'v-text-field',\n  tel: 'v-text-field',\n  url: 'v-text-field',\n  search: 'v-text-field',\n  number: 'v-text-field',\n  /*\n        { type:'text, ext:'typeOfTextField', ...}\n        For native <INPUT> type use alternative schema prop ext  -> schema:{ type:'text, ext:'date', ...}\n        correspond to <input type=\"number\" >\n        number: 'v-text-field',   //  { type:'text, ext:'number', ...}\n        range: 'v-text-field',   //  { type:'text, ext:'range', ...}\n        date: 'v-text-field',    //  { type:'text, ext:'date', ...}\n        time: 'v-text-field',    //  { type:'text, ext:'time', ...}\n        color: 'v-text-field',   //  { type:'text, ext:'color', ...}\n      */\n\n  date: 'v-date-picker',\n  time: 'v-time-picker',\n  color: 'v-color-picker',\n  /*\n        INFO: 3 Types of PICKER DATE / TIME / COLOR\n        Date-Native Input    - schema:{ type:'text, ext:'date', ...}\n        Date-Picker          - schema:{ type:'date', ...}\n        Date-Picker-Textmenu     - schema:{ type:'date', ext:'text'...}\n      */\n\n  // map schema.type to vuetify-control (vuetify 2.0)\n  img: 'v-img',\n  textarea: 'v-textarea',\n  range: 'v-slider',\n  file: 'v-file-input',\n  \"switch\": 'v-switch',\n  checkbox: 'v-checkbox',\n  card: 'v-card'\n  /*\n        HOW TO USE CUSTOM Components\n        1)\n          Name and Register your Custom-Control Component globally in 'main.js'\n          but avoid collision with registered names of Vuetify - Controls\n          See: https://vuejs.org/v2/guide/components-registration.html\n           Vue.component('custom-component', () => import('@/components/custom-component.vue') )\n         2)\n          use it in Schema\n           mySchema: { myCustom: { type: 'custom-component' }\n         3) // custom-component.vue\n          <template>\n            <v-text-field v-model=\"inp\"  label=\"Basic\"></v-text-field>\n          </template>\n          <script>\n            export default {\n              props: ['type','value', 'obj'],\n              computed:{\n                inp:{\n                  get(){  return this.value},\n                  set(v){ this.$emit('input', v)}\n                }\n              }\n            }\n          < /script>\n      */\n};\n\nvar orderDirection = 'ASC';\nvar pathDelimiter = '.';\nvar classKeyDelimiter = '-';\nvar defaultID = 'form-base';\nvar isPicker = 'date|time|color';\nvar onEventDelay = 1; // ms\n\nvar mouse = 'mouseenter|mouseleave';\nvar change = 'input|click'; // event change collects events 'input|click'\nvar watch = 'focus|input|click|blur'; // event watch collects events 'focus|input|click|blur'\nvar display = 'resize|swipe|intersect'; // event watch collects events 'resize|swipe|intersect'\n\nvar topAppendix = 'top';\nvar bottomAppendix = 'bottom';\nvar slotAppendix = 'slot';\nvar tooltipAppendix = 'tooltip';\nvar injectAppendix = 'inject';\nvar itemClassAppendix = 'item';\nvar typeClassAppendix = 'type';\nvar keyClassAppendix = 'key';\nvar arrayClassAppendix = 'array';\nvar propertyClassAppendix = 'prop';\nvar injectSlotAppendix = \"\".concat(slotAppendix, \"-\").concat(injectAppendix);\nvar arraySlotAppendix = \"\".concat(slotAppendix, \"-\").concat(arrayClassAppendix);\nvar topSlotAppendix = \"\".concat(slotAppendix, \"-\").concat(topAppendix);\nvar itemSlotAppendix = \"\".concat(slotAppendix, \"-\").concat(itemClassAppendix);\nvar bottomSlotAppendix = \"\".concat(slotAppendix, \"-\").concat(bottomAppendix);\nvar tooltipSlotAppendix = \"\".concat(slotAppendix, \"-\").concat(tooltipAppendix);\nvar clear = 'clear';\nvar button = 'button';\nvar treeview = 'treeview';\nvar list = 'list';\nvar focus = 'focus';\nvar blur = 'blur';\nvar append = 'append';\nvar appendOuter = 'append-outer';\nvar prepend = 'prepend';\nvar prependInner = 'prepend-inner';\nvar hour = 'hour';\nvar minute = 'minute';\nvar second = 'second';\n\n// symbol on drop\nvar dropEffect = 'move'; // 'copy, link, move\n// Default row setting if no row-attribute defined\nvar rowDefault = {\n  noGutters: true\n}; // { noGutters:true, justify:'center', align:'center' }\n\n// Default col setting, overrideable by prop col or by schema.col definition\n// Default col setting, overrideable by prop flex or by schema.flex definition (flex is DEPRECATED use col instead)\nvar colDefault = {\n  cols: 'auto'\n}; // { cols:12, sm: 6, md:4, lg:3, xl:2}\n\n// Mapper for Autogeneration of Schema from Value\nvar defaultSchemaIfValueIsNullOrUndefined = function defaultSchemaIfValueIsNullOrUndefined(key) {\n  return {\n    type: 'text',\n    label: key\n  };\n};\nvar defaultSchemaIfValueIsString = function defaultSchemaIfValueIsString(key) {\n  return {\n    type: 'text',\n    label: key\n  };\n};\nvar defaultSchemaIfValueIsNumber = function defaultSchemaIfValueIsNumber(key) {\n  return {\n    type: 'number',\n    label: key\n  };\n};\nvar defaultSchemaIfValueIsBoolean = function defaultSchemaIfValueIsBoolean(key) {\n  return {\n    type: 'checkbox',\n    label: key\n  };\n};\n// Menu triggered DateTimePicker Default\nvar defaultPickerSchemaText = {\n  type: 'text',\n  readonly: true\n};\nvar defaultPickerSchemaMenu = {\n  closeOnContentClick: false,\n  transition: 'scale-transition',\n  nudgeRight: 32,\n  maxWidth: '290px',\n  minWidth: '290px'\n};\n// type wrap or group - if no typeInt defined take default\nvar defaultInternGroupType = 'v-card';\n//\nexport default {\n  name: 'VFormBase',\n  props: {\n    id: {\n      type: String,\n      \"default\": defaultID\n    },\n    rootId: {\n      type: String,\n      \"default\": defaultID\n    },\n    row: {\n      type: [Object]\n    },\n    col: {\n      type: [Object, Number, String]\n    },\n    flex: {\n      type: [Object, Number, String]\n    },\n    modelValue: {\n      type: [Object, Array],\n      \"default\": function _default() {\n        return null;\n      }\n    },\n    model: {\n      type: [Object, Array],\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    schema: {\n      type: [Object, Array],\n      \"default\": function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      flatCombinedArray: [],\n      clear: clear,\n      button: button,\n      treeview: treeview,\n      list: list,\n      focus: focus,\n      blur: blur,\n      append: append,\n      appendOuter: appendOuter,\n      prepend: prepend,\n      prependInner: prependInner,\n      hour: hour,\n      minute: minute,\n      second: second\n    };\n  },\n  computed: {\n    valueIntern: function valueIntern() {\n      // use <formbase :model=\"myData\" />  ->  legacy code <formbase :value=\"myData\" />\n      var model = this.model || this.modelValue;\n      this.updateArrayFromState(model, this.schema);\n      return model;\n    },\n    parent: function parent() {\n      var p = this;\n      if (p.$parent && p.$parent.$parent) {\n        while (p.id.startsWith(p.$parent.$parent.id + '-')) {\n          p = p.$parent.$parent;\n        }\n      }\n      return p;\n    },\n    index: function index() {\n      var m = this.id && this.id.match(/\\d+/g);\n      return m ? m.map(Number) : null;\n    },\n    getRow: function getRow() {\n      return this.row || rowDefault;\n    },\n    flatCombinedArraySorted: function flatCombinedArraySorted() {\n      return orderBy(this.flatCombinedArray, ['schema.sort'], [orderDirection]);\n    },\n    storeStateData: function storeStateData() {\n      this.updateArrayFromState(this.valueIntern, this.schema);\n      return this.valueIntern;\n    },\n    storeStateSchema: function storeStateSchema() {\n      this.updateArrayFromState(this.valueIntern, this.schema);\n      return this.schema;\n    }\n  },\n  watch: {\n    schema: function schema(newSchema) {\n      this.rebuildArrays(this.valueIntern, newSchema);\n      // this.schema = newSchema\n    }\n  },\n\n  methods: {\n    // MAP TYPE\n    mapTypeToComponent: function mapTypeToComponent(type) {\n      // merge global registered components into typeToComponent Object\n      __log(this.$app);\n      // const allTypeComponents = { ...typeToComponent, ...this.$app._instance.appContext.components }\n      // // const typeToComponent -> maps type to according v-component\n      // // ie. schema:{ type:'password', ... } to specific vuetify-control or default to v-text-field'\n      // return allTypeComponents[type] ? allTypeComponents[type] : `v-${type}`\n    },\n    // CHECK FOR TYPE: DATE, TIME OR COLOR and EXT: TEXT\n    isDateTimeColorTypeAndExtensionText: function isDateTimeColorTypeAndExtensionText(obj) {\n      return isPicker.includes(obj.schema.type) && obj.schema.ext === 'text';\n    },\n    // CHECK FOR EXT: DATE, TIME OR COLOR\n    isDateTimeColorExtension: function isDateTimeColorExtension(obj) {\n      return isPicker.includes(obj.schema.ext);\n    },\n    // BIND SCHEMA TEXT OPTIONS\n    bindOptions: function bindOptions(b) {\n      // schema.options in RADIO/BUTTON\n      return isString(b) ? {\n        value: b,\n        label: b\n      } : b;\n    },\n    bindSchemaText: function bindSchemaText(obj) {\n      return _objectSpread(_objectSpread({}, defaultPickerSchemaText), obj.schema.text);\n    },\n    bindSchemaMenu: function bindSchemaMenu(obj) {\n      return _objectSpread(_objectSpread({}, defaultPickerSchemaMenu), obj.schema.menu);\n    },\n    bindSchema: function bindSchema(obj) {\n      return obj.schema;\n    },\n    suspendClickAppend: function suspendClickAppend(obj) {\n      // select|combobox|autocomplete -> suspend 'click:append' for working down arrow\n      return /(select|combobox|autocomplete)/.test(obj.schema.type) ? '' : 'click:append';\n    },\n    searchInputSync: function searchInputSync(obj) {\n      // schema.searchInput ->   bind 'search-input'\n      return typeof obj.schema.searchInput !== 'undefined' ? 'search-input' : '';\n    },\n    // EXT TYPE\n    checkExtensionType: function checkExtensionType(obj) {\n      // For native <INPUT> type use prop 'ext'\n      // { type:'text', ext:'range', ... } -> use native Input Type 'range' instead of slider\n      // { type:'text', ext:'number', ...} -> use native Input Type 'number'\n      return obj.schema.ext || obj.schema.type;\n    },\n    // V-INTERN TYPE\n    checkInternType: function checkInternType(obj) {\n      // If vuetify component needs a 'type' prop for working  - ie. datepicker uses type:'month'\n      // { type:'date', ext:'text', typeInt:'month' ...} -> use v-date-picker menu with intern Type 'month'\n      return obj.schema.typeInt || obj.schema.type;\n    },\n    checkInternGroupType: function checkInternGroupType(obj) {\n      //  in type 'wrap|group' you can define with typeInt: a component as group - schema: { group1: { type:'wrap', typeInt:'v-card', ... } ...}\n      var typeInt = obj.schema.typeInt || defaultInternGroupType;\n      return typeInt.startsWith('v-') ? typeInt : \"v-\".concat(typeInt);\n    },\n    // GET ITERATION KEY FOR TYPE ARRAY\n    getKeyForArray: function getKeyForArray(id, obj, item, index) {\n      // IMPORTANT if you want to add or remove items in type:'array'\n      // more Info ->\n      // https://forum.vuejs.org/t/after-splicing-an-object-wrong-item-disappears-from-view/9247/4\n      // https://stackoverflow.com/questions/45655090/vue-array-splice-removing-wrong-item-from-list\n\n      // create for iteration v-for an uniqe key from each object in array using index and time.hash\n      // or define your key index by defining a key property\n      // MODEL\n      // arrayTasks: [{ trace:'100', label:'A'}, ...  ]\n      // SCHEMA\n      // arrayTasks: { type:'array', schema:{ ... } }                                                      DEFAULT KEY -> KEY id-key-index   'arrayTasks-0'\n      // arrayTasks: { type:'array', key:'trace', schema:{ trace: { type:'text'}, ... } }                              -> KEY trace            100\n      // arrayTasks: { type:'array', key:['trace','label'], schema:{ trace: { type:'text'}, label: { type:'text'} } }  -> KEY trace_label      100_A\n\n      // IMPORTANT! Key should not contain an EDITABLE prop, because of re-iteration on any change\n\n      var k = obj.schema.key;\n      return k ? Array.isArray(k) ? k.map(function (i) {\n        return item[i];\n      }).join('_') : item[k] : !isNaN(index) ? \"\".concat(id, \"-\").concat(obj.key, \"-\").concat(index) : index;\n    },\n    //\n    // GET IMG SOURCE\n    getImageSource: function getImageSource(obj) {\n      // if exist get source from src otherwise join schema.base & value & schema.tail\n      return obj.schema.src ? obj.schema.src : \"\".concat(obj.schema.base).concat(obj.value).concat(obj.schema.tail);\n    },\n    //\n    // ICON\n    getIconValue: function getIconValue(obj) {\n      // icon: try schema.label or if undefined use value\n      return obj.schema.label ? obj.schema.label : this.setValue(obj);\n    },\n    //\n    // TOOLTIP\n    getShorthandTooltip: function getShorthandTooltip(schemaTooltip) {\n      // check if tooltip is typeof string ->  shorthand { bottom:true, label: obj.schema.tooltip} otherwise take original object\n      return isString(schemaTooltip) ? {\n        bottom: true,\n        label: schemaTooltip\n      } : schemaTooltip;\n    },\n    getShorthandTooltipLabel: function getShorthandTooltipLabel(schemaTooltip) {\n      // check if tooltip is typeof string ->  return Label\n      return isString(schemaTooltip) ? schemaTooltip : schemaTooltip && schemaTooltip.label;\n    },\n    //\n    // FORM SLOTS\n    getFormTopSlot: function getFormTopSlot() {\n      // Slot for Top Line in Formbase -> 'slot-formbase-top'\n      return \"\".concat(topSlotAppendix, \"-\").concat(this.id);\n    },\n    getFormBottomSlot: function getFormBottomSlot() {\n      // Slot for Bottom Line in Formbase -> 'slot-formbase-bottom'\n      return \"\".concat(bottomSlotAppendix, \"-\").concat(this.id);\n    },\n    //\n    // KEY SLOTS\n    getKeyInjectSlot: function getKeyInjectSlot(obj, inject) {\n      // get slot starting with 'slot-inject' and inject verb 'thumb-label'   -> 'slot-inject-thumb-label-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, \"\".concat(injectSlotAppendix, \"-\").concat(inject, \"-\").concat(keyClassAppendix));\n    },\n    getKeyTopSlot: function getKeyTopSlot(obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-top'  -> 'slot-top-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, \"\".concat(topSlotAppendix, \"-\").concat(keyClassAppendix));\n    },\n    getKeyItemSlot: function getKeyItemSlot(obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-item'  -> 'slot-item-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, \"\".concat(itemSlotAppendix, \"-\").concat(keyClassAppendix));\n    },\n    getKeyBottomSlot: function getKeyBottomSlot(obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-bottom'  -> 'slot-bottom-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, \"\".concat(bottomSlotAppendix, \"-\").concat(keyClassAppendix));\n    },\n    getKeyTooltipSlot: function getKeyTooltipSlot(obj) {\n      // matches Key specific Tooltip | name by replacing '.' with '-' and prepending 'slot-bottom'  -> 'slot-tooltip-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, \"\".concat(tooltipSlotAppendix, \"-\").concat(keyClassAppendix));\n    },\n    getTooltipSlot: function getTooltipSlot(obj) {\n      // default tooltip slot matches all keys\n      return \"\".concat(tooltipSlotAppendix);\n    },\n    //\n    // ARRAY SLOTS\n    getArrayTopSlot: function getArrayTopSlot(obj) {\n      // slot each item from array  -> 'slot-top-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, \"\".concat(topSlotAppendix, \"-\").concat(arrayClassAppendix));\n    },\n    getArrayItemSlot: function getArrayItemSlot(obj) {\n      // slot each item from array  -> 'slot-top-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, \"\".concat(itemSlotAppendix, \"-\").concat(arrayClassAppendix));\n    },\n    getArrayBottomSlot: function getArrayBottomSlot(obj) {\n      // slot each item from array   -> 'slot-bottom-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, \"\".concat(bottomSlotAppendix, \"-\").concat(arrayClassAppendix));\n    },\n    //\n    // TYPE SLOTS\n    getTypeTopSlot: function getTypeTopSlot(obj) {\n      // get Type specific slot name  -> 'slot-top-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, \"\".concat(topSlotAppendix, \"-\").concat(typeClassAppendix));\n    },\n    getTypeItemSlot: function getTypeItemSlot(obj) {\n      // get Type specific slot name  -> 'slot-item-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, \"\".concat(itemSlotAppendix, \"-\").concat(typeClassAppendix));\n    },\n    getTypeBottomSlot: function getTypeBottomSlot(obj) {\n      // get Type specific slot name  -> 'slot-bottom-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, \"\".concat(bottomSlotAppendix, \"-\").concat(typeClassAppendix));\n    },\n    //\n    // CLASS Names\n    getPropertyClassNameWithAppendix: function getPropertyClassNameWithAppendix(obj, appendix) {\n      // get PROP specific name by app-/prepending 'appendix-' and replacing '.' with '-' in nested key path  -> 'controls switch'\n      return obj.key ? obj.key.split(pathDelimiter).map(function (s) {\n        return \"\".concat(appendix ? appendix + classKeyDelimiter : '').concat(s);\n      }).join(' ') : '';\n    },\n    getPropertyClassName: function getPropertyClassName(obj) {\n      return this.getPropertyClassNameWithAppendix(obj, propertyClassAppendix);\n    },\n    getKeyClassNameWithAppendix: function getKeyClassNameWithAppendix(obj, appendix) {\n      // get KEY specific name by app-/prepending 'appendix-' and replacing '.' with '-' in nested key path  -> 'top-slot-address-city'\n      return \"\".concat(appendix ? appendix + classKeyDelimiter : '').concat(this.id ? this.id + classKeyDelimiter : '').concat(obj.key.replace(/\\./g, '-'));\n      // return `${appendix ? appendix + classKeyDelimiter : ''}${obj.key.replace(/\\./g, '-')}`\n    },\n    getKeyClassName: function getKeyClassName(obj) {\n      return this.getKeyClassNameWithAppendix(obj, keyClassAppendix);\n    },\n    getTypeClassNameWithAppendix: function getTypeClassNameWithAppendix(obj, appendix) {\n      // get TYPE specific class name by prepending '-type' -> 'type-checkbox'\n      return \"\".concat(appendix ? appendix + classKeyDelimiter : '').concat(this.id ? this.id + classKeyDelimiter : '').concat(obj.schema.type);\n      // return `${appendix + classKeyDelimiter}${obj.schema.type}`\n    },\n    getTypeClassName: function getTypeClassName(obj) {\n      return this.getTypeClassNameWithAppendix(obj, typeClassAppendix);\n    },\n    getClassName: function getClassName(obj) {\n      // combines all into a single classname\n      // class => ie. 'item type-checkbox key-address-zip prop-adress prop-zip'\n      return \"\".concat(itemClassAppendix, \" \").concat(this.getTypeClassName(obj), \" \").concat(this.getKeyClassName(obj), \" \").concat(this.getPropertyClassName(obj));\n    },\n    //\n    // GRID\n    gridMapper: function gridMapper(obj, prepender) {\n      if (obj) {\n        ['sm', 'md', 'lg', 'xl'].map(function (k) {\n          if (obj[k]) {\n            obj[prepender + k] = obj[k];\n            delete obj[k];\n          }\n        });\n      }\n    },\n    gridReplaceXS: function gridReplaceXS(obj, replacer) {\n      // see vuetify Grid - replace Prop XS -V1.5 with COLS, ORDER, OFFSET - V2.0\n      // xs must be replaced in new Vuetify 2.0 Grid with cols, offset, order\n      if (obj && obj.xs) {\n        obj[replacer] = obj.xs;\n        delete obj.xs;\n      }\n    },\n    getGridAttributes: function getGridAttributes(obj) {\n      // FLEX DEPRECATED use COL instead of FLEX\n      // flex:{ xs|sm|md|lg } - value:number|string\n\n      // col:{ cols|sm|md|lg|xl } - value:number|string\n      // order:{ order|sm|md|lg|xl|order-sm|order-md|order-lg|order-xl } - value:number|string\n      // offset:{ offset|sm|md|lg|xl|offset-sm|offset-md|offset-lg|offset-xl } - value:number|string\n\n      var colSchema = obj.schema.col || obj.schema.flex;\n      var colAttr = this.col || this.flex || colDefault;\n      var colObject = colSchema\n      // if available use schema definition of cols\n      ? isPlainObject(colSchema) ? colSchema : isNumber(colSchema) || isString(colSchema) ? {\n        cols: colSchema\n      } : {\n        cols: 'auto'\n      }\n      // else use formbase attribute definition of cols\n      : colAttr ? isPlainObject(colAttr) ? colAttr : isNumber(colAttr) || isString(colAttr) ? {\n        cols: colAttr\n      } : {\n        cols: 'auto'\n      }\n      // if no definition set cols to 'auto'\n      : {\n        cols: 'auto'\n      };\n      this.gridReplaceXS(colObject, 'cols');\n\n      // schema definition of offset\n      var offset = obj.schema.offset;\n      var offsetObject = offset ? isPlainObject(offset) ? offset : {\n        offset: offset\n      } : offset;\n      this.gridMapper(offsetObject, 'offset-');\n      this.gridReplaceXS(offsetObject, 'offset');\n\n      // schema definition of offset\n      var order = obj.schema.order;\n      var orderObject = order ? isPlainObject(order) ? order : {\n        order: order\n      } : order;\n      this.gridMapper(orderObject, 'order-');\n      this.gridReplaceXS(orderObject, 'order');\n      return _objectSpread(_objectSpread(_objectSpread({}, colObject), offsetObject), orderObject);\n    },\n    getRowGroupOrArray: function getRowGroupOrArray(obj) {\n      return obj.schema.row || this.row || rowDefault;\n    },\n    getColGroupOrArray: function getColGroupOrArray(obj) {\n      return obj.schema.col || this.col || colDefault;\n    },\n    //\n    // SANITIZE SLOTS\n    getInjectedScopedSlots: function getInjectedScopedSlots(id, obj) {\n      // <template #slot-inject-thumb-label-key-formbase-path-to-mykey />\n      // extract the verb 'thumb-label' from Slots starting with 'slot-inject' and matching [component-id] and [key]\n      var rx = new RegExp(\"\".concat(injectSlotAppendix, \"-(.*?)-\").concat(keyClassAppendix));\n      return Object.keys(this.$slots).filter(function (s) {\n        return s.includes(\"\".concat(id).concat(classKeyDelimiter).concat(obj.key.replace(/\\./g, '-'))) && s.includes(injectSlotAppendix);\n      }).map(function (i) {\n        return i.match(rx)[1];\n      });\n    },\n    //\n    // Map Values coming FROM Control, TO Control or DROP on Control\n    toCtrl: function toCtrl(params) {\n      // signature params { value, obj, data, schema }\n      //\n      // manipulate value going to control, function must return a (modified) value\n      // schema:{ name: { type:'text', toCtrl: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      // return isFunction(params.obj.schema && params.obj.schema.toCtrl) ? params.obj.schema.toCtrl(params) : params.value\n      return params.obj.schema && isFunction(params.obj.schema.toCtrl) ? params.obj.schema.toCtrl(params) : params.value;\n    },\n    fromCtrl: function fromCtrl(params) {\n      // signature params { value, obj, data, schema }\n      //\n      // manipulate updated value from control, function must return a (modified) value\n      // schema:{ name: { type:'text', fromCtrl: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      return params.obj.schema && isFunction(params.obj.schema.fromCtrl) ? params.obj.schema.fromCtrl(params) : params.value;\n    },\n    dropCtrl: function dropCtrl(params) {\n      // signature params { value, obj, dragObject, dragEvent, event,data, schema }\n      //\n      // manipulate dropped value from control, function must return a (modified) value\n      // schema:{ name: { type:'text', drop: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      return params.obj.schema && isFunction(params.obj.schema.drop) ? params.obj.schema.drop(params) : params.value;\n    },\n    //\n    // Drag / Drop / DropValue\n    dragstart: function dragstart(event, obj) {\n      if (!obj.schema.drag) return;\n      event.dataTransfer.dropEffect = dropEffect;\n      event.dataTransfer.effectAllowed = dropEffect;\n      var dragEvent = this.onEvent(event, obj);\n      event.dataTransfer.setData('text', JSON.stringify(dragEvent));\n    },\n    dragover: function dragover(event, obj) {\n      return obj.schema.drop ? event.preventDefault() : null;\n    },\n    drop: function drop(event, obj) {\n      if (!obj.schema.drop) return event.preventDefault();\n      // get dragEvent and dragEvent.obj\n      obj.dragEvent = JSON.parse(event.dataTransfer.getData('text'));\n\n      // no drop on drag object\n      if (obj.key === obj.dragEvent.obj.key && obj.id === obj.dragEvent.id) return event.preventDefault();\n      // handle schema.drop function\n      if (isFunction(obj.schema.drop)) obj.value = this.dropValue(obj, event);\n      this.onEvent(event, obj);\n      event.preventDefault();\n    },\n    dropValue: function dropValue(obj, event) {\n      return this.dropCtrl({\n        value: obj.dragEvent.value,\n        obj: obj,\n        event: event,\n        data: this.storeStateData,\n        schema: this.storeStateSchema\n      });\n    },\n    //\n    // Set Value\n    setValue: function setValue(obj, type) {\n      // Use 'schema.toCtrl' Function for setting a modified Value\n      // __log(\n      //     obj.schema.name,\n      //     this.storeStateData,\n      //     // obj.value\n      // )\n      return obj.schema.type === 'wrap' ? this.toCtrl({\n        value: this.storeStateData,\n        obj: obj,\n        data: this.storeStateData,\n        schema: this.storeStateSchema\n      }) : this.toCtrl({\n        value: obj.value,\n        obj: obj,\n        data: this.storeStateData,\n        schema: this.storeStateSchema\n      });\n    },\n    //\n    // EVENTS Get Value from Input & other Events\n    onInput: function onInput(value, obj) {\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'input';\n      // Value after change in Control\n      value = this.fromCtrl({\n        value: value,\n        obj: obj,\n        data: this.storeStateData,\n        schema: this.storeStateSchema\n      });\n      // harmonize undefined or empty strings => null, because 'clearable' in vuetify controls resets to null and not to empty string!\n      value = !value || value === '' ? null : value;\n      // if schema type is number convert to number\n      value = obj.schema.type === 'number' ? Number(value) : value;\n      // update deep nested prop(key) with value\n      this.setObjectByPath(this.storeStateData, obj.key, value);\n      var emitObj = {\n        on: type,\n        id: this.id,\n        index: this.index,\n        params: {\n          index: this.index,\n          lastValue: obj.value\n        },\n        key: obj.key,\n        value: value,\n        obj: obj,\n        data: this.storeStateData,\n        schema: this.storeStateSchema,\n        parent: this.parent\n      };\n      this.emitValue(type, emitObj);\n      return emitObj;\n    },\n    onEvent: function onEvent() {\n      var _this = this;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var obj = arguments.length > 1 ? arguments[1] : undefined;\n      var tag = arguments.length > 2 ? arguments[2] : undefined;\n      var text = event && event.srcElement && event.srcElement.innerText;\n      var model = obj.schema.model;\n      var open = obj.schema.open;\n      var index = this.index;\n      // avoid circular JSON in dragstart\n      var parent = event.type !== 'dragstart' ? this.parent : undefined;\n      var emitObj = {\n        on: event.type,\n        id: this.id,\n        index: index,\n        params: {\n          text: text,\n          tag: tag,\n          model: model,\n          open: open,\n          index: index\n        },\n        key: obj.key,\n        value: obj.value,\n        obj: obj,\n        event: event,\n        data: this.storeStateData,\n        schema: this.storeStateSchema,\n        parent: parent\n      };\n      delay(function () {\n        _this.emitValue(event.type, emitObj), onEventDelay;\n      });\n      return emitObj;\n    },\n    onClickOutside: function onClickOutside(event, obj) {\n      if (!obj.schema || !obj.schema.clickOutside) return;\n      if (isFunction(obj.schema.clickOutside)) return obj.schema.clickOutside(obj, event);\n      this.emitValue('clickOutside', {\n        on: 'clickOutside',\n        id: this.id,\n        key: obj.key,\n        value: obj.value,\n        obj: obj,\n        params: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        event: event,\n        data: this.storeStateData,\n        schema: this.storeStateSchema\n      });\n    },\n    onIntersect: function onIntersect(isIntersecting, entries, observer, obj) {\n      //   const isIntersecting = entries[0].isIntersecting\n      var index = this.index;\n      this.emitValue('intersect', {\n        on: 'intersect',\n        id: this.id,\n        index: index,\n        key: obj.key,\n        value: obj.value,\n        obj: obj,\n        params: {\n          isIntersecting: isIntersecting,\n          entries: entries,\n          observer: observer\n        },\n        data: this.storeStateData,\n        schema: this.storeStateSchema\n      });\n    },\n    onSwipe: function onSwipe(tag, obj) {\n      this.emitValue('swipe', {\n        on: 'swipe',\n        id: this.id,\n        key: obj.key,\n        value: obj.value,\n        obj: obj,\n        params: {\n          tag: tag\n        },\n        data: this.storeStateData,\n        schema: this.storeStateSchema\n      });\n    },\n    onResize: function onResize(event) {\n      this.emitValue('resize', {\n        on: 'resize',\n        id: this.id,\n        params: {\n          x: window.innerWidth,\n          y: window.innerHeight\n        },\n        event: event,\n        data: this.storeStateData,\n        schema: this.storeStateSchema\n      });\n    },\n    //\n    // EMIT EVENT\n    emitValue: function emitValue(event, val) {\n      var emitEvent = change.includes(event) ? 'change' : watch.includes(event) ? 'watch' : mouse.includes(event) ? 'mouse' : display.includes(event) ? 'display' : event;\n      if (this.$attrs[\"\".concat(emitEvent, \":\").concat(this.id)]) {\n        this.deprecateEventCustomID(emitEvent);\n        this.deprecateCombinedEvents(emitEvent, event);\n        this.$emit(\"\".concat(emitEvent, \":\").concat(this.id), val); // listen to specific event only\n      } else if (this.$attrs[\"\".concat(emitEvent)]) {\n        this.deprecateCombinedEvents(emitEvent, event);\n        this.$emit(emitEvent, val); // listen to specific event only\n      } else if (this.$attrs[\"\".concat(event, \":\").concat(this.id)]) {\n        this.deprecateEventCustomID(event);\n        this.$emit(\"\".concat(event, \":\").concat(this.id), val); // listen to specific event only\n      } else if (this.$attrs[\"\".concat(event)]) {\n        this.$emit(event, val); // listen to specific event only\n      }\n    },\n    deprecateEventCustomID: function deprecateEventCustomID(ev) {\n      console.warn(\"--- DEPRECATION \".concat(ev, \":\").concat(this.id, \": ----------------------------------------------------------------------------\"));\n      console.warn(\"<v-form-base  @\".concat(ev, \":\").concat(this.id, \"=\\\"handler\\\" /> is deprecated use simplified version <v-form-base  @\").concat(ev, \"=\\\"handler\\\" />\"));\n      console.warn('---------------------------------------------------------------------------------------------');\n    },\n    deprecateCombinedEvents: function deprecateCombinedEvents(emitEvent, event) {\n      if (emitEvent !== event) {\n        console.warn('--- DEPRECATION Combined Listener:  --------------------------------------------------------------------------');\n        console.warn(\"Combined Event-Listener '\".concat(emitEvent, \"' have been removed for better comprehensibility and simplification\"));\n        console.warn('Please use separate listener for each event like <v-form-base  @focus=\"handler\" @input=\"handler\" @blur=\"handler\"/>');\n        console.warn('---------------------------------------------------------------------------------------------');\n      }\n    },\n    //\n    // PREPARE ARRAYS DATA & SCHEMA\n    setObjectByPath: function setObjectByPath(object, path, value) {\n      // resolves chained keys (like 'user.address.street') on an object and set the value\n      var pathArray = path.split(pathDelimiter);\n      pathArray.forEach(function (p, ix) {\n        if (ix === pathArray.length - 1) object[p] = value;\n        object = object[p];\n      });\n    },\n    updateArrayFromState: function updateArrayFromState(data, schema) {\n      this.flatCombinedArray.forEach(function (obj) {\n        obj.value = get(data, obj.key, null); // get - lodash\n        obj.schema = get(schema, obj.key, null); // get - lodash\n      });\n    },\n    sanitizeShorthandType: function sanitizeShorthandType(key, schema) {\n      // if key in schema is string only, then handle shorthand definition\n      // schema:{ name:'text' }  => schema:{ name: { type:'text', label: 'name' }\n      return isString(schema) ? {\n        type: schema,\n        label: key\n      } : schema;\n    },\n    flattenObjects: function flattenObjects() {\n      var _this2 = this;\n      var dat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var sch = arguments.length > 1 ? arguments[1] : undefined;\n      var data = {};\n      var schema = {};\n      // Organize Formular using Schema not Data\n      Object.keys(sch).forEach(function (key) {\n        // convert string definition of name:'text' into object name:{type:'text'}\n        sch[key] = _this2.sanitizeShorthandType(key, sch[key]);\n        var bothArray = Array.isArray(dat[key]) && Array.isArray(sch[key]);\n        var datObjectWithoutSchemaType = isPlainObject(dat[key]) && !sch[key].type;\n        var datObjectContainsTypeKey = dat[key] && dat[key].type && sch[key] && sch[key].type;\n        var notInstanceOfFileObject = !(dat[key] instanceof File);\n        if (bothArray || datObjectWithoutSchemaType || datObjectContainsTypeKey && notInstanceOfFileObject) {\n          var _this2$flattenObjects = _this2.flattenObjects(dat[key], sch[key]),\n            flatData = _this2$flattenObjects.data,\n            flatSchema = _this2$flattenObjects.schema;\n          Object.keys(flatData).forEach(function (ii) {\n            data[key + pathDelimiter + ii] = flatData[ii];\n            schema[key + pathDelimiter + ii] = flatSchema[ii];\n          });\n        } else {\n          data[key] = dat[key];\n          schema[key] = sch[key];\n        }\n      });\n      return {\n        data: data,\n        schema: schema\n      };\n    },\n    combineObjectsToArray: function combineObjectsToArray(_ref) {\n      var data = _ref.data,\n        schema = _ref.schema;\n      var arr = [];\n      Object.keys(schema).forEach(function (key) {\n        if (!isPlainObject(schema[key])) {\n          console.warn(\"Schema '\".concat(JSON.stringify(schema), \"' of Prop '\").concat(key, \"' must be a string with value of type key:'text' or a plainobject with at least key:{ type:'text'} definition.  Prop '\").concat(key, \"' will be ignored!\"));\n          return;\n        }\n        arr.push({\n          key: key,\n          value: data[key],\n          schema: schema[key]\n        });\n      });\n      return arr;\n    },\n    flattenAndCombineToArray: function flattenAndCombineToArray(data, schema) {\n      // flatten nested structure of both objects 'data' & 'schema' ...\n      var flattenedObjects = this.flattenObjects(data, schema);\n      // ... and combine them to an array\n      return this.combineObjectsToArray(flattenedObjects);\n    },\n    autogenerateSchema: function autogenerateSchema(value) {\n      var _this3 = this;\n      // generate a minimal default schema from value\n      var schema = JSON.stringify(value, function (key, val) {\n        return val === undefined ? null : val;\n      });\n      schema = JSON.parse(schema, function (key, val) {\n        if (val === null || val === undefined) return defaultSchemaIfValueIsNullOrUndefined(key);\n        if (typeof val === 'string') return defaultSchemaIfValueIsString(key);\n        if (typeof val === 'number') return defaultSchemaIfValueIsNumber(key);\n        if (typeof val === 'boolean') return defaultSchemaIfValueIsBoolean(key);\n        return val;\n      });\n      // assign root props to avoid manipulating prop: schema\n      Object.keys(schema).forEach(function (key) {\n        return _this3.schema[key] = schema[key];\n      });\n    },\n    tryAutogenerateModelStructure: function tryAutogenerateModelStructure(model, schema) {\n      var _this4 = this;\n      // generate or complete an empty model based on schema structure\n\n      Object.keys(schema).forEach(function (key) {\n        // model must be at least an empty Object. It doesn't work with 'null', 'undefined' or any 'primitive value'\n        // Autogeneration from Schema works only if model is an empty Object\n        // if model is NOT an empty Object, no action is applied, otherwise data in model could be changed or modified\n        if (!isEmpty(model[key])) return;\n        var val = schema[key];\n        if (val.type === 'group') {\n          model[key] = {};\n          _this4.tryAutogenerateModelStructure(model[key], val.schema);\n        } else if (val.type === 'array') {\n          model[key] = {};\n          _this4.tryAutogenerateModelStructure(model[key], val.schema);\n        } else if (val.type === 'list') {\n          model[key] = {};\n        } else if (isPlainObject(val) && !val.type) {\n          model[key] = {};\n          _this4.tryAutogenerateModelStructure(model[key], val);\n        }\n        if (Array.isArray(val) && !val.type) {\n          model[key] = {};\n          _this4.tryAutogenerateModelStructure(model[key], val);\n        }\n      });\n    },\n    rebuildArrays: function rebuildArrays(model, schema) {\n      // undefined, null or primitive value for model can't work because you need reference to object for working on\n      if (!model) throw 'Property \\'model\\' is null or undefined. Use \\'<v-form-base :model=\"myModel\" :schema=\"mySchema\" />\\'. myModel must be at least an empty Object.';\n\n      // noise if async loading\n      if (isEmpty(schema) && isEmpty(model)) {\n        console.warn('At least one of the properties \\'model\\' or \\'schema\\' in <v-form-base /> must be at least an empty Object. Ignore this Warning on async loading \\'model\\' or \\'schema\\' ');\n        // return\n      }\n      // generate/complete structure of model\n      this.tryAutogenerateModelStructure(model, schema);\n\n      // no schema defined or empty -> autogenerate basic schema\n      if (isEmpty(schema)) this.autogenerateSchema(model);\n\n      // create flatted working array from schema and value\n      this.flatCombinedArray = this.flattenAndCombineToArray(this.storeStateData, this.storeStateSchema);\n    } //\n  },\n  created: function created() {\n    this.rebuildArrays(this.valueIntern, this.schema);\n  }\n};","map":{"version":3,"names":["get","isPlainObject","isFunction","isString","isNumber","isEmpty","orderBy","delay","typeToComponent","text","password","email","tel","url","search","number","date","time","color","img","textarea","range","file","checkbox","card","orderDirection","pathDelimiter","classKeyDelimiter","defaultID","isPicker","onEventDelay","mouse","change","watch","display","topAppendix","bottomAppendix","slotAppendix","tooltipAppendix","injectAppendix","itemClassAppendix","typeClassAppendix","keyClassAppendix","arrayClassAppendix","propertyClassAppendix","injectSlotAppendix","concat","arraySlotAppendix","topSlotAppendix","itemSlotAppendix","bottomSlotAppendix","tooltipSlotAppendix","clear","button","treeview","list","focus","blur","append","appendOuter","prepend","prependInner","hour","minute","second","dropEffect","rowDefault","noGutters","colDefault","cols","defaultSchemaIfValueIsNullOrUndefined","key","type","label","defaultSchemaIfValueIsString","defaultSchemaIfValueIsNumber","defaultSchemaIfValueIsBoolean","defaultPickerSchemaText","readonly","defaultPickerSchemaMenu","closeOnContentClick","transition","nudgeRight","maxWidth","minWidth","defaultInternGroupType","name","props","id","String","rootId","row","Object","col","Number","flex","modelValue","Array","_default","model","schema","data","flatCombinedArray","computed","valueIntern","updateArrayFromState","parent","p","$parent","startsWith","index","m","match","map","getRow","flatCombinedArraySorted","storeStateData","storeStateSchema","newSchema","rebuildArrays","methods","mapTypeToComponent","__log","$app","isDateTimeColorTypeAndExtensionText","obj","includes","ext","isDateTimeColorExtension","bindOptions","b","value","bindSchemaText","_objectSpread","bindSchemaMenu","menu","bindSchema","suspendClickAppend","test","searchInputSync","searchInput","checkExtensionType","checkInternType","typeInt","checkInternGroupType","getKeyForArray","item","k","isArray","i","join","isNaN","getImageSource","src","base","tail","getIconValue","setValue","getShorthandTooltip","schemaTooltip","bottom","getShorthandTooltipLabel","getFormTopSlot","getFormBottomSlot","getKeyInjectSlot","inject","getKeyClassNameWithAppendix","getKeyTopSlot","getKeyItemSlot","getKeyBottomSlot","getKeyTooltipSlot","getTooltipSlot","getArrayTopSlot","getArrayItemSlot","getArrayBottomSlot","getTypeTopSlot","getTypeClassNameWithAppendix","getTypeItemSlot","getTypeBottomSlot","getPropertyClassNameWithAppendix","appendix","split","s","getPropertyClassName","replace","getKeyClassName","getTypeClassName","getClassName","gridMapper","prepender","gridReplaceXS","replacer","xs","getGridAttributes","colSchema","colAttr","colObject","offset","offsetObject","order","orderObject","getRowGroupOrArray","getColGroupOrArray","getInjectedScopedSlots","rx","RegExp","keys","$slots","filter","toCtrl","params","fromCtrl","dropCtrl","drop","dragstart","event","drag","dataTransfer","effectAllowed","dragEvent","onEvent","setData","JSON","stringify","dragover","preventDefault","parse","getData","dropValue","onInput","arguments","length","undefined","setObjectByPath","emitObj","on","lastValue","emitValue","_this","tag","srcElement","innerText","open","onClickOutside","clickOutside","x","clientX","y","clientY","onIntersect","isIntersecting","entries","observer","onSwipe","onResize","window","innerWidth","innerHeight","val","emitEvent","$attrs","deprecateEventCustomID","deprecateCombinedEvents","$emit","ev","console","warn","object","path","pathArray","forEach","ix","sanitizeShorthandType","flattenObjects","_this2","dat","sch","bothArray","datObjectWithoutSchemaType","datObjectContainsTypeKey","notInstanceOfFileObject","File","_this2$flattenObjects","flatData","flatSchema","ii","combineObjectsToArray","_ref","arr","push","flattenAndCombineToArray","flattenedObjects","autogenerateSchema","_this3","tryAutogenerateModelStructure","_this4","created"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/others/CustomFormBase.vue"],"sourcesContent":["<template>\n  <v-row\n    :id=\"id\"\n    v-bind=\"getRow\"\n    v-resize.quiet=\"onResize\"\n  >\n    <!-- FORM-BASE TOP SLOT -->\n    <slot :name=\"getFormTopSlot()\" :id= \"id\"/>\n    <!-- main loop over components/controls -->\n    <template v-for=\"(obj, index) in flatCombinedArraySorted\" :key=\"index\">\n      <!-- Tooltip Wrapper -->\n      <v-tooltip\n        :disabled=\"!obj.schema.tooltip\"\n        v-bind=\"getShorthandTooltip(obj.schema.tooltip)\"\n      >\n        <template v-slot:activator=\"{ props }\">\n          <v-col\n            v-show=\"!obj.schema.hidden\"\n            :key=\"index\"\n            v-bind= \"{\n              ...getGridAttributes(obj),\n              ...props\n            }\"\n            v-intersect= \"(isIntersecting, entries, observer) => onIntersect(isIntersecting, entries, observer, obj)\"\n            v-touch= \"{ left: () => onSwipe('left', obj), right: () => onSwipe('right', obj), up: () => onSwipe('up', obj), down: () => onSwipe('down', obj) }\"\n            v-click-outside= \"(event) => onClickOutside(event, obj)\"\n            :class =\"getClassName(obj)\"\n            :draggable =\"obj.schema.drag\"\n            @mouseenter =\"onEvent($event, obj)\"\n            @mouseleave =\"onEvent($event, obj)\"\n\n            @dragstart=\"dragstart($event, obj)\"\n            @dragover=\"dragover($event, obj)\"\n            @drop=\"drop($event, obj)\"\n\n          >\n            <!-- slot on top of type  -> <div slot=\"slot-bottom-type-[propertyName]\"> -->\n            <slot :name=\"getTypeTopSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n            <!-- slot on top of key  -> <v-btn slot=\"slot-bottom-key-[propertyName]\"> -->\n            <slot :name=\"getKeyTopSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n            <!-- slot replaces complete item of defined TYPE -> <v-btn slot=\"slot-item-type-[propertyName]\">-->\n            <slot :name=\"getTypeItemSlot(obj)\" v-bind= \"{ obj, index, id }\">\n              <!-- slot replaces complete item of defined KEY -> <div slot=\"slot-item-key-[propertyName]\">-->\n              <slot :name=\"getKeyItemSlot(obj)\" v-bind= \"{ obj, index, id }\">\n\n                  <!-- <div class=\"caption\">\n                    OBJ:{{obj}}\n                    <br>\n                    FORM:{{getFormTopSlot()}}\n                    <br>\n                    INJECT:{{getKeyInjectSlot(obj)}}\n                    <br>\n                    ARRAY:{{getArrayItemSlot(obj)}}\n                    <br>\n                    TYPE:{{getTypeItemSlot(obj)}}\n                    <br>\n                    KEY:{{getKeyItemSlot(obj)}}\n                    <br>\n                    CLASS:{{getClassName(obj)}}\n                    <br>\n                    Slots: {{getInjectedScopedSlots(id, obj)}}\n                    <br>\n                    VAL:{{setValue(obj)}}\n                  </div> -->\n\n              <!-- RADIO -->\n                <v-radio-group\n                  v-if=\"obj.schema.type === 'radio'\"\n                  v-bind=\"bindSchema(obj)\"\n                  :value=\"setValue(obj)\"\n                  @change=\"onInput($event, obj)\"\n                >\n                  <v-radio\n                    v-for=\"(option, idx) in obj.schema.options\"\n                    :key=\"idx\"\n                    v-bind=\"bindOptions(option)\"\n                  >\n                    <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                    <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name= \"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index, idx, option }\"/></template>\n                  </v-radio>\n                </v-radio-group>\n              <!-- END RADIO -->\n\n              <!-- DATE, TIME, COLOR TEXT-MENU -->\n                <v-menu\n                  v-else-if=\"isDateTimeColorTypeAndExtensionText(obj)\"\n                  v-bind=\"bindSchemaMenu(obj)\"\n                >\n                  <template v-slot:activator=\"{ props }\">\n                    <v-text-field\n                      v-bind= \"{\n                        ...bindSchemaText(obj),\n                        ...props\n                      }\"\n                      :value=\"setValue(obj)\"\n                      @[suspendClickAppend(obj)]=\"onEvent($event, obj, append)\"\n                      @click:append-outer=\"onEvent($event, obj, appendOuter)\"\n                      @click:prepend=\"onEvent($event, obj, prepend)\"\n                      @click:prepend-inner=\"onEvent($event, obj, prependInner)\"\n                    />\n                    <!-- SLOTS append|prepend|message for picker not avilable, try custom component -->\n                  </template>\n                  <component\n                    :is=\"mapTypeToComponent( obj.schema.type )\"\n                    v-bind=\"bindSchema(obj)\"\n                    :type=\"checkInternType(obj)\"\n                    :value=\"setValue(obj)\"\n                    @update:model-value=\"onInput($event, obj)\"\n                    @click:hour=\"onEvent({type:'click'}, obj, hour)\"\n                    @click:minute=\"onEvent({type:'click'}, obj, minute)\"\n                    @click:second=\"onEvent({type:'click'}, obj, second)\"\n                  />\n                </v-menu>\n              <!-- END DATE, TIME, COLOR TEXT-MENU -->\n\n              <!-- ARRAY -->\n                <template\n                  v-else-if=\"obj.schema.type === 'array'\"\n                >\n                  <div\n                    v-for=\"(item, idx) in setValue(obj)\"\n                    :key=\"getKeyForArray(id, obj, item, idx)\"\n                    v-bind=\"bindSchema(obj)\"\n                    :value=\"setValue(obj)\"\n                  >\n                    <slot :name=\"getArrayTopSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\"/>\n                    <slot :name=\"getArrayItemSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\">\n                      <v-custom-form-base\n                        :id=\"`${id}-${obj.key}-${idx}`\"\n                        :model=\"item\"\n                        :schema=\"obj.schema.schema\"\n                        :row=\"getRowGroupOrArray(obj)\"\n                        :col=\"getColGroupOrArray(obj)\"\n                        :class=\"`${id}-${obj.key}`\"\n\n                        v-bind=\"$attrs\"\n                      >\n                        <!-- Based on https://gist.github.com/loilo/73c55ed04917ecf5d682ec70a2a1b8e2 -->\n                        <template v-for=\"(_, name) in $slots\" #[name]=\"slotData\"><slot :name=\"name\" v-bind= \"{ id, obj, index, idx, item, ...slotData}\" /></template>\n                      </v-custom-form-base>\n                    </slot>\n                    <slot :name=\"getArrayBottomSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\"/>\n                  </div>\n                </template>\n              <!-- END ARRAY -->\n\n              <!-- GROUP | WRAP-->\n                <template v-else-if=\"/(wrap|group)/.test(obj.schema.type)\">\n                  <component\n                    :is=\"checkInternGroupType(obj)\"\n                    v-bind=\"bindSchema(obj)\"\n                    @click=\"onEvent($event, obj)\"\n                  >\n                    <v-card-title v-if=\"obj.schema.title\">{{obj.schema.title}}</v-card-title>\n                    <v-card-subtitle v-if=\"obj.schema.subtitle\">{{obj.schema.subtitle}}</v-card-subtitle>\n\n                    <v-form-base\n                      :id=\"`${id}-${obj.key}`\"\n                      :model=\"setValue(obj)\"\n                      :schema=\"obj.schema.schema\"\n                      :row=\"getRowGroupOrArray(obj)\"\n                      :col=\"getColGroupOrArray(obj)\"\n                      :class=\"`${id}-${obj.key}`\"\n                      v-bind=\"$attrs\"\n                    >\n                      <!-- Based on https://gist.github.com/loilo/73c55ed04917ecf5d682ec70a2a1b8e2 -->\n                      <template v-for=\"(_, name) in $slots\" #[name]=\"slotData\"><slot :name=\"name\" v-bind= \"{ id, obj, index,  ...slotData}\" /></template>\n\n                    </v-form-base>\n                  </component>\n                </template>\n              <!-- END GROUP | WRAP -->\n\n              <!-- TREEVIEW -->\n                <component\n                  v-else-if=\"obj.schema.type === treeview\"\n                  v-bind:is=\"v-treeview\"\n\n                  v-model:open=\"obj.schema.open\"\n                  v-bind=\"bindSchema(obj)\"\n                  @update:open=\"onEvent({type:'click'}, obj, 'open' )\"\n                  @update:active=\"onEvent({type:'click'}, obj, 'selected' )\"\n\n                  :items=\"obj.schema.items\"\n                  :value=\"setValue(obj)\"\n                  @update:model-value= \"onInput($event, obj)\"\n                >\n                  <!-- works with #[s]=\"slotData\" \" -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]=\"slotData\"><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index,  ...slotData}\" /></template>\n                </component>\n\n              <!-- END TREEVIEW -->\n\n              <!-- LIST -->\n                <template\n                  v-else-if=\"obj.schema.type === list\"\n                >\n                  <v-list>\n                    <slot :name=\"getKeyInjectSlot(obj, 'label')\" v-bind= \"{ id, obj, index }\" >\n                      <v-toolbar\n                        v-if=\"obj.schema.label\"\n                        v-bind=\"bindSchema(obj)\"\n                        dark\n                      >\n                        <v-toolbar-title>{{ obj.schema.label }}</v-toolbar-title>\n                      </v-toolbar>\n                    </slot>\n                    <v-list\n                      v-model=\"obj.schema.model\"\n                      v-bind=\"bindSchema(obj)\"\n                      light\n                    >\n                      <template v-for=\"(item, idx) in setValue(obj)\" :key=\"idx\">\n                        <v-list-item\n\n                          @click=\"onEvent($event, obj, list )\"\n                        >\n                        <slot :name=\"getArrayItemSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\">\n                              <v-list-item\n                                  :icon=\"obj.schema.icon\"\n                                  :title=\"obj.schema.item ? item[obj.schema.item] : item\"\n                                  >\n\n                              </v-list-item>\n                            <!-- <v-list-item-icon>\n                              <v-icon v-text=\"obj.schema.icon\" />\n                            </v-list-item-icon>\n                            <v-list-item-content>\n                              <v-list-item-title v-text=\"obj.schema.item ? item[obj.schema.item] : item\" />\n                            </v-list-item-content> -->\n                        </slot>\n                        </v-list-item>\n                      </template>\n                    </v-list>\n                  </v-list>\n                </template>\n              <!-- END LIST -->\n\n              <!-- CHECKBOX | SWITCH -->\n                <component\n                  v-else-if=\"/(switch|checkbox)/.test(obj.schema.type)\"\n                  :is=\"mapTypeToComponent(obj.schema.type)\"\n                  :model-value=\"setValue(obj)\"\n                  v-bind=\"bindSchema(obj)\"\n                  @change=\"onInput($event, obj)\"\n                >\n                  <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                </component>\n              <!-- END CHECKBOX | SWITCH -->\n\n              <!-- FILE -->\n                <v-file-input\n                  v-else-if=\"obj.schema.type === 'file' \"\n                  v-bind=\"bindSchema(obj)\"\n                  :value=\"setValue(obj)\"\n                  @focus=\"onEvent($event, obj)\"\n                  @blur=\"onEvent($event, obj)\"\n                  @change=\"onInput($event, obj)\"\n                >\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]=\"scopeData\"><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index, ...scopeData}\" /></template>\n                </v-file-input>\n              <!-- END FILE -->\n\n              <!-- ICON -->\n                <v-icon\n                  v-else-if=\"obj.schema.type === 'icon'\"\n                  v-bind=\"bindSchema(obj)\"\n                  v-text=\"getIconValue(obj)\"\n                  @click=\"onEvent($event, obj)\"\n                />\n              <!-- END ICON -->\n\n              <!-- SLIDER -->\n                <v-slider\n                  v-else-if=\"obj.schema.type === 'slider'\"\n                  v-bind=\"bindSchema(obj)\"\n                  @update:model-value=\"onInput($event, obj)\"\n                >\n                  <!-- some component works with #[s]=\"slotData\"  some doesn't work with slot data ie: 'label'  / but 'thumb-label' works only with scopeData -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\" /></template>\n                  <!-- <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]=\"scopeData\"><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index, ...scopeData}\" /></template> -->\n                </v-slider>\n              <!-- END SLIDER -->\n\n              <!-- IMG -->\n                <v-img\n                  v-else-if=\"obj.schema.type === 'img'\"\n                  :src=\"getImageSource(obj)\"\n                  v-bind=\"bindSchema(obj)\"\n                  @click=\"onEvent($event, obj)\"\n                >\n                  <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                </v-img>\n              <!-- END IMG -->\n\n              <!-- BTN-TOGGLE -->\n                <v-btn-toggle\n                  v-else-if=\"obj.schema.type === 'btn-toggle'\"\n                  v-bind=\"bindSchema(obj)\"\n                  :model-value=\"setValue(obj)\"\n                  @change=\"onInput($event, obj)\"\n                >\n                  <v-btn\n                    v-for=\"(option,idx) in obj.schema.options\"\n                    :key=\"idx\"\n                    v-bind=\"bindOptions(option)\"\n                    :icon=\"option.icon ? true :false\"\n                  >\n                    <v-icon :dark=\"obj.schema.dark\">\n                      {{ bindOptions(option).icon }}\n                    </v-icon>\n                    {{ bindOptions(option).label }}\n                  </v-btn>\n                </v-btn-toggle>\n              <!-- END BTN-TOGGLE -->\n\n              <!-- BTN -->\n                <v-btn\n                  v-else-if=\"obj.schema.type === 'btn'\"\n                  v-bind=\"bindSchema(obj)\"\n                  @click=\"onEvent($event, obj, button)\"\n                >\n                  <v-icon\n                    v-if=\"obj.schema.iconLeft\"\n                    left\n                    :dark=\"obj.schema.dark\"\n                  >\n                    {{ obj.schema.iconLeft }}\n                  </v-icon>\n                  {{ setValue(obj) }}\n                  <v-icon\n                    v-if=\"obj.schema.iconCenter\"\n                    :dark=\"obj.schema.dark\"\n                  >\n                    {{ obj.schema.iconCenter }}\n                  </v-icon>\n                  {{ obj.schema.label }}\n                  <v-icon\n                    v-if=\"obj.schema.iconRight\"\n                    right\n                    :dark=\"obj.schema.dark\"\n                  >\n                    {{ obj.schema.iconRight }}\n                  </v-icon>\n                </v-btn>\n              <!-- END BTN -->\n\n              <!-- MASK  -->\n                <component\n                  :is=\"mapTypeToComponent(obj.schema.type)\"\n                  v-else-if=\"obj.schema.mask\"\n                  v-bind=\"bindSchema(obj)\"\n                  v-mask=\"obj.schema.mask\"\n                  :type=\"checkExtensionType(obj)\"\n                  :model-value=\"setValue(obj)\"\n                  :obj=\"obj\"\n                  v-model:[searchInputSync(obj)]=\"obj.schema.searchInput\"\n                  @focus= \"onEvent($event, obj)\"\n                  @blur= \"onEvent($event, obj)\"\n                  @[suspendClickAppend(obj)]=\"onEvent($event, obj, append)\"\n                  @click:append-outer=\"onEvent($event, obj, appendOuter)\"\n                  @click:prepend=\"onEvent($event, obj, prepend )\"\n                  @click:prepend-inner=\"onEvent($event, obj, prependInner)\"\n                  @click:clear=\"onEvent($event, obj, clear )\"\n                  @click:hour=\"onEvent({type:'click'}, obj, hour)\"\n                  @click:minute=\"onEvent({type:'click'}, obj, minute)\"\n                  @click:second=\"onEvent({type:'click'}, obj, second)\"\n                  @update:model-value=\"onInput($event, obj)\"\n                >\n                  <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                </component>\n              <!-- END MASK -->\n\n              <!-- DEFAULT all other Types -> typeToComponent -->\n                <component\n                  v-else\n                  :is=\"mapTypeToComponent(obj.schema.type)\"\n                  v-bind=\"bindSchema(obj)\"\n                  :type=\"checkExtensionType(obj)\"\n                  :model-value=\"setValue(obj)\"\n                  :obj=\"obj\"\n                  v-model:[searchInputSync(obj)]=\"obj.schema.searchInput\"\n                  @focus= \"onEvent($event, obj)\"\n                  @blur= \"onEvent($event, obj)\"\n                  @[suspendClickAppend(obj)]=\"onEvent($event, obj, append)\"\n                  @click:append-outer= \"onEvent($event, obj, appendOuter)\"\n                  @click:prepend= \"onEvent($event, obj, prepend )\"\n                  @click:prepend-inner= \"onEvent($event, obj, prependInner)\"\n                  @click:clear= \"onEvent($event, obj, clear )\"\n                  @click:hour= \"onEvent({type:'click'}, obj, hour)\"\n                  @click:minute= \"onEvent({type:'click'}, obj, minute)\"\n                  @click:second= \"onEvent({type:'click'}, obj, second)\"\n                  @update:model-value= \"onInput($event, obj)\"\n                >\n                  <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name= \"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                </component>\n              <!-- END DEFAULT -->\n              </slot>\n            </slot>\n\n            <!-- slot at bottom of item  -> <div slot=\"slot-bottom-key-[deep-nested-key-name]\"> -->\n            <slot :name=\"getTypeBottomSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n            <slot :name=\"getKeyBottomSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n          </v-col>\n\n          <!-- schema.spacer:true - push next item to the right and fill space between items -->\n          <v-spacer\n            v-if=\"obj.schema.spacer\"\n            :key=\"`s-${index}`\"\n          />\n        </template>\n        <!-- slot for Tooltip or use shorthand schema.tooltip:'myTooltip' | any tooltip activated by schema:{ key:{ tooltip:'myTooltip', ...} -->\n        <slot :name=\"getTooltipSlot(obj)\" v-bind= \"{ obj, index, id }\" >\n          <span>{{getShorthandTooltipLabel(obj.schema.tooltip)}}</span>\n        </slot>\n        <slot :name=\"getKeyTooltipSlot(obj)\" v-bind= \"{ obj, index, id }\" />\n      </v-tooltip>\n    </template>\n    <!-- FORM-BASE BOTTOM SLOT -->\n    <slot :name=\"getFormBottomSlot()\" :id= \"id\"/>\n  </v-row>\n</template>\n\n<script>\n// Import\n// import Vue from 'vue'\n// import { getCurrentInstance } from 'vue'\nimport { get, isPlainObject, isFunction, isString, isNumber, isEmpty, orderBy, delay } from 'lodash'\n\n// import VueMask from 'v-mask'\n// Vue.use(VueMask, {\n//   placeholders: {\n//     // Info Mask https://github.com/probil/v-mask\n//     // '#': null,       // passing `null` removes default placeholder, so `#` is treated as character\n//     // D: /\\d/,         // define new placeholder\n//   }\n// })\n//\n// Declaration\nconst typeToComponent = {\n  // maps schema.type to prop 'type' in v-text-field  - https://www.wufoo.com/html5/\n  text: 'v-text-field',\n  password: 'v-text-field',\n  email: 'v-text-field',\n  tel: 'v-text-field',\n  url: 'v-text-field',\n  search: 'v-text-field',\n  number: 'v-text-field',\n  /*\n        { type:'text, ext:'typeOfTextField', ...}\n        For native <INPUT> type use alternative schema prop ext  -> schema:{ type:'text, ext:'date', ...}\n        correspond to <input type=\"number\" >\n        number: 'v-text-field',   //  { type:'text, ext:'number', ...}\n        range: 'v-text-field',   //  { type:'text, ext:'range', ...}\n        date: 'v-text-field',    //  { type:'text, ext:'date', ...}\n        time: 'v-text-field',    //  { type:'text, ext:'time', ...}\n        color: 'v-text-field',   //  { type:'text, ext:'color', ...}\n      */\n\n  date: 'v-date-picker',\n  time: 'v-time-picker',\n  color: 'v-color-picker',\n  /*\n        INFO: 3 Types of PICKER DATE / TIME / COLOR\n        Date-Native Input    - schema:{ type:'text, ext:'date', ...}\n        Date-Picker          - schema:{ type:'date', ...}\n        Date-Picker-Textmenu     - schema:{ type:'date', ext:'text'...}\n      */\n\n  // map schema.type to vuetify-control (vuetify 2.0)\n  img: 'v-img',\n  textarea: 'v-textarea',\n  range: 'v-slider',\n  file: 'v-file-input',\n  switch: 'v-switch',\n  checkbox: 'v-checkbox',\n  card: 'v-card'\n  /*\n        HOW TO USE CUSTOM Components\n        1)\n          Name and Register your Custom-Control Component globally in 'main.js'\n          but avoid collision with registered names of Vuetify - Controls\n          See: https://vuejs.org/v2/guide/components-registration.html\n\n          Vue.component('custom-component', () => import('@/components/custom-component.vue') )\n\n        2)\n          use it in Schema\n\n          mySchema: { myCustom: { type: 'custom-component' }\n\n        3) // custom-component.vue\n          <template>\n            <v-text-field v-model=\"inp\"  label=\"Basic\"></v-text-field>\n          </template>\n          <script>\n            export default {\n              props: ['type','value', 'obj'],\n              computed:{\n                inp:{\n                  get(){  return this.value},\n                  set(v){ this.$emit('input', v)}\n                }\n              }\n            }\n          < /script>\n      */\n\n}\nconst orderDirection = 'ASC'\nconst pathDelimiter = '.'\nconst classKeyDelimiter = '-'\nconst defaultID = 'form-base'\nconst isPicker = 'date|time|color'\nconst onEventDelay = 1 // ms\n\nconst mouse = 'mouseenter|mouseleave'\nconst change = 'input|click' // event change collects events 'input|click'\nconst watch = 'focus|input|click|blur' // event watch collects events 'focus|input|click|blur'\nconst display = 'resize|swipe|intersect' // event watch collects events 'resize|swipe|intersect'\n\nconst topAppendix = 'top'\nconst bottomAppendix = 'bottom'\nconst slotAppendix = 'slot'\nconst tooltipAppendix = 'tooltip'\nconst injectAppendix = 'inject'\nconst itemClassAppendix = 'item'\nconst typeClassAppendix = 'type'\nconst keyClassAppendix = 'key'\nconst arrayClassAppendix = 'array'\nconst propertyClassAppendix = 'prop'\n\nconst injectSlotAppendix = `${slotAppendix}-${injectAppendix}`\nconst arraySlotAppendix = `${slotAppendix}-${arrayClassAppendix}`\nconst topSlotAppendix = `${slotAppendix}-${topAppendix}`\nconst itemSlotAppendix = `${slotAppendix}-${itemClassAppendix}`\nconst bottomSlotAppendix = `${slotAppendix}-${bottomAppendix}`\nconst tooltipSlotAppendix = `${slotAppendix}-${tooltipAppendix}`\n\nconst clear = 'clear'\nconst button = 'button'\nconst treeview = 'treeview'\nconst list = 'list'\nconst focus = 'focus'\nconst blur = 'blur'\nconst append = 'append'\nconst appendOuter = 'append-outer'\nconst prepend = 'prepend'\nconst prependInner = 'prepend-inner'\n\nconst hour = 'hour'\nconst minute = 'minute'\nconst second = 'second'\n\n// symbol on drop\nconst dropEffect = 'move' // 'copy, link, move\n// Default row setting if no row-attribute defined\nconst rowDefault = { noGutters: true } // { noGutters:true, justify:'center', align:'center' }\n\n// Default col setting, overrideable by prop col or by schema.col definition\n// Default col setting, overrideable by prop flex or by schema.flex definition (flex is DEPRECATED use col instead)\nconst colDefault = { cols: 'auto' } // { cols:12, sm: 6, md:4, lg:3, xl:2}\n\n// Mapper for Autogeneration of Schema from Value\nconst defaultSchemaIfValueIsNullOrUndefined = key => ({ type: 'text', label: key })\nconst defaultSchemaIfValueIsString = key => ({ type: 'text', label: key })\nconst defaultSchemaIfValueIsNumber = key => ({ type: 'number', label: key })\nconst defaultSchemaIfValueIsBoolean = key => ({ type: 'checkbox', label: key })\n// Menu triggered DateTimePicker Default\nconst defaultPickerSchemaText = { type: 'text', readonly: true }\nconst defaultPickerSchemaMenu = { closeOnContentClick: false, transition: 'scale-transition', nudgeRight: 32, maxWidth: '290px', minWidth: '290px' }\n// type wrap or group - if no typeInt defined take default\nconst defaultInternGroupType = 'v-card'\n//\nexport default {\n  name: 'VFormBase',\n  props: {\n    id: {\n      type: String,\n      default: defaultID\n    },\n    rootId: {\n      type: String,\n      default: defaultID\n    },\n    row: {\n      type: [Object]\n    },\n    col: {\n      type: [Object, Number, String]\n    },\n    flex: {\n      type: [Object, Number, String]\n    },\n    modelValue: {\n      type: [Object, Array],\n      default: () => null\n    },\n    model: {\n      type: [Object, Array],\n      default: () => ({})\n    },\n    schema: {\n      type: [Object, Array],\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      flatCombinedArray: [],\n      clear,\n      button,\n      treeview,\n      list,\n      focus,\n      blur,\n      append,\n      appendOuter,\n      prepend,\n      prependInner,\n      hour,\n      minute,\n      second\n    }\n  },\n  computed: {\n    valueIntern () {\n      // use <formbase :model=\"myData\" />  ->  legacy code <formbase :value=\"myData\" />\n      const model = this.model || this.modelValue\n      this.updateArrayFromState(model, this.schema)\n      return model\n    },\n    parent () {\n      let p = this\n      if (p.$parent && p.$parent.$parent) {\n        while (p.id.startsWith(p.$parent.$parent.id + '-')) {\n          p = p.$parent.$parent\n        }\n      }\n      return p\n    },\n    index () {\n      const m = this.id && this.id.match(/\\d+/g)\n      return m ? m.map(Number) : null\n    },\n    getRow () {\n      return this.row || rowDefault\n    },\n    flatCombinedArraySorted () {\n      return orderBy(this.flatCombinedArray, ['schema.sort'], [orderDirection])\n    },\n    storeStateData () {\n      this.updateArrayFromState(this.valueIntern, this.schema)\n      return this.valueIntern\n    },\n    storeStateSchema () {\n      this.updateArrayFromState(this.valueIntern, this.schema)\n      return this.schema\n    }\n  },\n  watch: {\n    schema: function (newSchema) {\n      this.rebuildArrays(this.valueIntern, newSchema)\n      // this.schema = newSchema\n    }\n  },\n  methods: {\n    // MAP TYPE\n    mapTypeToComponent (type) {\n      // merge global registered components into typeToComponent Object\n      __log(\n        this.$app\n      )\n      // const allTypeComponents = { ...typeToComponent, ...this.$app._instance.appContext.components }\n      // // const typeToComponent -> maps type to according v-component\n      // // ie. schema:{ type:'password', ... } to specific vuetify-control or default to v-text-field'\n      // return allTypeComponents[type] ? allTypeComponents[type] : `v-${type}`\n    },\n    // CHECK FOR TYPE: DATE, TIME OR COLOR and EXT: TEXT\n    isDateTimeColorTypeAndExtensionText (obj) {\n      return isPicker.includes(obj.schema.type) && obj.schema.ext === 'text'\n    },\n    // CHECK FOR EXT: DATE, TIME OR COLOR\n    isDateTimeColorExtension (obj) {\n      return isPicker.includes(obj.schema.ext)\n    },\n    // BIND SCHEMA TEXT OPTIONS\n    bindOptions (b) {\n      // schema.options in RADIO/BUTTON\n      return isString(b) ? { value: b, label: b } : b\n    },\n    bindSchemaText (obj) {\n      return { ...defaultPickerSchemaText, ...obj.schema.text }\n    },\n    bindSchemaMenu (obj) {\n      return { ...defaultPickerSchemaMenu, ...obj.schema.menu }\n    },\n    bindSchema (obj) {\n      return obj.schema\n    },\n    suspendClickAppend (obj) {\n      // select|combobox|autocomplete -> suspend 'click:append' for working down arrow\n      return /(select|combobox|autocomplete)/.test(obj.schema.type) ? '' : 'click:append'\n    },\n    searchInputSync (obj) {\n      // schema.searchInput ->   bind 'search-input'\n      return (typeof obj.schema.searchInput !== 'undefined') ? 'search-input' : ''\n    },\n\n    // EXT TYPE\n    checkExtensionType (obj) {\n      // For native <INPUT> type use prop 'ext'\n      // { type:'text', ext:'range', ... } -> use native Input Type 'range' instead of slider\n      // { type:'text', ext:'number', ...} -> use native Input Type 'number'\n      return obj.schema.ext || obj.schema.type\n    },\n    // V-INTERN TYPE\n    checkInternType (obj) {\n      // If vuetify component needs a 'type' prop for working  - ie. datepicker uses type:'month'\n      // { type:'date', ext:'text', typeInt:'month' ...} -> use v-date-picker menu with intern Type 'month'\n      return obj.schema.typeInt || obj.schema.type\n    },\n    checkInternGroupType (obj) {\n      //  in type 'wrap|group' you can define with typeInt: a component as group - schema: { group1: { type:'wrap', typeInt:'v-card', ... } ...}\n      const typeInt = obj.schema.typeInt || defaultInternGroupType\n      return typeInt.startsWith('v-') ? typeInt : `v-${typeInt}`\n    },\n    // GET ITERATION KEY FOR TYPE ARRAY\n    getKeyForArray (id, obj, item, index) {\n      // IMPORTANT if you want to add or remove items in type:'array'\n      // more Info ->\n      // https://forum.vuejs.org/t/after-splicing-an-object-wrong-item-disappears-from-view/9247/4\n      // https://stackoverflow.com/questions/45655090/vue-array-splice-removing-wrong-item-from-list\n\n      // create for iteration v-for an uniqe key from each object in array using index and time.hash\n      // or define your key index by defining a key property\n      // MODEL\n      // arrayTasks: [{ trace:'100', label:'A'}, ...  ]\n      // SCHEMA\n      // arrayTasks: { type:'array', schema:{ ... } }                                                      DEFAULT KEY -> KEY id-key-index   'arrayTasks-0'\n      // arrayTasks: { type:'array', key:'trace', schema:{ trace: { type:'text'}, ... } }                              -> KEY trace            100\n      // arrayTasks: { type:'array', key:['trace','label'], schema:{ trace: { type:'text'}, label: { type:'text'} } }  -> KEY trace_label      100_A\n\n      // IMPORTANT! Key should not contain an EDITABLE prop, because of re-iteration on any change\n\n      const k = obj.schema.key\n      return k ? Array.isArray(k) ? k.map(i => item[i]).join('_') : item[k] : (!isNaN(index)) ? `${id}-${obj.key}-${index}` : index\n    },\n    //\n    // GET IMG SOURCE\n    getImageSource (obj) {\n      // if exist get source from src otherwise join schema.base & value & schema.tail\n      return obj.schema.src ? obj.schema.src : `${obj.schema.base}${obj.value}${obj.schema.tail}`\n    },\n    //\n    // ICON\n    getIconValue (obj) {\n      // icon: try schema.label or if undefined use value\n      return obj.schema.label ? obj.schema.label : this.setValue(obj)\n    },\n    //\n    // TOOLTIP\n    getShorthandTooltip (schemaTooltip) {\n      // check if tooltip is typeof string ->  shorthand { bottom:true, label: obj.schema.tooltip} otherwise take original object\n      return isString(schemaTooltip) ? { bottom: true, label: schemaTooltip } : schemaTooltip\n    },\n    getShorthandTooltipLabel (schemaTooltip) {\n      // check if tooltip is typeof string ->  return Label\n      return isString(schemaTooltip) ? schemaTooltip : schemaTooltip && schemaTooltip.label\n    },\n    //\n    // FORM SLOTS\n    getFormTopSlot () {\n      // Slot for Top Line in Formbase -> 'slot-formbase-top'\n      return `${topSlotAppendix}-${this.id}`\n    },\n    getFormBottomSlot () {\n      // Slot for Bottom Line in Formbase -> 'slot-formbase-bottom'\n      return `${bottomSlotAppendix}-${this.id}`\n    },\n    //\n    // KEY SLOTS\n    getKeyInjectSlot (obj, inject) {\n      // get slot starting with 'slot-inject' and inject verb 'thumb-label'   -> 'slot-inject-thumb-label-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${injectSlotAppendix}-${inject}-${keyClassAppendix}`)\n    },\n    getKeyTopSlot (obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-top'  -> 'slot-top-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${topSlotAppendix}-${keyClassAppendix}`)\n    },\n    getKeyItemSlot (obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-item'  -> 'slot-item-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${itemSlotAppendix}-${keyClassAppendix}`)\n    },\n    getKeyBottomSlot (obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-bottom'  -> 'slot-bottom-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${bottomSlotAppendix}-${keyClassAppendix}`)\n    },\n    getKeyTooltipSlot (obj) {\n      // matches Key specific Tooltip | name by replacing '.' with '-' and prepending 'slot-bottom'  -> 'slot-tooltip-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${tooltipSlotAppendix}-${keyClassAppendix}`)\n    },\n    getTooltipSlot (obj) {\n      // default tooltip slot matches all keys\n      return `${tooltipSlotAppendix}`\n    },\n    //\n    // ARRAY SLOTS\n    getArrayTopSlot (obj) {\n      // slot each item from array  -> 'slot-top-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${topSlotAppendix}-${arrayClassAppendix}`)\n    },\n    getArrayItemSlot (obj) {\n      // slot each item from array  -> 'slot-top-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${itemSlotAppendix}-${arrayClassAppendix}`)\n    },\n    getArrayBottomSlot (obj) {\n      // slot each item from array   -> 'slot-bottom-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${bottomSlotAppendix}-${arrayClassAppendix}`)\n    },\n    //\n    // TYPE SLOTS\n    getTypeTopSlot (obj) {\n      // get Type specific slot name  -> 'slot-top-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, `${topSlotAppendix}-${typeClassAppendix}`)\n    },\n    getTypeItemSlot (obj) {\n      // get Type specific slot name  -> 'slot-item-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, `${itemSlotAppendix}-${typeClassAppendix}`)\n    },\n    getTypeBottomSlot (obj) {\n      // get Type specific slot name  -> 'slot-bottom-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, `${bottomSlotAppendix}-${typeClassAppendix}`)\n    },\n    //\n    // CLASS Names\n    getPropertyClassNameWithAppendix (obj, appendix) {\n      // get PROP specific name by app-/prepending 'appendix-' and replacing '.' with '-' in nested key path  -> 'controls switch'\n      return obj.key ? obj.key.split(pathDelimiter).map(s => `${appendix ? appendix + classKeyDelimiter : ''}${s}`).join(' ') : ''\n    },\n    getPropertyClassName (obj) {\n      return this.getPropertyClassNameWithAppendix(obj, propertyClassAppendix)\n    },\n    getKeyClassNameWithAppendix (obj, appendix) {\n      // get KEY specific name by app-/prepending 'appendix-' and replacing '.' with '-' in nested key path  -> 'top-slot-address-city'\n      return `${appendix ? appendix + classKeyDelimiter : ''}${this.id ? this.id + classKeyDelimiter : ''}${obj.key.replace(/\\./g, '-')}`\n      // return `${appendix ? appendix + classKeyDelimiter : ''}${obj.key.replace(/\\./g, '-')}`\n    },\n    getKeyClassName (obj) {\n      return this.getKeyClassNameWithAppendix(obj, keyClassAppendix)\n    },\n    getTypeClassNameWithAppendix (obj, appendix) {\n      // get TYPE specific class name by prepending '-type' -> 'type-checkbox'\n      return `${appendix ? appendix + classKeyDelimiter : ''}${this.id ? this.id + classKeyDelimiter : ''}${obj.schema.type}`\n      // return `${appendix + classKeyDelimiter}${obj.schema.type}`\n    },\n    getTypeClassName (obj) {\n      return this.getTypeClassNameWithAppendix(obj, typeClassAppendix)\n    },\n    getClassName (obj) {\n      // combines all into a single classname\n      // class => ie. 'item type-checkbox key-address-zip prop-adress prop-zip'\n      return `${itemClassAppendix} ${this.getTypeClassName(obj)} ${this.getKeyClassName(obj)} ${this.getPropertyClassName(obj)}`\n    },\n    //\n    // GRID\n    gridMapper (obj, prepender) {\n      if (obj) {\n        ['sm', 'md', 'lg', 'xl'].map(k => {\n          if (obj[k]) { obj[prepender + k] = obj[k]; delete obj[k] }\n        })\n      }\n    },\n    gridReplaceXS (obj, replacer) {\n      // see vuetify Grid - replace Prop XS -V1.5 with COLS, ORDER, OFFSET - V2.0\n      // xs must be replaced in new Vuetify 2.0 Grid with cols, offset, order\n      if (obj && obj.xs) { obj[replacer] = obj.xs; delete obj.xs }\n    },\n    getGridAttributes (obj) {\n      // FLEX DEPRECATED use COL instead of FLEX\n      // flex:{ xs|sm|md|lg } - value:number|string\n\n      // col:{ cols|sm|md|lg|xl } - value:number|string\n      // order:{ order|sm|md|lg|xl|order-sm|order-md|order-lg|order-xl } - value:number|string\n      // offset:{ offset|sm|md|lg|xl|offset-sm|offset-md|offset-lg|offset-xl } - value:number|string\n\n      const colSchema = obj.schema.col || obj.schema.flex\n\n      const colAttr = this.col || this.flex || colDefault\n\n      const colObject = colSchema\n        // if available use schema definition of cols\n        ? (isPlainObject(colSchema) ? colSchema : isNumber(colSchema) || isString(colSchema) ? { cols: colSchema } : { cols: 'auto' })\n        // else use formbase attribute definition of cols\n        : colAttr ? (isPlainObject(colAttr) ? colAttr : isNumber(colAttr) || isString(colAttr) ? { cols: colAttr } : { cols: 'auto' })\n        // if no definition set cols to 'auto'\n          : { cols: 'auto' }\n\n      this.gridReplaceXS(colObject, 'cols')\n\n      // schema definition of offset\n      const offset = obj.schema.offset\n      const offsetObject = offset ? (isPlainObject(offset) ? offset : { offset }) : offset\n      this.gridMapper(offsetObject, 'offset-')\n      this.gridReplaceXS(offsetObject, 'offset')\n\n      // schema definition of offset\n      const order = obj.schema.order\n      const orderObject = order ? (isPlainObject(order) ? order : { order }) : order\n      this.gridMapper(orderObject, 'order-')\n      this.gridReplaceXS(orderObject, 'order')\n\n      return { ...colObject, ...offsetObject, ...orderObject }\n    },\n    getRowGroupOrArray (obj) {\n      return obj.schema.row || this.row || rowDefault\n    },\n    getColGroupOrArray (obj) {\n      return obj.schema.col || this.col || colDefault\n    },\n    //\n    // SANITIZE SLOTS\n    getInjectedScopedSlots (id, obj) {\n      // <template #slot-inject-thumb-label-key-formbase-path-to-mykey />\n      // extract the verb 'thumb-label' from Slots starting with 'slot-inject' and matching [component-id] and [key]\n      const rx = new RegExp(`${injectSlotAppendix}-(.*?)-${keyClassAppendix}`)\n      return Object.keys(this.$slots)\n        .filter(s => (s.includes(`${id}${classKeyDelimiter}${obj.key.replace(/\\./g, '-')}`) && s.includes(injectSlotAppendix)))\n        .map(i => i.match(rx)[1])\n    },\n    //\n    // Map Values coming FROM Control, TO Control or DROP on Control\n    toCtrl (params) {\n      // signature params { value, obj, data, schema }\n      //\n      // manipulate value going to control, function must return a (modified) value\n      // schema:{ name: { type:'text', toCtrl: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      // return isFunction(params.obj.schema && params.obj.schema.toCtrl) ? params.obj.schema.toCtrl(params) : params.value\n      return params.obj.schema && isFunction(params.obj.schema.toCtrl) ? params.obj.schema.toCtrl(params) : params.value\n    },\n    fromCtrl (params) {\n      // signature params { value, obj, data, schema }\n      //\n      // manipulate updated value from control, function must return a (modified) value\n      // schema:{ name: { type:'text', fromCtrl: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      return params.obj.schema && isFunction(params.obj.schema.fromCtrl) ? params.obj.schema.fromCtrl(params) : params.value\n    },\n    dropCtrl (params) {\n      // signature params { value, obj, dragObject, dragEvent, event,data, schema }\n      //\n      // manipulate dropped value from control, function must return a (modified) value\n      // schema:{ name: { type:'text', drop: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      return params.obj.schema && isFunction(params.obj.schema.drop) ? params.obj.schema.drop(params) : params.value\n    },\n    //\n    // Drag / Drop / DropValue\n    dragstart (event, obj) {\n      if (!obj.schema.drag) return\n\n      event.dataTransfer.dropEffect = dropEffect\n      event.dataTransfer.effectAllowed = dropEffect\n\n      const dragEvent = this.onEvent(event, obj)\n      event.dataTransfer.setData('text', JSON.stringify(dragEvent))\n    },\n\n    dragover (event, obj) { return obj.schema.drop ? event.preventDefault() : null },\n\n    drop (event, obj) {\n      if (!obj.schema.drop) return event.preventDefault()\n      // get dragEvent and dragEvent.obj\n      obj.dragEvent = JSON.parse(event.dataTransfer.getData('text'))\n\n      // no drop on drag object\n      if (obj.key === obj.dragEvent.obj.key && obj.id === obj.dragEvent.id) return event.preventDefault()\n      // handle schema.drop function\n      if (isFunction(obj.schema.drop)) obj.value = this.dropValue(obj, event)\n\n      this.onEvent(event, obj)\n\n      event.preventDefault()\n    },\n\n    dropValue (obj, event) {\n      return this.dropCtrl({ value: obj.dragEvent.value, obj, event, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    //\n    // Set Value\n    setValue (obj, type) {\n      // Use 'schema.toCtrl' Function for setting a modified Value\n      // __log(\n      //     obj.schema.name,\n      //     this.storeStateData,\n      //     // obj.value\n      // )\n      return obj.schema.type === 'wrap'\n        ? this.toCtrl({ value: this.storeStateData, obj, data: this.storeStateData, schema: this.storeStateSchema })\n        : this.toCtrl({ value: obj.value, obj, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    //\n    // EVENTS Get Value from Input & other Events\n    onInput (value, obj, type = 'input') {\n      // Value after change in Control\n      value = this.fromCtrl({ value, obj, data: this.storeStateData, schema: this.storeStateSchema })\n      // harmonize undefined or empty strings => null, because 'clearable' in vuetify controls resets to null and not to empty string!\n      value = !value || value === '' ? null : value\n      // if schema type is number convert to number\n      value = obj.schema.type === 'number' ? Number(value) : value\n      // update deep nested prop(key) with value\n      this.setObjectByPath(this.storeStateData, obj.key, value)\n\n      const emitObj = {\n        on: type,\n        id: this.id,\n        index: this.index,\n        params: { index: this.index, lastValue: obj.value },\n        key: obj.key,\n        value,\n        obj,\n        data: this.storeStateData,\n        schema: this.storeStateSchema,\n        parent: this.parent\n      }\n      this.emitValue(type, emitObj)\n      return emitObj\n    },\n    onEvent (event = {}, obj, tag) {\n      const text = event && event.srcElement && event.srcElement.innerText\n      const model = obj.schema.model\n      const open = obj.schema.open\n      const index = this.index\n      // avoid circular JSON in dragstart\n      const parent = event.type !== 'dragstart' ? this.parent : undefined\n\n      const emitObj = {\n        on: event.type,\n        id: this.id,\n        index,\n        params: { text, tag, model, open, index },\n        key: obj.key,\n        value: obj.value,\n        obj,\n        event,\n        data: this.storeStateData,\n        schema: this.storeStateSchema,\n        parent\n      }\n\n      delay(() => { this.emitValue(event.type, emitObj), onEventDelay })\n\n      return emitObj\n    },\n    onClickOutside (event, obj) {\n      if (!obj.schema || !obj.schema.clickOutside) return\n      if (isFunction(obj.schema.clickOutside)) return obj.schema.clickOutside(obj, event)\n      this.emitValue('clickOutside', { on: 'clickOutside', id: this.id, key: obj.key, value: obj.value, obj, params: { x: event.clientX, y: event.clientY }, event, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    onIntersect (isIntersecting, entries, observer, obj) {\n      //   const isIntersecting = entries[0].isIntersecting\n      const index = this.index\n      this.emitValue('intersect', { on: 'intersect', id: this.id, index, key: obj.key, value: obj.value, obj, params: { isIntersecting, entries, observer }, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    onSwipe (tag, obj) {\n      this.emitValue('swipe', { on: 'swipe', id: this.id, key: obj.key, value: obj.value, obj, params: { tag }, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    onResize (event) {\n      this.emitValue('resize', { on: 'resize', id: this.id, params: { x: window.innerWidth, y: window.innerHeight }, event, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    //\n    // EMIT EVENT\n    emitValue (event, val) {\n      const emitEvent = change.includes(event) ? 'change' : watch.includes(event) ? 'watch' : mouse.includes(event) ? 'mouse' : display.includes(event) ? 'display' : event\n\n      if (this.$attrs[`${emitEvent}:${this.id}`]) {\n        this.deprecateEventCustomID(emitEvent)\n        this.deprecateCombinedEvents(emitEvent, event)\n        this.$emit(`${emitEvent}:${this.id}`, val) // listen to specific event only\n      } else if (this.$attrs[`${emitEvent}`]) {\n        this.deprecateCombinedEvents(emitEvent, event)\n        this.$emit(emitEvent, val) // listen to specific event only\n      } else if (this.$attrs[`${event}:${this.id}`]) {\n        this.deprecateEventCustomID(event)\n        this.$emit(`${event}:${this.id}`, val) // listen to specific event only\n      } else if (this.$attrs[`${event}`]) {\n        this.$emit(event, val) // listen to specific event only\n      }\n    },\n    deprecateEventCustomID (ev) {\n      console.warn(`--- DEPRECATION ${ev}:${this.id}: ----------------------------------------------------------------------------`)\n      console.warn(`<v-form-base  @${ev}:${this.id}=\"handler\" /> is deprecated use simplified version <v-form-base  @${ev}=\"handler\" />`)\n      console.warn('---------------------------------------------------------------------------------------------')\n    },\n    deprecateCombinedEvents (emitEvent, event) {\n      if (emitEvent !== event) {\n        console.warn('--- DEPRECATION Combined Listener:  --------------------------------------------------------------------------')\n        console.warn(`Combined Event-Listener '${emitEvent}' have been removed for better comprehensibility and simplification`)\n        console.warn('Please use separate listener for each event like <v-form-base  @focus=\"handler\" @input=\"handler\" @blur=\"handler\"/>')\n        console.warn('---------------------------------------------------------------------------------------------')\n      }\n    },\n    //\n    // PREPARE ARRAYS DATA & SCHEMA\n    setObjectByPath (object, path, value) {\n      // resolves chained keys (like 'user.address.street') on an object and set the value\n      const pathArray = path.split(pathDelimiter)\n      pathArray.forEach((p, ix) => {\n        if (ix === pathArray.length - 1) object[p] = value\n        object = object[p]\n      })\n    },\n    updateArrayFromState (data, schema) {\n      this.flatCombinedArray.forEach(obj => {\n        obj.value = get(data, obj.key, null) // get - lodash\n        obj.schema = get(schema, obj.key, null) // get - lodash\n      })\n    },\n    sanitizeShorthandType (key, schema) {\n      // if key in schema is string only, then handle shorthand definition\n      // schema:{ name:'text' }  => schema:{ name: { type:'text', label: 'name' }\n      return isString(schema) ? { type: schema, label: key } : schema\n    },\n    flattenObjects (dat = {}, sch) {\n      const data = {}\n      const schema = {}\n      // Organize Formular using Schema not Data\n      Object.keys(sch).forEach(key => {\n        // convert string definition of name:'text' into object name:{type:'text'}\n        sch[key] = this.sanitizeShorthandType(key, sch[key])\n\n        const bothArray = Array.isArray(dat[key]) && Array.isArray(sch[key])\n        const datObjectWithoutSchemaType = isPlainObject(dat[key]) && !sch[key].type\n        const datObjectContainsTypeKey = (dat[key] && dat[key].type && (sch[key] && sch[key].type))\n        const notInstanceOfFileObject = !(dat[key] instanceof File)\n\n        if (bothArray || datObjectWithoutSchemaType || (datObjectContainsTypeKey && notInstanceOfFileObject)) {\n          const { data: flatData, schema: flatSchema } = this.flattenObjects(dat[key], sch[key])\n          Object.keys(flatData).forEach(ii => {\n            data[key + pathDelimiter + ii] = flatData[ii]\n            schema[key + pathDelimiter + ii] = flatSchema[ii]\n          })\n        } else {\n          data[key] = dat[key]\n          schema[key] = sch[key]\n        }\n      })\n      return { data, schema }\n    },\n    combineObjectsToArray ({ data, schema }) {\n      const arr = []\n      Object.keys(schema).forEach(key => {\n        if (!isPlainObject(schema[key])) {\n          console.warn(`Schema '${JSON.stringify(schema)}' of Prop '${key}' must be a string with value of type key:'text' or a plainobject with at least key:{ type:'text'} definition.  Prop '${key}' will be ignored!`)\n          return\n        }\n        arr.push({ key, value: data[key], schema: schema[key] })\n      })\n      return arr\n    },\n    flattenAndCombineToArray (data, schema) {\n      // flatten nested structure of both objects 'data' & 'schema' ...\n      const flattenedObjects = this.flattenObjects(data, schema)\n      // ... and combine them to an array\n      return this.combineObjectsToArray(flattenedObjects)\n    },\n    autogenerateSchema (value) {\n      // generate a minimal default schema from value\n      let schema = JSON.stringify(value, (key, val) => val === undefined ? null : val)\n      schema = JSON.parse(schema, (key, val) => {\n        if (val === null || val === undefined) return defaultSchemaIfValueIsNullOrUndefined(key)\n        if (typeof val === 'string') return defaultSchemaIfValueIsString(key)\n        if (typeof val === 'number') return defaultSchemaIfValueIsNumber(key)\n        if (typeof val === 'boolean') return defaultSchemaIfValueIsBoolean(key)\n        return val\n      })\n      // assign root props to avoid manipulating prop: schema\n      Object.keys(schema).forEach(key => this.schema[key] = schema[key])\n    },\n\n    tryAutogenerateModelStructure (model, schema) {\n      // generate or complete an empty model based on schema structure\n\n      Object.keys(schema).forEach(key => {\n        // model must be at least an empty Object. It doesn't work with 'null', 'undefined' or any 'primitive value'\n        // Autogeneration from Schema works only if model is an empty Object\n        // if model is NOT an empty Object, no action is applied, otherwise data in model could be changed or modified\n        if (!isEmpty(model[key])) return\n\n        const val = schema[key]\n        if (val.type === 'group') {\n          model[key] = {}\n          this.tryAutogenerateModelStructure(model[key], val.schema)\n        } else\n        if (val.type === 'array') {\n          model[key] = {}\n          this.tryAutogenerateModelStructure(model[key], val.schema)\n        } else\n        if (val.type === 'list') {\n          model[key] = {}\n        } else\n        if (isPlainObject(val) && !val.type) {\n          model[key] = {}\n          this.tryAutogenerateModelStructure(model[key], val)\n        }\n        if (Array.isArray(val) && !val.type) {\n          model[key] = {}\n          this.tryAutogenerateModelStructure(model[key], val)\n        }\n      })\n    },\n    rebuildArrays (model, schema) {\n      // undefined, null or primitive value for model can't work because you need reference to object for working on\n      if (!model) throw 'Property \\'model\\' is null or undefined. Use \\'<v-form-base :model=\"myModel\" :schema=\"mySchema\" />\\'. myModel must be at least an empty Object.'\n\n      // noise if async loading\n      if (isEmpty(schema) && isEmpty(model)) {\n        console.warn('At least one of the properties \\'model\\' or \\'schema\\' in <v-form-base /> must be at least an empty Object. Ignore this Warning on async loading \\'model\\' or \\'schema\\' ')\n        // return\n      }\n      // generate/complete structure of model\n      this.tryAutogenerateModelStructure(model, schema)\n\n      // no schema defined or empty -> autogenerate basic schema\n      if (isEmpty(schema)) this.autogenerateSchema(model)\n\n      // create flatted working array from schema and value\n      this.flatCombinedArray = this.flattenAndCombineToArray(this.storeStateData, this.storeStateSchema)\n    }\n    //\n  },\n  created () {\n    this.rebuildArrays(this.valueIntern, this.schema)\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}