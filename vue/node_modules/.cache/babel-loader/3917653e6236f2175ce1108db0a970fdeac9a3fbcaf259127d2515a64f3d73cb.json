{"ast":null,"code":"import _ from 'lodash';\n\n// plugin components\n// import VFormBase from 'vuetify-form-base';\nimport VCustomFormBase from '__components/others/CustomFormBase.vue';\n\n// Template Components\nimport UEModal from '__components/modals/Modal.vue';\nimport UEModalTest from '__components/modals/ModalTest.vue';\nimport UEModalMedia from '__components/modals/ModalMedia.vue';\n\n// global mixins\nimport { PropsMixin } from '@/mixins';\n\n// mutations\nimport { MEDIA_LIBRARY } from '@/store/mutations';\n\n// const includeLayouts = require.context('__components/layouts/', false, /[A-Za-z]*(?<!_)\\.vue$/i);\n// const includeFormInputs = require.context('__components/inputs', true, /\\.vue$/i);\n// const includeCustomFormInputs = require.context('__components/customInputs', true, /\\.vue$/i);\n\n// Add-ons\nimport vuetify from '@/plugins/vuetify';\n\n// Store\nimport store from '@/store';\n\n// Config\nimport i18n from '@/config/i18n';\n\n// Directives\nimport { VueMaskDirective } from 'v-mask';\n\n// Directives\nimport SvgSprite from '@/directives/svg';\nconst includeGlobalComponents = require.context('__components', false, /[A-Za-z]*(?<!_)\\.vue$/i);\nexport default UEConfig = app => {\n  return {\n    install(app, opts) {\n      // all components\n      // app.component('v-form-base', VFormBase);\n      app.component('v-custom-form-base', VCustomFormBase);\n\n      // Vue.component('ue-main', UEMain);\n      // Vue.component('ue-sidebar', UESidebar);\n      // Vue.component('ue-list-group', UEListGroup);\n      // Vue.component('ue-list-element', UEListElement);\n      // Vue.component('ue-footer', UEFooter);\n      // Vue.component('ue-form', UEForm);\n      // Vue.component('ue-form-base', UEFormBase);\n      // Vue.component('ue-logout-dialog', UELogoutDialog);\n      // Vue.component('ue-alert', UEAlert);\n      // Vue.component('ue-btn', UEButton);\n      app.component('ue-modal', UEModal);\n      app.component('ue-modal-test', UEModalTest);\n      app.component('ue-media', UEModalMedia);\n\n      // Vue.component('ue-medialibrary', UEMediaLibrary)\n\n      includeGlobalComponents.keys().forEach(path => {\n        const prefix = 'ue';\n        const fileName = path.split('/').pop().split('.')[0];\n        const componentName = prefix + fileName.replace(/[A-Z]/g, m => '-' + m.toLowerCase());\n        __log(componentName);\n        app.component(componentName, require('__components/' + fileName + '.vue').default);\n      });\n\n      // includeLayouts.keys().forEach((path) => {\n      //     const prefix = \"ue\";\n      //     const fileName = path.split('/').pop().split('.')[0];\n      //     const componentName = prefix + fileName.replace(/[A-Z]/g, m => \"-\" + m.toLowerCase());\n      //     // __log(componentName)\n      //     Vue.component(componentName, require('__components/layouts/' + fileName + '.vue').default);\n      // });\n\n      // includeFormInputs.keys().forEach((path) => {\n      //     const prefix = \"ue-input\";\n      //     const fileName = path.split('/').pop().split('.')[0];\n      //     const componentName = prefix + fileName.replace(/[A-Z]/g, m => \"-\" + m.toLowerCase());\n      //     // __log(componentName)\n      //     Vue.component(componentName, require('__components/inputs/' + fileName + '.vue').default);\n      // });\n      // includeCustomFormInputs.keys().forEach((path) => {\n      //     const prefix = \"v-custom-input\";\n      //     const fileName = path.split('/').pop().split('.')[0];\n      //     const componentName = prefix + fileName.replace(/[A-Z]/g, m => \"-\" + m.toLowerCase());\n      //     // __log(componentName)\n      //     Vue.component(componentName, require('__components/customInputs/' + fileName + '.vue').default);\n      // });\n\n      app.use(vuetify);\n      app.use(store);\n      app.mixin(PropsMixin);\n\n      // Global Vue mixin : Use global mixins sparsely and carefully!\n      app.mixin({\n        // vuetify,\n        // i18n,\n        methods: {\n          openFreeMediaLibrary: function () {\n            // __log('openFreeMedialibrary triggered')\n            this.$store.commit(MEDIA_LIBRARY.UPDATE_MEDIA_CONNECTOR, null); // reset connector\n            this.$store.commit(MEDIA_LIBRARY.RESET_MEDIA_TYPE); // reset to first available type\n            this.$store.commit(MEDIA_LIBRARY.UPDATE_REPLACE_INDEX, -1); // we are not replacing an image here\n            this.$store.commit(MEDIA_LIBRARY.UPDATE_MEDIA_MAX, 0); // set max to 0\n            this.$store.commit(MEDIA_LIBRARY.UPDATE_MEDIA_FILESIZE_MAX, 0); // set filesize max to 0\n            this.$store.commit(MEDIA_LIBRARY.UPDATE_MEDIA_WIDTH_MIN, 0); // set width min to 0\n            this.$store.commit(MEDIA_LIBRARY.UPDATE_MEDIA_HEIGHT_MIN, 0); // set height min to 0\n            this.$store.commit(MEDIA_LIBRARY.UPDATE_MEDIA_MODE, false); // set the strict to false (you can change the active type)\n\n            if (this.$root.$refs.main && this.$root.$refs.main.$refs.mediaLibrary) {\n              this.$root.$refs.main.$refs.mediaLibrary.openModal();\n            }\n            // if (this.$root.$refs.mediaLibrary) this.$root.$refs.mediaLibrary.open()\n          }\n        }\n      });\n\n      // // Configurations\n      // Vue.config.productionTip = isProd\n      // Vue.config.devtools = true\n      // app.config.globalProperties.$http = axios\n\n      window.$trans = app.config.globalProperties.$trans = function (key, defaultValue) {\n        return _.get(window[process.env.VUE_APP_NAME].unusualLocalization.lang, key, defaultValue);\n        // return get(window[process.env.VUE_APP_NAME].unusualLocalization.lang, key, defaultValue)\n      };\n\n      // axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\n\n      // axios.interceptors.response.use((response) => response, (error) => {\n      //     globalError('CONTENT', error)\n\n      //     return Promise.reject(error)\n      // })\n\n      // // Plugins\n      // Vue.use(VueTimeago, {\n      //     name: 'timeago', // component name\n      //     locale: window[process.env.VUE_APP_NAME].twillLocalization.locale,\n      //     locales: mapValues(locales, 'date-fns')\n      // })\n\n      // Directives\n      app.directive('mask', VueMaskDirective);\n      app.use(SvgSprite);\n      // Vue.use(Tooltip)\n      // Vue.use(Sticky)\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
