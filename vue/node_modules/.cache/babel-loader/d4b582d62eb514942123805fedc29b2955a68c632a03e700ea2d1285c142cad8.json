{"ast":null,"code":"import { renderSlot as _renderSlot, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, toHandlers as _toHandlers, mergeProps as _mergeProps, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_spacer = _resolveComponent(\"v-spacer\");\n  const _component_v_icon = _resolveComponent(\"v-icon\");\n  const _component_v_system_bar = _resolveComponent(\"v-system-bar\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_dialog = _resolveComponent(\"v-dialog\");\n  return _openBlock(), _createBlock(_component_v_dialog, _mergeProps({\n    modelValue: $options.dialog,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $options.dialog = $event)\n  }, _toHandlers({\n    toggleFullScreen: $options.toggleFullScreen\n  }), _ctx.bindProps(), {\n    fullscreen: $data.full,\n    width: $options.modalWidth\n  }), {\n    activator: _withCtx(({\n      on,\n      attrs\n    }) => [_renderSlot(_ctx.$slots, \"activator\", {\n      attrs: {\n        ...attrs\n      },\n      on: {\n        ...on\n      }\n    }, () => [_createCommentVNode(\" <v-btn\\n                    color=\\\"primary\\\"\\n                    dark\\n                    class=\\\"mb-2\\\"\\n                    v-bind=\\\"{attrs}\\\"\\n                    v-on=\\\"on\\\"\\n                    >\\n                    {{ $tc('show') }}\\n                </v-btn> \")])]),\n    default: _withCtx(() => [_createVNode(_component_v_card, null, {\n      default: _withCtx(() => [$props.systembar ? _renderSlot(_ctx.$slots, \"systembar\", {\n        key: 0\n      }, () => [_createVNode(_component_v_system_bar, {\n        window: \"\",\n        dark: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_spacer), _createVNode(_component_v_icon, {\n          onClick: _cache[0] || (_cache[0] = $event => $options.toggleFullScreen()),\n          \"x-small\": $data.full\n        }, {\n          default: _withCtx(() => [_createTextVNode(\" mdi-checkbox-blank-outline \")]),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"x-small\"]), _createCommentVNode(\" <v-icon @click=\\\"cancelModal(on.closeDialog)\\\" >mdi-close</v-icon> \"), _createVNode(_component_v_icon, {\n          onClick: _cache[1] || (_cache[1] = $event => $options.close())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"mdi-close\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]) : _createCommentVNode(\"v-if\", true), _renderSlot(_ctx.$slots, \"body\", {\n        attrs: {},\n        on: {\n          openDialog: this.open,\n          closeDialog: this.close,\n          confirmDialog: this.confirm\n        },\n        closeDialog: $options.close\n      })]),\n      _: 3 /* FORWARDED */\n    })]),\n\n    _: 3 /* FORWARDED */\n  }, 16 /* FULL_PROPS */, [\"modelValue\", \"fullscreen\", \"width\"]);\n}","map":{"version":3,"names":["_createBlock","_component_v_dialog","_mergeProps","$options","dialog","$event","_toHandlers","toggleFullScreen","_ctx","bindProps","fullscreen","$data","full","width","modalWidth","activator","_withCtx","on","attrs","_renderSlot","$slots","_createCommentVNode","_createVNode","_component_v_card","$props","systembar","key","_component_v_system_bar","window","dark","_component_v_spacer","_component_v_icon","onClick","_cache","close","open","confirm","closeDialog"],"sources":["/Users/oguzhanbukcuoglu/Desktop/Projects/crm_template/packages/oobook/crm-base/vue/src/js/components/modals/Modal.vue"],"sourcesContent":["<template>\n\n    <v-dialog\n        v-model=\"dialog\"\n        v-on=\"{\n            toggleFullScreen: toggleFullScreen\n        }\"\n\n        v-bind=\"bindProps()\"\n        :fullscreen=\"full\"\n        :width=\"modalWidth\"\n    >\n\n        <template v-slot:activator=\"{ on, attrs }\">\n            <slot \n                name=\"activator\"\n                :attrs=\"{\n                    ...attrs\n                }\"\n                :on=\"{\n                    ...on\n                }\"\n                >\n                <!-- <v-btn\n                    color=\"primary\"\n                    dark\n                    class=\"mb-2\"\n                    v-bind=\"{attrs}\"\n                    v-on=\"on\"\n                    >\n                    {{ $tc('show') }}\n                </v-btn> -->\n            </slot>\n        </template>\n\n        <v-card>\n            <slot\n                v-if=\"systembar\"\n                name=\"systembar\"\n    \n                >\n                <v-system-bar\n                        window\n                        dark\n                    >\n                        <v-spacer></v-spacer>\n                        \n                        <v-icon \n                            @click=\"toggleFullScreen()\" \n                            :x-small=\"full\"\n                            >\n                            mdi-checkbox-blank-outline\n                        </v-icon>\n                        <!-- <v-icon @click=\"cancelModal(on.closeDialog)\" >mdi-close</v-icon> -->\n                        <v-icon @click=\"close()\" >mdi-close</v-icon>\n                </v-system-bar>\n            </slot>\n            \n            <slot \n                name=\"body\"\n                :attrs=\"{\n                }\"\n                :on=\"{\n                    openDialog: this.open,\n                    closeDialog: this.close,\n                    confirmDialog: this.confirm\n                }\"\n                :closeDialog=\"close\"\n                >\n            \n            </slot>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\nimport htmlClasses from '@/utils/htmlClasses'\n\nexport default {\n    props: {\n        value: {\n            type: Boolean\n        },\n        name: {\n            type: String,\n            default: \"Item\"\n        },\n        transition: {\n            type: String,\n            default: \"bottom\"\n        },\n\n        widthType: {\n            type: String,\n        },\n        systembar: {\n            type: Boolean,\n            default: false\n        },\n        fullscreen: {\n            type: Boolean,\n            default: false\n        }\n\n    },\n    data() {\n        return {\n            // dialog: this.value,\n            widths: {\n                sm: \"300px\",\n                md: \"500px\",\n                lg: \"750px\",\n            },\n            width: this.widthType,\n\n            modalClass: htmlClasses.modal,\n            firstFocusableEl: null,\n            lastFocusableEl: null,\n            \n            full: this.fullscreen,\n        }\n    },\n\n    computed: {\n        dialog: {\n            get () {\n                return this.value\n            },\n            set (value) {\n                __log('modal->dialog->setter', value)\n                this.$emit('input', value)\n            }\n        },\n        // full: {\n        //     get () {\n        //         return this.fullscreen\n        //         return this.fullScreen\n        //     },\n        //     set (value) {\n        //         // this.$emit('screenListener', this.full)\n        //     }\n        // },\n        togglePersistent() {\n            return this.persistent;\n        },\n\n        toggleScrollable() {\n            return this.scrollable;\n        },\n        modalWidth() {\n            return !!this.width ? this.widths[this.width] : null;\n        },\n    },\n\n    watch: {\n\n    },\n\n    methods: {\n        toggle() {\n            this.dialog = !this.dialog\n        },\n        close() {\n            this.dialog = false\n        },\n        open() {\n            this.dialog = true\n        },\n        confirm() {\n            this.dialog = false\n        },\n\n        attrs(attrs) {\n            __log(attrs)\n            return attrs;\n        },\n\n        toggleFullScreen() {\n            __log(this.full)\n            return this.full = !this.full;\n        },\n\n        screenListener(e){\n            // __log(e.target);\n            this.full = e.target.fullScreen\n        },\n    },\n    beforeDestroy: function () {\n\n    },\n    created() {\n        // setInterval((self) => {\n        //     __log(self.dialog)\n        // }, 1000, this)\n    }\n}\n</script>\n\n<style>\n\n</style>"],"mappings":";;;;;;;uBAEIA,YAAA,CAsEWC,mBAAA,EAtEXC,WAAA,CAsEW;gBArEEC,QAAA,CAAAC,MAAM;+DAAND,QAAA,CAAAC,MAAM,GAAAC,MAAA;KACfC,WAAA,CAEE;sBAFoCH,QAAA,CAAAI;MAI9BC,IAAA,CAAAC,SAAS;IAChBC,UAAU,EAAEC,KAAA,CAAAC,IAAI;IAChBC,KAAK,EAAEV,QAAA,CAAAW;;IAGSC,SAAS,EAAAC,QAAA,CACtB,CAkBO;MAnBmBC,EAAE;MAAEC;IAAK,OACnCC,WAAA,CAkBOX,IAAA,CAAAY,MAAA;MAhBFF,KAAK;WAA2BA;;MAGhCD,EAAE;WAA2BA;;OALlC,MAkBO,CATHI,mBAAA,kRAQY,C;sBAIpB,MAoCS,CApCTC,YAAA,CAoCSC,iBAAA;wBAnCL,MAoBO,CAnBGC,MAAA,CAAAC,SAAS,GADnBN,WAAA,CAoBOX,IAAA,CAAAY,MAAA;QAAAM,GAAA;MAAA,GApBP,MAoBO,CAfHJ,YAAA,CAceK,uBAAA;QAbPC,MAAM,EAAN,EAAM;QACNC,IAAI,EAAJ;;0BAEA,MAAqB,CAArBP,YAAA,CAAqBQ,mBAAA,GAErBR,YAAA,CAKSS,iBAAA;UAJJC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAA5B,MAAA,IAAEF,QAAA,CAAAI,gBAAgB;UACvB,SAAO,EAAEI,KAAA,CAAAC;;4BACT,MAEL,C,iBAFK,8BAEL,E;;wCACAS,mBAAA,wEAAyE,EACzEC,YAAA,CAA4CS,iBAAA;UAAnCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAA5B,MAAA,IAAEF,QAAA,CAAA+B,KAAK;;4BAAK,MAAS,C,iBAAT,WAAS,E;;;;;gDAI/Cf,WAAA,CAYOX,IAAA,CAAAY,MAAA;QAVFF,KAAK,EAAE,C,CACP;QACAD,EAAE;2BAAyCkB,IAAI;4BAAwCD,KAAK;8BAA0CE;;QAKtIC,WAAW,EAAElC,QAAA,CAAA+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}