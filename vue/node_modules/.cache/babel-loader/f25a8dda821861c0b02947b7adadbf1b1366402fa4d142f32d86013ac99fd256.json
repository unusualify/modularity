{"ast":null,"code":"import _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.object.from-entries.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport { mapGetters, mapState } from 'vuex';\nimport { FORM } from '@/store/mutations/index';\nimport ACTIONS from '@/store/actions';\nexport default {\n  // name: \"ue-form\",\n  props: {\n    // value: {\n    //     type: Object,\n    //     default: {}\n    // },\n    inputs: {\n      type: Array\n    },\n    async: {\n      type: Boolean,\n      \"default\": true\n    },\n    hasSubmit: {\n      type: Boolean,\n      \"default\": false\n    },\n    buttonFloat: {\n      type: String,\n      \"default\": 'right'\n    },\n    buttonPosition: {\n      type: String,\n      \"default\": 'bottom'\n    }\n  },\n  data: function data() {\n    return {\n      id: Math.ceil(Math.random() * 1000000) + \"-form\",\n      valid: false,\n      pickDate: false,\n      pickColor: false,\n      mask: '!XNNNNNNNN'\n    };\n  },\n  created: function created() {\n\n    // Object.fromEntries(this.inputs[1].extras.map(v => ([v,true])))\n\n    // console.log(this.inputs[2])\n  },\n  computed: _objectSpread(_objectSpread({\n    editedItem: {\n      get: function get() {\n        return this.$store.state.form.editedItem;\n      },\n      set: function set(value) {\n        __log('form->editedItem set', value);\n        // this.$store.commit(FORM.SET_EDITED_ITEM, value);\n      }\n    }\n  }, mapState({\n    loading: function loading(state) {\n      return state.form.loading;\n    },\n    errors: function errors(state) {\n      return state.form.errors;\n    }\n  })), mapGetters(['defaultItem'])),\n  methods: {\n    update: function update(key, value) {\n      __log('form->update', key, value);\n      // this.$emit('input', { ...this.value, [key]: value })\n    },\n    checkProp: function checkProp(object, prop) {\n      var def = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      return object[prop] !== 'undefined' ? object[prop] : def;\n    },\n    extraProps: function extraProps(props) {\n      return Array.isArray(props.extras) ? Object.fromEntries(props.extras.map(function (v) {\n        return [v, true];\n      })) : {};\n    },\n    swatchStyle: function swatchStyle(color) {\n      var pickColor = this.pickColor;\n      return {\n        backgroundColor: color,\n        cursor: 'pointer',\n        height: '30px',\n        width: '30px',\n        borderRadius: pickColor ? '50%' : '4px',\n        transition: 'border-radius 200ms ease-in-out'\n      };\n    },\n    saveForm: function saveForm() {\n      var _this = this;\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var errorCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var fields = {};\n      Object.keys(this.defaultItem).forEach(function (key, i) {\n        fields[key] = _this.$store.state.form.editedItem[key] == null || _this.defaultItem[key] != '' ? _this.defaultItem[key] : _this.$store.state.form.editedItem[key];\n      });\n      if (!!this.$store.state.form.editedItem.id) fields.id = this.$store.state.form.editedItem.id;\n      this.$store.commit(FORM.SET_EDITED_ITEM, fields);\n      this.$store.dispatch(ACTIONS.SAVE_FORM, {\n        item: null,\n        callback: callback,\n        errorCallback: errorCallback\n      });\n    },\n    submit: function submit() {\n      if (this.async) {\n        this.saveForm();\n      }\n\n      // this.$v.$touch()\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}