{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _mutations;\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n/**\n * Media Library\n *\n * Set options for the Media Library and all the medias attached into the form\n */\n\n// import Vue from 'vue'\nimport cloneDeep from 'lodash/cloneDeep';\nimport { MEDIA_LIBRARY } from '../mutations';\nimport ACTIONS from '@/store/actions';\nvar state = {\n  /**\n   * An object of all crops available for cropper component configuration\n   * @type {Object}\n   */\n  crops: window[process.env.JS_APP_NAME].STORE.medias.crops || {},\n  /**\n   * Display the file name of images\n   * @type {Object}\n   */\n  showFileName: window[process.env.JS_APP_NAME].STORE.medias.showFileName || false,\n  /**\n   * Define types available in medias library\n   * @type {Array.<string>}\n   */\n  types: window[process.env.JS_APP_NAME].STORE.medias.types || [],\n  /**\n   * Current type of media library\n   * @type {string}\n   */\n  type: 'image',\n  /**\n   * Connector is used to save media by usage (eg. cover, image, profile...)\n   * @type {string}\n   */\n  connector: null,\n  /**\n   * Define the max of medias that can be select from the media libray\n   * @type {number}\n   */\n  max: 0,\n  /**\n   * Define the maximum filesize allowed to attach in a field from the media library\n   * @type {number}\n   */\n  filesizeMax: 0,\n  /**\n   * Define the min image width allowed to attach in a field from the media library\n   * @type {number}\n   */\n  widthMin: 0,\n  /**\n   * Define the min image height allowed to attach in a field from the media library\n   * @type {number}\n   */\n  heightMin: 0,\n  /**\n   * Restrict the media library navigation between type\n   * @type {Boolean}\n   */\n  strict: true,\n  /**\n   * An object of selected medias by usage (connector)\n   * @type {Object.<string,Object>}\n   */\n  selected: window[process.env.JS_APP_NAME].STORE.medias.selected || {},\n  /**\n   * An object of configs\n   * @type {Object.<string,Object>}\n   */\n  config: window[process.env.JS_APP_NAME].STORE.medias.config || {\n    useWysiwyg: false,\n    wysiwygOptions: {}\n  },\n  /**\n   * An array of current uploading medias. When upload is ended, array is reset\n   * @type {Array}\n   */\n  loading: [],\n  /**\n   * The progress value of an upload. When upload is ended, this value is reset to 0.\n   * @type {number}\n   */\n  uploadProgress: 0,\n  /**\n   * An index used when mediaLibrary is open to replace a file\n   * @type {number}\n   */\n  indexToReplace: -1,\n  showModal: window[process.env.JS_APP_NAME].STORE.medias.openModal || false\n};\n\n// getters\nvar getters = {\n  mediasByBlockId: function mediasByBlockId(state) {\n    return function (id) {\n      var ids = Object.keys(state.selected).filter(function (key) {\n        return key.startsWith(\"blocks[\".concat(id, \"]\"));\n      });\n      var medias = {};\n      ids.forEach(function (id) {\n        return medias[id] = state.selected[id];\n      });\n      return medias;\n    };\n  }\n};\nvar mutations = (_mutations = {}, _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_TYPE_TOTAL, function (state, type) {\n  state.types = state.types.map(function (t) {\n    if (t.value === type.type) t.total = type.total;\n    return t;\n  });\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_REPLACE_INDEX, function (state, index) {\n  state.indexToReplace = index;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.INCREMENT_MEDIA_TYPE_TOTAL, function (state, type) {\n  state.types = state.types.map(function (t) {\n    if (t.value === type) t.total = t.total + 1;\n    return t;\n  });\n}), _defineProperty(_mutations, MEDIA_LIBRARY.DECREMENT_MEDIA_TYPE_TOTAL, function (state, type) {\n  state.types = state.types.map(function (t) {\n    if (t.value === type) t.total = t.total - 1;\n    return t;\n  });\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIAS, function (state, _ref) {\n  var mediaRole = _ref.mediaRole,\n    index = _ref.index,\n    media = _ref.media;\n  state.selected[mediaRole][index] = media;\n  // Vue.set(\n  //   state.selected[mediaRole],\n  //   index,\n  //   media\n  // )\n}), _defineProperty(_mutations, MEDIA_LIBRARY.SAVE_MEDIAS, function (state, medias) {\n  if (state.connector) {\n    var key = state.connector;\n    var existedSelectedConnector = state.selected[key] && state.selected[key].length;\n    if (existedSelectedConnector && state.indexToReplace > -1) {\n      // Replace mode\n      state.selected[key].splice(state.indexToReplace, 1, cloneDeep(medias[0]));\n    } else if (existedSelectedConnector) {\n      // Add mode\n      medias.forEach(function (media) {\n        state.selected[key].push(cloneDeep(media));\n      });\n    } else {\n      // Create mode\n      var newMedias = {};\n      newMedias[key] = medias;\n      state.selected = Object.assign({}, state.selected, newMedias);\n    }\n    state.indexToReplace = -1;\n  }\n}), _defineProperty(_mutations, MEDIA_LIBRARY.DESTROY_SPECIFIC_MEDIA, function (state, media) {\n  if (state.selected[media.name]) {\n    state.selected[media.name].splice(media.index, 1);\n    if (state.selected[media.name].length === 0) Vue[\"delete\"](state.selected, media.name);\n  }\n  state.connector = null;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.DESTROY_MEDIAS, function (state, connector) {\n  if (state.selected[connector]) Vue[\"delete\"](state.selected, connector);\n  state.connector = null;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.REORDER_MEDIAS, function (state, newValues) {\n  var newMedias = {};\n  newMedias[newValues.name] = newValues.medias;\n  state.selected = Object.assign({}, state.selected, newMedias);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.PROGRESS_UPLOAD_MEDIA, function (state, media) {\n  var mediaToUpdate = state.loading.filter(function (m) {\n    return m.id === media.id;\n  });\n  // Update existing form field\n  if (mediaToUpdate.length) {\n    mediaToUpdate[0].error = false;\n    mediaToUpdate[0].progress = media.progress;\n  } else {\n    state.loading.unshift({\n      id: media.id,\n      name: media.name,\n      progress: media.progress,\n      replacementId: media.replacementId,\n      isReplacement: media.isReplacement\n    });\n  }\n}), _defineProperty(_mutations, MEDIA_LIBRARY.PROGRESS_UPLOAD, function (state, uploadProgress) {\n  state.uploadProgress = uploadProgress;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.DONE_UPLOAD_MEDIA, function (state, media) {\n  state.loading.forEach(function (m, index) {\n    if (m.id === media.id) state.loading.splice(index, 1);\n  });\n}), _defineProperty(_mutations, MEDIA_LIBRARY.ERROR_UPLOAD_MEDIA, function (state, media) {\n  state.loading.forEach(function (m, index) {\n    if (m.id === media.id) {\n      state.loading[index].progress = 0;\n      state.loading[index].error = true;\n      state.loading[index].errorMessage = media.errorMessage;\n      // Vue.set(state.loading[index], 'progress', 0)\n      // Vue.set(state.loading[index], 'error', true)\n      // Vue.set(state.loading[index], 'errorMessage', media.errorMessage)\n    }\n  });\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_CONNECTOR, function (state, newValue) {\n  if (newValue && newValue !== '') state.connector = newValue;else state.connector = null;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_MODE, function (state, newValue) {\n  state.strict = newValue;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_TYPE, function (state, newValue) {\n  if (newValue && newValue !== '') state.type = newValue;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.RESET_MEDIA_TYPE, function (state) {\n  // __log(state)\n  state.type = state.types[0].value;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_MAX, function (state, newValue) {\n  state.max = Math.max(0, newValue);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_FILESIZE_MAX, function (state, newValue) {\n  state.filesizeMax = Math.max(0, newValue);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_WIDTH_MIN, function (state, newValue) {\n  state.widthMin = Math.max(0, newValue);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.UPDATE_MEDIA_HEIGHT_MIN, function (state, newValue) {\n  state.heightMin = Math.max(0, newValue);\n}), _defineProperty(_mutations, MEDIA_LIBRARY.SET_MEDIA_METADATAS, function (state, metadatas) {\n  var connector = metadatas.media.context;\n  var medias = state.selected[connector];\n  var newValue = metadatas.value;\n\n  // Save all the custom metadatas here (with or wthout localization)\n  function setMetatadas(mediaToModify) {\n    if (newValue.locale) {\n      // if multi language we will fill an object\n      if (!mediaToModify.metadatas.custom[newValue.id]) {\n        mediaToModify.metadatas.custom[newValue.id] = {};\n      }\n      mediaToModify.metadatas.custom[newValue.id][newValue.locale] = newValue.value;\n    } else {\n      mediaToModify.metadatas.custom[newValue.id] = newValue.value;\n    }\n    return mediaToModify;\n  }\n  if (metadatas.media.hasOwnProperty('index')) {\n    var media = setMetatadas(cloneDeep(medias[metadatas.media.index]));\n    medias[metadatas.media.index] = media;\n    //   Vue.set(medias, metadatas.media.index, media)\n  }\n}), _defineProperty(_mutations, MEDIA_LIBRARY.DESTROY_MEDIA_CONNECTOR, function (state) {\n  state.connector = null;\n}), _defineProperty(_mutations, MEDIA_LIBRARY.SET_MEDIA_CROP, function (state, crop) {\n  var key = crop.key;\n  var index = crop.index;\n  var media = state.selected[key][index];\n  function addCrop(mediaToModify) {\n    if (!mediaToModify.crops) mediaToModify.crops = {};\n\n    // save all the crop variants to the media\n    for (var variant in crop.values) {\n      var newValues = {};\n      newValues.name = crop.values[variant].name || variant;\n      newValues.x = crop.values[variant].x;\n      newValues.y = crop.values[variant].y;\n      newValues.width = crop.values[variant].width;\n      newValues.height = crop.values[variant].height;\n      mediaToModify.crops[variant] = newValues;\n    }\n    return mediaToModify;\n  }\n  var newMedia = addCrop(cloneDeep(media));\n  state.selected[key][index] = newMedia;\n  // Vue.set(state.selected[key], index, newMedia)\n}), _defineProperty(_mutations, MEDIA_LIBRARY.ADD_MEDIAS, function (state, _ref2) {\n  var medias = _ref2.medias;\n  state.selected = Object.assign({}, state.selected, medias);\n}), _mutations);\nvar actions = _defineProperty({}, ACTIONS.DUPLICATE_BLOCK, function (_ref3, _ref4) {\n  return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var commit, getters, block, id, medias, mediaIds, duplicates;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          commit = _ref3.commit, getters = _ref3.getters;\n          block = _ref4.block, id = _ref4.id;\n          // copy medias and update with the provided id\n          medias = _objectSpread({}, getters.mediasByBlockId(block.id));\n          mediaIds = Object.keys(medias);\n          duplicates = {};\n          mediaIds.forEach(function (mediaId) {\n            return duplicates[mediaId.replace(block.id, id)] = _toConsumableArray(medias[mediaId]);\n          });\n          commit(MEDIA_LIBRARY.ADD_MEDIAS, {\n            medias: duplicates\n          });\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }))();\n});\nexport default {\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"names":["cloneDeep","MEDIA_LIBRARY","ACTIONS","state","crops","window","process","env","JS_APP_NAME","STORE","medias","showFileName","types","type","connector","max","filesizeMax","widthMin","heightMin","strict","selected","config","useWysiwyg","wysiwygOptions","loading","uploadProgress","indexToReplace","showModal","openModal","getters","mediasByBlockId","id","ids","Object","keys","filter","key","startsWith","concat","forEach","mutations","_mutations","_defineProperty","UPDATE_MEDIA_TYPE_TOTAL","map","t","value","total","UPDATE_REPLACE_INDEX","index","INCREMENT_MEDIA_TYPE_TOTAL","DECREMENT_MEDIA_TYPE_TOTAL","UPDATE_MEDIAS","_ref","mediaRole","media","SAVE_MEDIAS","existedSelectedConnector","length","splice","push","newMedias","assign","DESTROY_SPECIFIC_MEDIA","name","Vue","DESTROY_MEDIAS","REORDER_MEDIAS","newValues","PROGRESS_UPLOAD_MEDIA","mediaToUpdate","m","error","progress","unshift","replacementId","isReplacement","PROGRESS_UPLOAD","DONE_UPLOAD_MEDIA","ERROR_UPLOAD_MEDIA","errorMessage","UPDATE_MEDIA_CONNECTOR","newValue","UPDATE_MEDIA_MODE","UPDATE_MEDIA_TYPE","RESET_MEDIA_TYPE","UPDATE_MEDIA_MAX","Math","UPDATE_MEDIA_FILESIZE_MAX","UPDATE_MEDIA_WIDTH_MIN","UPDATE_MEDIA_HEIGHT_MIN","SET_MEDIA_METADATAS","metadatas","context","setMetatadas","mediaToModify","locale","custom","hasOwnProperty","DESTROY_MEDIA_CONNECTOR","SET_MEDIA_CROP","crop","addCrop","variant","values","x","y","width","height","newMedia","ADD_MEDIAS","_ref2","actions","DUPLICATE_BLOCK","_ref3","_ref4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","commit","block","mediaIds","duplicates","wrap","_callee$","_context","prev","next","_objectSpread","mediaId","replace","_toConsumableArray","stop"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/store/modules/media-library.js"],"sourcesContent":["/**\n * Media Library\n *\n * Set options for the Media Library and all the medias attached into the form\n */\n\n// import Vue from 'vue'\nimport cloneDeep from 'lodash/cloneDeep'\nimport { MEDIA_LIBRARY } from '../mutations'\nimport ACTIONS from '@/store/actions'\n\nconst state = {\n  /**\n   * An object of all crops available for cropper component configuration\n   * @type {Object}\n   */\n  crops: window[process.env.JS_APP_NAME].STORE.medias.crops || {},\n  /**\n   * Display the file name of images\n   * @type {Object}\n   */\n  showFileName: window[process.env.JS_APP_NAME].STORE.medias.showFileName || false,\n  /**\n   * Define types available in medias library\n   * @type {Array.<string>}\n   */\n  types: window[process.env.JS_APP_NAME].STORE.medias.types || [],\n  /**\n   * Current type of media library\n   * @type {string}\n   */\n  type: 'image',\n  /**\n   * Connector is used to save media by usage (eg. cover, image, profile...)\n   * @type {string}\n   */\n  connector: null,\n  /**\n   * Define the max of medias that can be select from the media libray\n   * @type {number}\n   */\n  max: 0,\n  /**\n   * Define the maximum filesize allowed to attach in a field from the media library\n   * @type {number}\n   */\n  filesizeMax: 0,\n  /**\n   * Define the min image width allowed to attach in a field from the media library\n   * @type {number}\n   */\n  widthMin: 0,\n  /**\n   * Define the min image height allowed to attach in a field from the media library\n   * @type {number}\n   */\n  heightMin: 0,\n  /**\n   * Restrict the media library navigation between type\n   * @type {Boolean}\n   */\n  strict: true,\n  /**\n   * An object of selected medias by usage (connector)\n   * @type {Object.<string,Object>}\n   */\n  selected: window[process.env.JS_APP_NAME].STORE.medias.selected || {},\n  /**\n   * An object of configs\n   * @type {Object.<string,Object>}\n   */\n  config: window[process.env.JS_APP_NAME].STORE.medias.config || { useWysiwyg: false, wysiwygOptions: {} },\n  /**\n   * An array of current uploading medias. When upload is ended, array is reset\n   * @type {Array}\n   */\n  loading: [],\n  /**\n   * The progress value of an upload. When upload is ended, this value is reset to 0.\n   * @type {number}\n   */\n  uploadProgress: 0,\n  /**\n   * An index used when mediaLibrary is open to replace a file\n   * @type {number}\n   */\n  indexToReplace: -1,\n\n  showModal: window[process.env.JS_APP_NAME].STORE.medias.openModal || false\n}\n\n// getters\nconst getters = {\n  mediasByBlockId: (state) => (id) => {\n    const ids = Object.keys(state.selected).filter(key => key.startsWith(`blocks[${id}]`))\n    const medias = {}\n    ids.forEach(id => (medias[id] = state.selected[id]))\n    return medias\n  }\n}\n\nconst mutations = {\n  [MEDIA_LIBRARY.UPDATE_MEDIA_TYPE_TOTAL] (state, type) {\n    state.types = state.types.map(t => {\n      if (t.value === type.type) t.total = type.total\n      return t\n    })\n  },\n  [MEDIA_LIBRARY.UPDATE_REPLACE_INDEX] (state, index) {\n    state.indexToReplace = index\n  },\n  [MEDIA_LIBRARY.INCREMENT_MEDIA_TYPE_TOTAL] (state, type) {\n    state.types = state.types.map(t => {\n      if (t.value === type) t.total = t.total + 1\n      return t\n    })\n  },\n  [MEDIA_LIBRARY.DECREMENT_MEDIA_TYPE_TOTAL] (state, type) {\n    state.types = state.types.map(t => {\n      if (t.value === type) t.total = t.total - 1\n      return t\n    })\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIAS] (state, { mediaRole, index, media }) {\n    state.selected[mediaRole][index] = media\n    // Vue.set(\n    //   state.selected[mediaRole],\n    //   index,\n    //   media\n    // )\n  },\n  [MEDIA_LIBRARY.SAVE_MEDIAS] (state, medias) {\n    if (state.connector) {\n      const key = state.connector\n      const existedSelectedConnector = state.selected[key] && state.selected[key].length\n      if (existedSelectedConnector && state.indexToReplace > -1) {\n        // Replace mode\n        state.selected[key].splice(state.indexToReplace, 1, cloneDeep(medias[0]))\n      } else if (existedSelectedConnector) {\n        // Add mode\n        medias.forEach(function (media) {\n          state.selected[key].push(cloneDeep(media))\n        })\n      } else {\n        // Create mode\n        const newMedias = {}\n        newMedias[key] = medias\n        state.selected = Object.assign({}, state.selected, newMedias)\n      }\n\n      state.indexToReplace = -1\n    }\n  },\n  [MEDIA_LIBRARY.DESTROY_SPECIFIC_MEDIA] (state, media) {\n    if (state.selected[media.name]) {\n      state.selected[media.name].splice(media.index, 1)\n      if (state.selected[media.name].length === 0) Vue.delete(state.selected, media.name)\n    }\n\n    state.connector = null\n  },\n  [MEDIA_LIBRARY.DESTROY_MEDIAS] (state, connector) {\n    if (state.selected[connector]) Vue.delete(state.selected, connector)\n\n    state.connector = null\n  },\n  [MEDIA_LIBRARY.REORDER_MEDIAS] (state, newValues) {\n    const newMedias = {}\n    newMedias[newValues.name] = newValues.medias\n    state.selected = Object.assign({}, state.selected, newMedias)\n  },\n  [MEDIA_LIBRARY.PROGRESS_UPLOAD_MEDIA] (state, media) {\n    const mediaToUpdate = state.loading.filter((m) => m.id === media.id)\n    // Update existing form field\n    if (mediaToUpdate.length) {\n      mediaToUpdate[0].error = false\n      mediaToUpdate[0].progress = media.progress\n    } else {\n      state.loading.unshift({\n        id: media.id,\n        name: media.name,\n        progress: media.progress,\n        replacementId: media.replacementId,\n        isReplacement: media.isReplacement\n      })\n    }\n  },\n  [MEDIA_LIBRARY.PROGRESS_UPLOAD] (state, uploadProgress) {\n    state.uploadProgress = uploadProgress\n  },\n  [MEDIA_LIBRARY.DONE_UPLOAD_MEDIA] (state, media) {\n    state.loading.forEach(function (m, index) {\n      if (m.id === media.id) state.loading.splice(index, 1)\n    })\n  },\n  [MEDIA_LIBRARY.ERROR_UPLOAD_MEDIA] (state, media) {\n    state.loading.forEach(function (m, index) {\n      if (m.id === media.id) {\n        state.loading[index].progress = 0\n        state.loading[index].error = true\n        state.loading[index].errorMessage = media.errorMessage\n        // Vue.set(state.loading[index], 'progress', 0)\n        // Vue.set(state.loading[index], 'error', true)\n        // Vue.set(state.loading[index], 'errorMessage', media.errorMessage)\n      }\n    })\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_CONNECTOR] (state, newValue) {\n    if (newValue && newValue !== '') state.connector = newValue\n    else state.connector = null\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_MODE] (state, newValue) {\n    state.strict = newValue\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_TYPE] (state, newValue) {\n    if (newValue && newValue !== '') state.type = newValue\n  },\n  [MEDIA_LIBRARY.RESET_MEDIA_TYPE] (state) {\n    // __log(state)\n    state.type = state.types[0].value\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_MAX] (state, newValue) {\n    state.max = Math.max(0, newValue)\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_FILESIZE_MAX] (state, newValue) {\n    state.filesizeMax = Math.max(0, newValue)\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_WIDTH_MIN] (state, newValue) {\n    state.widthMin = Math.max(0, newValue)\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_HEIGHT_MIN] (state, newValue) {\n    state.heightMin = Math.max(0, newValue)\n  },\n  [MEDIA_LIBRARY.SET_MEDIA_METADATAS] (state, metadatas) {\n    const connector = metadatas.media.context\n    const medias = state.selected[connector]\n    const newValue = metadatas.value\n\n    // Save all the custom metadatas here (with or wthout localization)\n    function setMetatadas (mediaToModify) {\n      if (newValue.locale) {\n        // if multi language we will fill an object\n        if (!mediaToModify.metadatas.custom[newValue.id]) {\n          mediaToModify.metadatas.custom[newValue.id] = {}\n        }\n\n        mediaToModify.metadatas.custom[newValue.id][newValue.locale] = newValue.value\n      } else {\n        mediaToModify.metadatas.custom[newValue.id] = newValue.value\n      }\n\n      return mediaToModify\n    }\n\n    if (metadatas.media.hasOwnProperty('index')) {\n      const media = setMetatadas(cloneDeep(medias[metadatas.media.index]))\n      medias[metadatas.media.index] = media\n    //   Vue.set(medias, metadatas.media.index, media)\n    }\n  },\n  [MEDIA_LIBRARY.DESTROY_MEDIA_CONNECTOR] (state) {\n    state.connector = null\n  },\n  [MEDIA_LIBRARY.SET_MEDIA_CROP] (state, crop) {\n    const key = crop.key\n    const index = crop.index\n    const media = state.selected[key][index]\n\n    function addCrop (mediaToModify) {\n      if (!mediaToModify.crops) mediaToModify.crops = {}\n\n      // save all the crop variants to the media\n      for (const variant in crop.values) {\n        const newValues = {}\n        newValues.name = crop.values[variant].name || variant\n        newValues.x = crop.values[variant].x\n        newValues.y = crop.values[variant].y\n        newValues.width = crop.values[variant].width\n        newValues.height = crop.values[variant].height\n\n        mediaToModify.crops[variant] = newValues\n      }\n\n      return mediaToModify\n    }\n\n    const newMedia = addCrop(cloneDeep(media))\n\n    state.selected[key][index] = newMedia\n    // Vue.set(state.selected[key], index, newMedia)\n  },\n  [MEDIA_LIBRARY.ADD_MEDIAS] (state, { medias }) {\n    state.selected = Object.assign({}, state.selected, medias)\n  }\n}\n\nconst actions = {\n  async [ACTIONS.DUPLICATE_BLOCK] ({ commit, getters }, { block, id }) {\n    // copy medias and update with the provided id\n    const medias = { ...getters.mediasByBlockId(block.id) }\n    const mediaIds = Object.keys(medias)\n    const duplicates = {}\n    mediaIds.forEach(mediaId => (duplicates[mediaId.replace(block.id, id)] = [...medias[mediaId]]))\n\n    commit(MEDIA_LIBRARY.ADD_MEDIAS, { medias: duplicates })\n  }\n\n}\n\nexport default {\n  state,\n  getters,\n  mutations,\n  actions\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}