{"ast":null,"code":"import _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { renderSlot as _renderSlot, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, mergeProps as _mergeProps, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _this = this;\n  var _component_v_icon = _resolveComponent(\"v-icon\");\n  var _component_v_system_bar = _resolveComponent(\"v-system-bar\");\n  var _component_v_layout = _resolveComponent(\"v-layout\");\n  var _component_v_card = _resolveComponent(\"v-card\");\n  var _component_v_dialog = _resolveComponent(\"v-dialog\");\n  return _openBlock(), _createBlock(_component_v_dialog, _mergeProps({\n    modelValue: $data.dialog,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n      return $data.dialog = $event;\n    })\n  }, _objectSpread(_objectSpread({}, _ctx.bindProps()), {\n    toggleFullScreen: $options.toggleFullScreen\n  }), {\n    fullscreen: $data.full,\n    width: $options.modalWidth\n  }), {\n    activator: _withCtx(function (_ref) {\n      var props = _ref.props;\n      return [_renderSlot(_ctx.$slots, \"activator\", {\n        props: _objectSpread({}, props)\n      })];\n    }),\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_v_card, null, {\n        \"default\": _withCtx(function () {\n          return [$props.systembar ? _renderSlot(_ctx.$slots, \"systembar\", {\n            key: 0\n          }, function () {\n            return [_createVNode(_component_v_layout, {\n              style: {\n                \"height\": \"40px\"\n              }\n            }, {\n              \"default\": _withCtx(function () {\n                return [_createVNode(_component_v_system_bar, {\n                  dark: \"\"\n                }, {\n                  \"default\": _withCtx(function () {\n                    return [_createVNode(_component_v_icon, {\n                      onClick: _cache[0] || (_cache[0] = function ($event) {\n                        return $options.toggleFullScreen();\n                      }),\n                      \"x-small\": $data.full\n                    }, {\n                      \"default\": _withCtx(function () {\n                        return [_createTextVNode(\" mdi-checkbox-blank-outline \")];\n                      }),\n                      _: 1 /* STABLE */\n                    }, 8 /* PROPS */, [\"x-small\"]), _createCommentVNode(\" <v-icon @click=\\\"cancelModal(on.closeDialog)\\\" >mdi-close</v-icon> \"), _createVNode(_component_v_icon, {\n                      onClick: _cache[1] || (_cache[1] = function ($event) {\n                        return $options.close();\n                      })\n                    }, {\n                      \"default\": _withCtx(function () {\n                        return [_createTextVNode(\"mdi-close\")];\n                      }),\n                      _: 1 /* STABLE */\n                    })];\n                  }),\n\n                  _: 1 /* STABLE */\n                })];\n              }),\n\n              _: 1 /* STABLE */\n            })];\n          }) : _createCommentVNode(\"v-if\", true), _renderSlot(_ctx.$slots, \"body\", {\n            props: {\n              onOpen: _this.open,\n              onClose: _this.close,\n              onConfirm: _this.confirm\n            },\n            closeDialog: $options.close\n          })];\n        }),\n        _: 3 /* FORWARDED */\n      })];\n    }),\n\n    _: 3 /* FORWARDED */\n  }, 16 /* FULL_PROPS */, [\"modelValue\", \"fullscreen\", \"width\"]);\n}","map":{"version":3,"names":["_createBlock","_component_v_dialog","_mergeProps","$data","dialog","$event","_ctx","bindProps","$options","toggleFullScreen","fullscreen","full","width","modalWidth","activator","_withCtx","_ref","props","_renderSlot","$slots","_objectSpread","_createVNode","_component_v_card","$props","systembar","key","_component_v_layout","style","_component_v_system_bar","dark","_component_v_icon","onClick","_cache","_createCommentVNode","close","open","confirm","closeDialog"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/modals/Modal.vue"],"sourcesContent":["<template>\n\n    <v-dialog\n        v-model=\"dialog\"\n        v-bind=\"{\n            ...bindProps(),\n            ...{\n                toggleFullScreen: toggleFullScreen\n            }\n        }\"\n        :fullscreen=\"full\"\n        :width=\"modalWidth\"\n    >\n\n        <template v-slot:activator=\"{ props }\">\n            <slot\n                name=\"activator\"\n                :props=\"{\n                    ...props\n                }\"\n                >\n\n            </slot>\n        </template>\n\n        <v-card>\n            <slot v-if=\"systembar\" name=\"systembar\">\n                <v-layout style=\"height: 40px\">\n                    <v-system-bar dark>\n                        <v-icon @click=\"toggleFullScreen()\" :x-small=\"full\">\n                            mdi-checkbox-blank-outline\n                        </v-icon>\n                        <!-- <v-icon @click=\"cancelModal(on.closeDialog)\" >mdi-close</v-icon> -->\n                        <v-icon @click=\"close()\">mdi-close</v-icon>\n                    </v-system-bar>\n                </v-layout>\n            </slot>\n            <slot\n                name=\"body\"\n                :props=\"{\n                    onOpen: this.open,\n                    onClose: this.close,\n                    onConfirm: this.confirm\n                }\"\n\n                :closeDialog=\"close\"\n                >\n\n            </slot>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\nimport htmlClasses from '@/utils/htmlClasses'\n\nexport default {\n  props: {\n    value: {\n      type: Boolean\n    },\n    name: {\n      type: String,\n      default: 'Item'\n    },\n    transition: {\n      type: String,\n      default: 'bottom'\n    },\n\n    widthType: {\n      type: String\n    },\n    systembar: {\n      type: Boolean,\n      default: false\n    },\n    fullscreen: {\n      type: Boolean,\n      default: false\n    }\n\n  },\n  data () {\n    return {\n      // dialog: this.value,\n      widths: {\n        sm: '300px',\n        md: '500px',\n        lg: '750px'\n      },\n      width: this.widthType,\n\n      modalClass: htmlClasses.modal,\n      firstFocusableEl: null,\n      lastFocusableEl: null,\n\n      full: this.fullscreen,\n      dialog: false\n    }\n  },\n\n  computed: {\n    // dialog: {\n    //   get () {\n    //     return this.value\n    //   },\n    //   set (value) {\n    //     this.$emit('input', value)\n    //   }\n    // },\n    // full: {\n    //     get () {\n    //         return this.fullscreen\n    //         return this.fullScreen\n    //     },\n    //     set (value) {\n    //         // this.$emit('screenListener', this.full)\n    //     }\n    // },\n    togglePersistent () {\n      return this.persistent\n    },\n\n    toggleScrollable () {\n      return this.scrollable\n    },\n    modalWidth () {\n      return this.width ? this.widths[this.width] : null\n    }\n  },\n\n  watch: {\n    dialog (newVal, oldVal) {\n      __log('modal vue watcher dialog', newVal, oldVal)\n    }\n  },\n\n  methods: {\n    toggle () {\n      this.dialog = !this.dialog\n    },\n    close () {\n      this.dialog = false\n    },\n    open () {\n      this.dialog = true\n    },\n    confirm () {\n      this.dialog = false\n    },\n    attrs (attrs) {\n      return attrs\n    },\n    toggleFullScreen () {\n      return this.full = !this.full\n    },\n    screenListener (e) {\n      this.full = e.target.fullScreen\n    }\n  },\n  beforeUnmount: function () {\n\n  },\n  created () {\n    // setInterval((self) => {\n    //     __log(self.dialog)\n    // }, 1000, this)\n  }\n}\n</script>\n\n<style>\n\n</style>\n"],"mappings":";;;;;;;;;uBAEIA,YAAA,CAgDWC,mBAAA,EAhDXC,WAAA,CAgDW;gBA/CEC,KAAA,CAAAC,MAAM;;aAAND,KAAA,CAAAC,MAAM,GAAAC,MAAA;IAAA;qCACUC,IAAA,CAAAC,SAAS,K;sBAAuDC,QAAA,CAAAC;;IAMxFC,UAAU,EAAEP,KAAA,CAAAQ,IAAI;IAChBC,KAAK,EAAEJ,QAAA,CAAAK;;IAGSC,SAAS,EAAAC,QAAA,CACtB,UAAAC,IAAA;MAAA,IAD0BC,KAAK,GAAAD,IAAA,CAALC,KAAK;MAAA,QAC/BC,WAAA,CAOOZ,IAAA,CAAAa,MAAA;QALFF,KAAK,EAAAG,aAAA,KAA2BH,KAAK;;;wBAQ9C;MAAA,OAwBS,CAxBTI,YAAA,CAwBSC,iBAAA;4BAvBL;UAAA,OAUO,CAVKC,MAAA,CAAAC,SAAS,GAArBN,WAAA,CAUOZ,IAAA,CAAAa,MAAA;YAAAM,GAAA;UAAA,GAVP;YAAA,OAUO,CATHJ,YAAA,CAQWK,mBAAA;cARDC,KAAoB,EAApB;gBAAA;cAAA;YAAoB;kCAC1B;gBAAA,OAMe,CANfN,YAAA,CAMeO,uBAAA;kBANDC,IAAI,EAAJ;gBAAI;sCACd;oBAAA,OAES,CAFTR,YAAA,CAESS,iBAAA;sBAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,gBAAA3B,MAAA;wBAAA,OAAEG,QAAA,CAAAC,gBAAgB;sBAAA;sBAAK,SAAO,EAAEN,KAAA,CAAAQ;;0CAAM;wBAAA,OAEpD,C,iBAFoD,8BAEpD,E;;;oDACAsB,mBAAA,wEAAyE,EACzEZ,YAAA,CAA2CS,iBAAA;sBAAlCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,gBAAA3B,MAAA;wBAAA,OAAEG,QAAA,CAAA0B,KAAK;sBAAA;;0CAAI;wBAAA,OAAS,C,iBAAT,WAAS,E;;;;;;;;;;;;kDAI9ChB,WAAA,CAWOZ,IAAA,CAAAa,MAAA;YATFF,KAAK;4BAAqCkB,IAAI;6BAAoCD,KAAK;+BAAsCE;;YAM7HC,WAAW,EAAE7B,QAAA,CAAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}