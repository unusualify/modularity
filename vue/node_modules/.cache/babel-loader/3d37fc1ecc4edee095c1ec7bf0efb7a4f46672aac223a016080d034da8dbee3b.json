{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-6d865e3a\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  \"class\": \"uploader\"\n};\nvar _hoisted_2 = {\n  \"class\": \"uploader__dropzone\",\n  ref: \"uploaderDropzone\"\n};\nvar _hoisted_3 = {\n  \"class\": \"uploader__dropzone--desktop\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n    \"class\": \"button\",\n    ref: \"uploaderBrowseButton\"\n  }, _toDisplayString(_ctx.$trans('uploader.upload-btn-label', 'Add new')), 513 /* TEXT, NEED_PATCH */), _createElementVNode(\"div\", _hoisted_3, _toDisplayString(_ctx.$trans('uploader.dropzone-text', 'or drop new files here')), 1 /* TEXT */)], 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_ctx","$trans","_hoisted_3","_toDisplayString"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/Uploader.vue"],"sourcesContent":["<template>\n  <div class=\"uploader\">\n    <div class=\"uploader__dropzone\" ref=\"uploaderDropzone\">\n      <div class=\"button\" ref=\"uploaderBrowseButton\">{{ $trans('uploader.upload-btn-label', 'Add new') }}</div>\n      <div class=\"uploader__dropzone--desktop\">{{ $trans('uploader.dropzone-text', 'or drop new files here') }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { MEDIA_LIBRARY } from '@/store/mutations'\n  import qq from 'fine-uploader/lib/dnd'\n  import FineUploaderS3 from 'fine-uploader-wrappers/s3'\n  import FineUploaderAzure from 'fine-uploader-wrappers/azure'\n  import FineUploaderTraditional from 'fine-uploader-wrappers/traditional'\n  import sanitizeFilename from '@/utils/sanitizeFilename.js'\n\n  export default {\n    name: 'A17Uploader',\n    props: {\n      type: {\n        type: Object,\n        required: true\n      }\n    },\n    data: function () {\n      return {\n        loadingMedias: []\n      }\n    },\n    computed: {\n      uploaderConfig: function () {\n        return this.type.uploaderConfig\n      },\n      uploaderValidation: function () {\n        const extensions = this.uploaderConfig.allowedExtensions\n        return {\n          allowedExtensions: extensions,\n          acceptFiles: '.' + extensions.join(', .'),\n          stopOnFirstInvalidFile: false\n        }\n      }\n    },\n    methods: {\n      initUploader: function () {\n        const buttonEl = this.$refs.uploaderBrowseButton\n        const sharedConfig = {\n          debug: true,\n          maxConnections: 5,\n          button: buttonEl,\n          retry: {\n            enableAuto: false\n          },\n          callbacks: {\n            onSubmit: this._onSubmitCallback.bind(this),\n            onProgress: this._onProgressCallback.bind(this),\n            onError: this._onErrorCallback.bind(this),\n            onComplete: this._onCompleteCallback.bind(this),\n            onAllComplete: this._onAllCompleteCallback.bind(this),\n            onStatusChange: this._onStatusChangeCallback.bind(this),\n            onTotalProgress: this._onTotalProgressCallback.bind(this)\n          },\n          text: {\n            fileInputTitle: 'Browse...'\n          },\n          messages: {\n            // Todo: need to translate this in uploaderConfig\n            retryFailTooManyItemsError: 'Retry failed - you have reached your file limit.',\n            sizeError: '{file} is too large, maximum file size is {sizeLimit}.',\n            tooManyItemsError: 'Too many items ({netItems}) would be uploaded. Item limit is {itemLimit}.',\n            typeError: '{file} has an invalid extension. Valid extension(s): {extensions}.'\n          }\n        }\n\n        this._uploader = this.uploaderConfig.endpointType === 's3'\n          ? new FineUploaderS3({\n            options: {\n              ...sharedConfig,\n              validation: {\n                ...this.uploaderValidation\n              },\n              objectProperties: {\n                key: id => {\n                  return this.unique_folder_name + '/' + sanitizeFilename(this._uploader.methods.getName(id))\n                },\n                region: this.uploaderConfig.endpointRegion,\n                bucket: this.uploaderConfig.endpointBucket,\n                acl: this.uploaderConfig.acl\n              },\n              request: {\n                endpoint: this.uploaderConfig.endpoint,\n                accessKey: this.uploaderConfig.accessKey\n              },\n              signature: {\n                endpoint: this.uploaderConfig.signatureEndpoint,\n                version: 4,\n                customHeaders: {\n                  'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n                }\n              },\n              uploadSuccess: {\n                endpoint: this.uploaderConfig.successEndpoint,\n                customHeaders: {\n                  'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n                }\n              }\n            }\n          })\n          : this.uploaderConfig.endpointType === 'azure'\n            ? new FineUploaderAzure({\n              options: {\n                ...sharedConfig,\n                validation: {\n                  ...this.uploaderValidation\n                },\n                cors: {\n                  expected: true,\n                  sendCredentials: true\n                },\n                blobProperties: {\n                  name: id => {\n                    return new Promise((resolve) => {\n                      resolve(this.unique_folder_name + '/' + sanitizeFilename(this._uploader.methods.getName(id)))\n                    })\n                  }\n                },\n                request: {\n                  endpoint: this.uploaderConfig.endpoint\n                },\n                signature: {\n                  endpoint: this.uploaderConfig.signatureEndpoint,\n                  version: 4,\n                  customHeaders: {\n                    'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n                  }\n                },\n                uploadSuccess: {\n                  endpoint: this.uploaderConfig.successEndpoint,\n                  customHeaders: {\n                    'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n                  }\n                }\n              }\n            })\n            : new FineUploaderTraditional({\n              options: {\n                ...sharedConfig,\n                validation: {\n                  ...this.uploaderValidation,\n                  sizeLimit: this.uploaderConfig.filesizeLimit * 1048576 // mb to bytes\n                },\n                request: {\n                  endpoint: this.uploaderConfig.endpoint,\n                  customHeaders: {\n                    'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n                  }\n                }\n              }\n            })\n      },\n      replaceMedia: function (id) {\n        this.media_to_replace_id = id\n        const qqinputs = this.$refs.uploaderBrowseButton.querySelectorAll('[name = \"qqfile\"]')\n        qqinputs[Array.from(qqinputs).length - 1].click()\n      },\n      loadingProgress: function (media) {\n        this.$store.commit(MEDIA_LIBRARY.PROGRESS_UPLOAD_MEDIA, media)\n      },\n      loadingFinished: function (loadingMedia, savedMedia) {\n        // add the saved image to the main image list\n        this.$emit('loaded', savedMedia)\n        this.$store.commit(MEDIA_LIBRARY.DONE_UPLOAD_MEDIA, loadingMedia)\n      },\n      loadingError: function (media) {\n        this.$store.commit(MEDIA_LIBRARY.ERROR_UPLOAD_MEDIA, media)\n      },\n      uploadProgress: function (uploadProgress) {\n        this.$store.commit(MEDIA_LIBRARY.PROGRESS_UPLOAD, uploadProgress)\n      },\n      _onCompleteCallback (id, name, responseJSON, xhr) {\n        const index = this.loadingMedias.findIndex((m) => m.id === this._uploader.methods.getUuid(id))\n\n        if (responseJSON.success) {\n          this.loadingFinished(this.loadingMedias[index], responseJSON.media)\n        } else {\n          this.loadingError(this.loadingMedias[index])\n        }\n      },\n      _onAllCompleteCallback (succeeded, failed) {\n        // reset folder name for next upload session\n        this.unique_folder_name = null\n        this.uploadProgress(0)\n      },\n      _onSubmitCallback (id, name) {\n        this.$emit('clear')\n        // each upload session will add upload files with original filenames in a folder named using a uuid\n        this.unique_folder_name = this.unique_folder_name || (this.uploaderConfig.endpointRoot + qq.getUniqueId())\n        this._uploader.methods.setParams({\n          unique_folder_name: this.unique_folder_name,\n          media_to_replace_id: this.media_to_replace_id\n        }, id)\n\n        // determine the image dimensions and add it to params sent on upload success\n        const imageUrl = URL.createObjectURL(this._uploader.methods.getFile(id))\n        const img = new Image()\n\n        img.onload = () => {\n          this._uploader.methods.setParams({\n            width: img.width,\n            height: img.height,\n            unique_folder_name: this.unique_folder_name,\n            media_to_replace_id: this.media_to_replace_id\n          }, id)\n          this.media_to_replace_id = null\n        }\n\n        img.src = imageUrl\n\n        const media = {\n          id: this._uploader.methods.getUuid(id),\n          name: sanitizeFilename(name),\n          progress: 0,\n          error: false,\n          errorMessage: null,\n          isReplacement: !!this.media_to_replace_id,\n          replacementId: this.media_to_replace_id\n        }\n\n        if (this.type.value === 'file') {\n          this.media_to_replace_id = null\n        }\n\n        this.loadingMedias.push(media)\n        this.loadingProgress(media)\n      },\n      _onProgressCallback (id, name, uploadedBytes, totalBytes) {\n        const index = this.loadingMedias.findIndex((m) => m.id === this._uploader.methods.getUuid(id))\n\n        if (index >= 0) {\n          const media = this.loadingMedias[index]\n          media.progress = uploadedBytes / totalBytes * 100 || 0\n          media.error = false\n          this.loadingProgress(media)\n        }\n      },\n      _onErrorCallback (id, name, errorReason, xhr) {\n        const index = id ? this.loadingMedias.findIndex((m) => m.id === this._uploader.methods.getUuid(id)) : -1\n\n        if (index >= 0) {\n          this.loadingMedias[index].errorMessage = errorReason\n          this.loadingError(this.loadingMedias[index])\n        } else {\n          const media = {\n            id: id ? this._uploader.methods.getUuid(id) : Math.floor(Math.random() * 1000),\n            name: sanitizeFilename(name),\n            progress: 0,\n            error: true,\n            errorMessage: errorReason\n          }\n\n          this.loadingMedias.push(media)\n          this.loadingProgress(media)\n          this.loadingError(this.loadingMedias[this.loadingMedias.length - 1])\n        }\n      },\n      _onStatusChangeCallback (id, oldStatus, newStatus) {\n        if (newStatus === 'retrying upload') {\n          const index = this.loadingMedias.findIndex(function (m) {\n            return m.id === id\n          })\n\n          if (index >= 0) {\n            const media = this.loadingMedias[index]\n            media.progress = 0\n            media.error = false\n            this.loadingProgress(media)\n          }\n        }\n      },\n      _onTotalProgressCallback (totalUploadedBytes, totalBytes) {\n        const uploadProgress = Math.floor(totalUploadedBytes / totalBytes * 100)\n        this.uploadProgress(uploadProgress)\n      },\n      _onDropError (errorCode, errorData) {\n        console.error(errorCode, errorData)\n      },\n      _onProcessingDroppedFilesComplete (files) {\n        this._uploader.methods.addFiles(files)\n      }\n    },\n    watch: {\n      type: function () {\n        if (this._uploader) {\n          this.initUploader()\n        }\n      }\n    },\n    mounted () {\n      // Init uploader\n      this.initUploader()\n\n      // Init dropzone\n      const dropzoneEl = this.$refs.uploaderDropzone\n      this._qqDropzone && this._qqDropzone.dispose()\n      this._qqDropzone = new qq.DragAndDrop({\n        dropZoneElements: [dropzoneEl],\n        allowMultipleItems: true,\n        callbacks: {\n          dropError: this._onDropError.bind(this),\n          processingDroppedFilesComplete: this._onProcessingDroppedFilesComplete.bind(this)\n        }\n      })\n    },\n    beforeDestroy () {\n      this._qqDropzone && this._qqDropzone.dispose()\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n\n  $height_small_btn: 35px;\n\n  .uploader {\n    margin: 10px;\n  }\n\n  .uploader__dropzone {\n    border: 1px dashed $color__border--hover;\n    text-align: center;\n    padding: 26px 0;\n    color: $color__text--light;\n\n    .button {\n      @include btn-reset;\n      display: inline-block;\n      height: $height_small_btn;\n      margin-right: 10px;\n      line-height: $height_small_btn - 2px;\n      border-radius: calc($height_small_btn / 2);\n      background-color: transparent;\n      border: 1px solid $color__border--hover;\n      color: $color__text--light;\n      padding: 0 20px;\n      text-align: center;\n      transition: color .2s linear, border-color .2s linear, background-color .2s linear;\n\n      &.qq-upload-button-hover,\n      &:hover {\n        border-color: $color__text;\n        color: $color__text;\n      }\n\n      &.qq-upload-button-focus,\n      &:focus {\n        border-color: $color__text;\n        color: $color__text;\n      }\n\n      &:disabled {\n        opacity: .5;\n        pointer-events: none;\n      }\n    }\n  }\n\n  .uploader__dropzone--desktop {\n    display: inline-block;\n    vertical-align: top;\n    margin-top: 8px;\n    @include breakpoint(small-) {\n      display: none;\n    }\n  }\n</style>\n"],"mappings":";;;;;EACO,SAAM;AAAU;;EACd,SAAM,oBAAoB;EAACA,GAAG,EAAC;;;EAE7B,SAAM;AAA6B;;uBAH5CC,mBAAA,CAKM,OALNC,UAKM,GAJJC,mBAAA,CAGM,OAHNC,UAGM,GAFJD,mBAAA,CAAyG;IAApG,SAAM,QAAQ;IAACH,GAAG,EAAC;sBAA0BK,IAAA,CAAAC,MAAM,wEACxDH,mBAAA,CAA+G,OAA/GI,UAA+G,EAAAC,gBAAA,CAAnEH,IAAA,CAAAC,MAAM,qE"},"metadata":{},"sourceType":"module","externalDependencies":[]}