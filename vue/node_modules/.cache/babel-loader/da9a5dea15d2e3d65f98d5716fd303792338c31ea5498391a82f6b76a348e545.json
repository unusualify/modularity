{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_v_spacer = _resolveComponent(\"v-spacer\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(\"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, createCommentVNode as _createCommentVNode, mergeProps as _mergeProps, withCtx as _withCtx, toHandlers as _toHandlers, createVNode as _createVNode, createElementVNode as _createElementVNode, resolveDirective as _resolveDirective, withDirectives as _withDirectives, renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withModifiers as _withModifiers } from \\\"vue\\\" export function render(_ctx, _cache, $props, $setup, $data, $options) { const _component_ue_input_text = _resolveComponent(\\\"ue-input-text\\\") const _component_v_text_field = _resolveComponent(\\\"v-text-field\\\") const _component_ue_input_switch = _resolveComponent(\\\"ue-input-switch\\\") const _component_v_switch = _resolveComponent(\\\"v-switch\\\") const _component_ue_input_checkbox = _resolveComponent(\\\"ue-input-checkbox\\\") const _component_v_checkbox = _resolveComponent(\\\"v-checkbox\\\") const _component_ue_input_radio = _resolveComponent(\\\"ue-input-radio\\\") const _component_v_radio = _resolveComponent(\\\"v-radio\\\") const _component_v_radio_group = _resolveComponent(\\\"v-radio-group\\\") const _component_ue_input_select = _resolveComponent(\\\"ue-input-select\\\") const _component_v_select = _resolveComponent(\\\"v-select\\\") const _component_ue_input_file = _resolveComponent(\\\"ue-input-file\\\") const _component_v_file_input = _resolveComponent(\\\"v-file-input\\\") const _component_ue_input_range = _resolveComponent(\\\"ue-input-range\\\") const _component_v_range_slider = _resolveComponent(\\\"v-range-slider\\\") const _component_ue_date = _resolveComponent(\\\"ue-date\\\") const _component_v_date_picker = _resolveComponent(\\\"v-date-picker\\\") const _component_v_menu = _resolveComponent(\\\"v-menu\\\") const _component_v_color_picker = _resolveComponent(\\\"v-color-picker\\\") const _component_v_card_text = _resolveComponent(\\\"v-card-text\\\") const _component_v_card = _resolveComponent(\\\"v-card\\\") const _component_v_otp_input = _resolveComponent(\\\"v-otp-input\\\") const _component_v_col = _resolveComponent(\\\"v-col\\\") const _component_v_row = _resolveComponent(\\\"v-row\\\") const _component_v_container = _resolveComponent(\\\"v-container\\\") const _component_v_divider = _resolveComponent(\\\"v-divider\\\") const _component_ue_btn = _resolveComponent(\\\"ue-btn\\\") const _component_v_form = _resolveComponent(\\\"v-form\\\") const _directive_mask = _resolveDirective(\\\"mask\\\") return (_openBlock(), _createBlock(_component_v_form, { modelValue: $data.valid, \\\"onUpdate:modelValue\\\": _cache[4] || (_cache[4] = $event => (($data.valid) = $event)), onSubmit: _withModifiers($options.submit, [\\\"prevent\\\"]), id: $data.id }, { default: _withCtx(() => [ _createVNode(_component_v_container, null, { default: _withCtx(() => [ _createVNode(_component_v_row, null, { default: _withCtx(() => [ (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.$store.state.form.inputs, (input, i) => { return (_openBlock(), _createBlock(_component_v_col, { key: i, index: input, cols: input.cols, md: input.md, sm: input.sm }, { default: _withCtx(() => [ (input.type=='text') ? (_openBlock(), _createBlock(_component_ue_input_text, { key: 0, modelValue: $options.editedItem[input.name], \\\"onUpdate:modelValue\\\": $event => (($options.editedItem[input.name]) = $event), attributes: input }, null, 8 /* PROPS */, [\\\"modelValue\\\", \\\"onUpdate:modelValue\\\", \\\"attributes\\\"])) : _createCommentVNode(\\\"v-if\\\", true), (input.type=='text1') ? (_openBlock(), _createBlock(_component_v_text_field, _mergeProps({ key: 1, value: _ctx.value[input.name], onInput: $event => ($options.update(input.name, $event)), label: input.title }, $options.extraProps(input), { \\\"error-messages\\\": _ctx.errors[input.name] }), null, 16 /* FULL_PROPS */, [\\\"value\\\", \\\"onInput\\\", \\\"label\\\", \\\"error-messages\\\"])) : (['switch','boolean'].indexOf(input.type) +1) ? (_openBlock(), _createBlock(_component_ue_input_switch, { key: 2, modelValue: $options.editedItem[input.name], \\\"onUpdate:modelValue\\\": $event => (($options.editedItem[input.name]) = $event), attributes: input }, null, 8 /* PROPS */, [\\\"modelValue\\\", \\\"onUpdate:modelValue\\\", \\\"attributes\\\"])) : (['switch1','boolean1'].indexOf(input.type) +1) ? (_openBlock(), _createBlock(_component_v_switch, _mergeProps({ key: 3, value: _ctx.value[input.name], label: input.title, \\\"false-value\\\": $options.checkProp(input, 'falseValue', false), \\\"true-value\\\": $options.checkProp(input, 'trueValue', true), \\\"append-icon\\\": $options.checkProp(input, 'appendIcon'), \\\"append-outer-icon\\\": $options.checkProp(input, 'appendOuterIcon'), \\\"background-color\\\": $options.checkProp(input, 'backgroundColor'), \\\"clear-icon\\\": $options.checkProp(input, 'clearIcon'), color: $options.checkProp(input, 'color'), \\\"prepend-icon\\\": $options.checkProp(input, 'prependIcon'), onChange: $event => ($options.update(input.name, $event)) }, $options.extraProps(input), { \\\"error-messages\\\": _ctx.errors[input.name] }), null, 16 /* FULL_PROPS */, [\\\"value\\\", \\\"label\\\", \\\"false-value\\\", \\\"true-value\\\", \\\"append-icon\\\", \\\"append-outer-icon\\\", \\\"background-color\\\", \\\"clear-icon\\\", \\\"color\\\", \\\"prepend-icon\\\", \\\"onChange\\\", \\\"error-messages\\\"])) : (['checkbox'].indexOf(input.type) +1) ? (_openBlock(), _createBlock(_component_ue_input_checkbox, { key: 4, modelValue: $options.editedItem[input.name], \\\"onUpdate:modelValue\\\": $event => (($options.editedItem[input.name]) = $event), attributes: input }, null, 8 /* PROPS */, [\\\"modelValue\\\", \\\"onUpdate:modelValue\\\", \\\"attributes\\\"])) : (['checkbox1'].indexOf(input.type) +1) ? (_openBlock(), _createBlock(_component_v_checkbox, _mergeProps({ key: 5, \\\"input-value\\\": _ctx.value[input.name], label: input.title, \\\"false-value\\\": false, color: $options.checkProp(input, 'color', 'info'), \\\"append-icon\\\": $options.checkProp(input, 'appendIcon'), \\\"prepend-icon\\\": $options.checkProp(input, 'prependIcon'), \\\"on-icon\\\": $options.checkProp(input, 'onIcon'), \\\"off-icon\\\": $options.checkProp(input, 'offIcon'), onChange: $event => ($options.update(input.name, $event)) }, $options.extraProps(input), { \\\"error-messages\\\": _ctx.errors[input.name] }), null, 16 /* FULL_PROPS */, [\\\"input-value\\\", \\\"label\\\", \\\"color\\\", \\\"append-icon\\\", \\\"prepend-icon\\\", \\\"on-icon\\\", \\\"off-icon\\\", \\\"onChange\\\", \\\"error-messages\\\"])) : (['radio', 'enum'].indexOf(input.type)+1) ? (_openBlock(), _createBlock(_component_ue_input_radio, { key: 6, modelValue: $options.editedItem[input.name], \\\"onUpdate:modelValue\\\": $event => (($options.editedItem[input.name]) = $event), attributes: input }, null, 8 /* PROPS */, [\\\"modelValue\\\", \\\"onUpdate:modelValue\\\", \\\"attributes\\\"])) : (['radio1', 'enum1'].indexOf(input.type)+1) ? (_openBlock(), _createBlock(_component_v_radio_group, _mergeProps({ key: 7, value: _ctx.value[input.name], \\\"active-class\\\": $options.checkProp(input, 'activeClass', ''), \\\"append-icon\\\": $options.checkProp(input, 'appendIcon'), \\\"prepend-icon\\\": $options.checkProp(input, 'prependIcon'), \\\"background-color\\\": $options.checkProp(input, 'backgroundColor'), onChange: $event => ($options.update(input.name, $event)) }, $options.extraProps(input), { \\\"error-messages\\\": _ctx.errors[input.name] }), { default: _withCtx(() => [ (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(input.options, (option, n) => { return (_openBlock(), _createBlock(_component_v_radio, _mergeProps({ value: option.value, key: n, label: $options.checkProp(option, 'label', option.value), color: $options.checkProp(option, 'color', 'info'), id: $options.checkProp(option, 'id', `option${n}`), \\\"on-icon\\\": $options.checkProp(option, 'onIcon', '$radioOn'), \\\"off-icon\\\": $options.checkProp(option, 'offIcon', '$radioOff') }, $options.extraProps(option)), null, 16 /* FULL_PROPS */, [\\\"value\\\", \\\"label\\\", \\\"color\\\", \\\"id\\\", \\\"on-icon\\\", \\\"off-icon\\\"])) }), 128 /* KEYED_FRAGMENT */)) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"value\\\", \\\"active-class\\\", \\\"append-icon\\\", \\\"prepend-icon\\\", \\\"background-color\\\", \\\"onChange\\\", \\\"error-messages\\\"])) : (['select'].indexOf(input.type)+1) ? (_openBlock(), _createBlock(_component_ue_input_select, { key: 8, modelValue: $options.editedItem[input.name], \\\"onUpdate:modelValue\\\": $event => (($options.editedItem[input.name]) = $event), attributes: input }, null, 8 /* PROPS */, [\\\"modelValue\\\", \\\"onUpdate:modelValue\\\", \\\"attributes\\\"])) : (['select1'].indexOf(input.type)+1) ? (_openBlock(), _createBlock(_component_v_select, _mergeProps({ key: 9, value: _ctx.value[input.name], label: input.title, items: input.options, \\\"append-icon\\\": $options.checkProp(input, 'appendIcon'), \\\"append-outer-icon\\\": $options.checkProp(input, 'appendOuterIcon'), \\\"background-color\\\": $options.checkProp(input, 'backgroundColor'), \\\"clear-icon\\\": $options.checkProp(input, 'clearIcon'), color: $options.checkProp(input, 'color'), \\\"item-color\\\": $options.checkProp(input, 'itemColor', 'primary'), \\\"prepend-icon\\\": $options.checkProp(input, 'prependIcon'), onChange: $event => ($options.update(input.name, $event)) }, $options.extraProps(input), { \\\"error-messages\\\": _ctx.errors[input.name] }), null, 16 /* FULL_PROPS */, [\\\"value\\\", \\\"label\\\", \\\"items\\\", \\\"append-icon\\\", \\\"append-outer-icon\\\", \\\"background-color\\\", \\\"clear-icon\\\", \\\"color\\\", \\\"item-color\\\", \\\"prepend-icon\\\", \\\"onChange\\\", \\\"error-messages\\\"])) : (['file'].indexOf(input.type) +1) ? (_openBlock(), _createBlock(_component_ue_input_file, { key: 10, modelValue: $options.editedItem[input.name], \\\"onUpdate:modelValue\\\": $event => (($options.editedItem[input.name]) = $event), attributes: input }, null, 8 /* PROPS */, [\\\"modelValue\\\", \\\"onUpdate:modelValue\\\", \\\"attributes\\\"])) : (['file1'].indexOf(input.type) +1) ? (_openBlock(), _createBlock(_component_v_file_input, _mergeProps({ key: 11, value: _ctx.value[input.name], accept: $options.checkProp(input, 'accept' ), label: input.title, \\\"append-icon\\\": $options.checkProp(input, 'appendIcon'), \\\"append-outer-icon\\\": $options.checkProp(input, 'appendOuterIcon'), \\\"background-color\\\": $options.checkProp(input, 'backgroundColor'), \\\"clear-icon\\\": $options.checkProp(input, 'clearIcon'), \\\"menu-props\\\": $options.checkProp(input,'menuProps', {}), \\\"prepend-icon\\\": $options.checkProp(input, 'prependIcon'), onChange: $event => ($options.update(input.name, $event)) }, $options.extraProps(input), { \\\"error-messages\\\": _ctx.errors[input.name] }), null, 16 /* FULL_PROPS */, [\\\"value\\\", \\\"accept\\\", \\\"label\\\", \\\"append-icon\\\", \\\"append-outer-icon\\\", \\\"background-color\\\", \\\"clear-icon\\\", \\\"menu-props\\\", \\\"prepend-icon\\\", \\\"onChange\\\", \\\"error-messages\\\"])) : (['range-slider', 'progress', 'process'].indexOf(input.type)+1) ? (_openBlock(), _createBlock(_component_ue_input_range, { key: 12, modelValue: $options.editedItem[input.name], \\\"onUpdate:modelValue\\\": $event => (($options.editedItem[input.name]) = $event), attributes: input }, null, 8 /* PROPS */, [\\\"modelValue\\\", \\\"onUpdate:modelValue\\\", \\\"attributes\\\"])) : (['range-slider1', 'progress1', 'process1'].indexOf(input.type)+1) ? (_openBlock(), _createBlock(_component_v_range_slider, _mergeProps({ key: 13, label: input.title, value: _ctx.value[input.name], hint: $options.checkProp(input, 'hint'), max: $options.checkProp(input, 'max', 100), min: $options.checkProp(input, 'min', 0), \\\"append-icon\\\": $options.checkProp(input, 'appendIcon'), \\\"background-color\\\": $options.checkProp(input, 'backgroundColor'), \\\"prepend-icon\\\": $options.checkProp(input, 'prependIcon'), \\\"tick-size\\\": $options.checkProp(input, 'tickSize', 1), onChange: $event => ($options.update(input.name, $event)) }, $options.extraProps(input), { \\\"error-messages\\\": _ctx.errors[input.name] }), null, 16 /* FULL_PROPS */, [\\\"label\\\", \\\"value\\\", \\\"hint\\\", \\\"max\\\", \\\"min\\\", \\\"append-icon\\\", \\\"background-color\\\", \\\"prepend-icon\\\", \\\"tick-size\\\", \\\"onChange\\\", \\\"error-messages\\\"])) : (['date'].indexOf(input.type) +1) ? (_openBlock(), _createBlock(_component_ue_date, { key: 14, modelValue: $options.editedItem[input.name], \\\"onUpdate:modelValue\\\": $event => (($options.editedItem[input.name]) = $event), attributes: input }, null, 8 /* PROPS */, [\\\"modelValue\\\", \\\"onUpdate:modelValue\\\", \\\"attributes\\\"])) : (['date1'].indexOf(input.type) +1) ? (_openBlock(), _createBlock(_component_v_menu, { key: 15, modelValue: $data.pickDate, \\\"onUpdate:modelValue\\\": _cache[1] || (_cache[1] = $event => (($data.pickDate) = $event)), \\\"close-on-content-click\\\": false, \\\"nudge-right\\\": 40, transition: \\\"scale-transition\\\", \\\"offset-y\\\": \\\"\\\", \\\"max-width\\\": \\\"290px\\\", \\\"min-width\\\": \\\"290px\\\" }, { activator: _withCtx(({ on }) => [ _createVNode(_component_v_text_field, _mergeProps(_toHandlers(on), { label: input.title, \\\"prepend-inner-icon\\\": \\\"mdi-calendar\\\", value: _ctx.value[input.name], onInput: $event => ($options.update(input.name, $event)) }, $options.extraProps(input), { \\\"error-messages\\\": _ctx.errors[input.name] }), null, 16 /* FULL_PROPS */, [\\\"label\\\", \\\"value\\\", \\\"onInput\\\", \\\"error-messages\\\"]) ]), default: _withCtx(() => [ _createVNode(_component_v_date_picker, _mergeProps({ locale: _ctx.$i18n.locale, onInput: _cache[0] || (_cache[0] = $event => ($data.pickDate = false)), value: _ctx.value[input.name], label: input.title, \\\"active-picker\\\": $options.checkProp(input, 'activePicker'), color: $options.checkProp(input, 'color'), elevation: $options.checkProp(input, 'elevation', 15), onChange: $event => ($options.update(input.name, $event)) }, $options.extraProps(input)), null, 16 /* FULL_PROPS */, [\\\"locale\\\", \\\"value\\\", \\\"label\\\", \\\"active-picker\\\", \\\"color\\\", \\\"elevation\\\", \\\"onChange\\\"]) ]), _: 2 /* DYNAMIC */ }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\\\"modelValue\\\"])) : (['colo-picker'].indexOf(input.type) +1) ? (_openBlock(), _createBlock(_component_v_menu, { key: 16, modelValue: $data.pickColor, \\\"onUpdate:modelValue\\\": _cache[2] || (_cache[2] = $event => (($data.pickColor) = $event)), \\\"close-on-content-click\\\": false, \\\"nudge-right\\\": 40, transition: \\\"scale-transition\\\", \\\"offset-y\\\": \\\"\\\", \\\"max-width\\\": \\\"290px\\\", \\\"min-width\\\": \\\"290px\\\" }, { activator: _withCtx(({ on }) => [ _createVNode(_component_v_text_field, _mergeProps(_toHandlers(on), { label: input.title, \\\"prepend-inner-icon\\\": \\\"mdi-calendar\\\", value: _ctx.value[input.name], onInput: $event => ($options.update(input.name, $event)) }, $options.extraProps(input), { \\\"error-messages\\\": _ctx.errors[input.name] }), null, 16 /* FULL_PROPS */, [\\\"label\\\", \\\"value\\\", \\\"onInput\\\", \\\"error-messages\\\"]) ]), default: _withCtx(() => [ _createVNode(_component_v_color_picker, _mergeProps({ value: _ctx.value[input.name], label: input.title, \\\"dot-size\\\": $options.checkProp(input, 'dotSize', 'rgba'), \\\"swatches-max-height\\\": $options.checkProp(input, 'maxHeight', 200), onInput: $event => ($options.update(input.name, $event)) }, $options.extraProps(input)), null, 16 /* FULL_PROPS */, [\\\"value\\\", \\\"label\\\", \\\"dot-size\\\", \\\"swatches-max-height\\\", \\\"onInput\\\"]) ]), _: 2 /* DYNAMIC */ }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\\\"modelValue\\\"])) : (['color-picker'].indexOf(input.type) +1) ? _withDirectives((_openBlock(), _createBlock(_component_v_text_field, { key: 17, value: _ctx.value[input.name], label: input.title, \\\"hide-details\\\": \\\"\\\", class: \\\"ma-0 pa-0\\\", onInput: $event => ($options.update(input.name, $event)) }, { append: _withCtx(() => [ _createVNode(_component_v_menu, { modelValue: $data.pickColor, \\\"onUpdate:modelValue\\\": _cache[3] || (_cache[3] = $event => (($data.pickColor) = $event)), top: \\\"\\\", \\\"nudge-bottom\\\": \\\"105\\\", \\\"nudge-left\\\": \\\"16\\\", \\\"close-on-content-click\\\": false }, { activator: _withCtx(({ on }) => [ _createElementVNode(\\\"div\\\", _mergeProps({ style: $options.swatchStyle(_ctx.value[input.name]) }, _toHandlers(on, true)), null, 16 /* FULL_PROPS */) ]), default: _withCtx(() => [ _createVNode(_component_v_card, null, { default: _withCtx(() => [ _createVNode(_component_v_card_text, { class: \\\"pa-0\\\" }, { default: _withCtx(() => [ _createVNode(_component_v_color_picker, _mergeProps({ flat: \\\"\\\", value: _ctx.value[input.name], label: input.title, \\\"dot-size\\\": $options.checkProp(input, 'dotSize', 'rgba'), \\\"swatches-max-height\\\": $options.checkProp(input, 'maxHeight', 200), onInput: $event => ($options.update(input.name, $event)) }, $options.extraProps(input)), null, 16 /* FULL_PROPS */, [\\\"value\\\", \\\"label\\\", \\\"dot-size\\\", \\\"swatches-max-height\\\", \\\"onInput\\\"]) ]), _: 2 /* DYNAMIC */ }, 1024 /* DYNAMIC_SLOTS */) ]), _: 2 /* DYNAMIC */ }, 1024 /* DYNAMIC_SLOTS */) ]), _: 2 /* DYNAMIC */ }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\\\"modelValue\\\"]) ]), _: 2 /* DYNAMIC */ }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\\\"value\\\", \\\"label\\\", \\\"onInput\\\"])), [ [_directive_mask, $data.mask] ]) : (['otp'].indexOf(input.type)+1) ? (_openBlock(), _createBlock(_component_v_otp_input, _mergeProps({ key: 18, value: _ctx.value[input.name], length: $options.checkProp(input,'length', 6), onChange: $event => ($options.update(input.name, $event)) }, $options.extraProps(input)), null, 16 /* FULL_PROPS */, [\\\"value\\\", \\\"length\\\", \\\"onChange\\\"])) : _createCommentVNode(\\\"v-if\\\", true) ]), _: 2 /* DYNAMIC */ }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\\\"index\\\", \\\"cols\\\", \\\"md\\\", \\\"sm\\\"])) }), 128 /* KEYED_FRAGMENT */)), (_ctx.loading) ? (_openBlock(), _createBlock(_component_v_text_field, { key: 0, color: \\\"success\\\", loading: \\\"\\\", disabled: \\\"\\\" })) : _createCommentVNode(\\\"v-if\\\", true) ]), _: 1 /* STABLE */ }) ]), _: 1 /* STABLE */ }), _createVNode(_component_v_divider), ($props.hasSubmit) ? (_openBlock(), _createBlock(_component_v_container, { key: 0 }, { default: _withCtx(() => [ _createCommentVNode(\\\" \"), _createVNode(_component_v_spacer), _createTextVNode(\" \\\"), _renderSlot(_ctx.$slots, \\\"submitButton\\\", { attrs: { }, on: { } }, () => [ _createVNode(_component_ue_btn, { form: $data.id, type: \\\"submit\\\", absolute: \\\"\\\", right: \\\"\\\" }, { default: _withCtx(() => [ _createTextVNode(_toDisplayString(_ctx.$tc('submit')), 1 /* TEXT */) ]), _: 1 /* STABLE */ }, 8 /* PROPS */, [\\\"form\\\"]) ]) ]), _: 3 /* FORWARDED */ })) : _createCommentVNode(\\\"v-if\\\", true) ]), _: 3 /* FORWARDED */ }, 8 /* PROPS */, [\\\"modelValue\\\", \\\"onSubmit\\\", \\\"id\\\"])) }\")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createVNode","_component_v_spacer"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/Form_.vue"],"sourcesContent":["<template>\n\n    <v-form v-model=\"valid\" @submit.prevent=\"submit\" :id=\"id\" >\n        <v-container>\n            <v-row>\n                <v-col\n                    v-for=\"(input, i) in $store.state.form.inputs\"\n                    :key =\"i\"\n                    :index=\"input\"\n                    :cols='input.cols'\n                    :md='input.md'\n                    :sm='input.sm'\n                >\n                    \n                    <ue-input-text\n                        v-if=\"input.type=='text'\"\n                        v-model=\"editedItem[input.name]\"    \n                        :attributes=\"input\"\n                    />               \n                    <v-text-field\n                        v-if=\"input.type=='text1'\"\n                        :value=\"value[input.name]\"\n                        @input=\"update(input.name, $event)\"\n                        \n                        :label=\"input.title\"\n                        v-bind=\"extraProps(input)\"\n                        :error-messages=\"errors[input.name]\"\n                    >\n                    </v-text-field>\n\n                    <ue-input-switch\n                        v-else-if=\"['switch','boolean'].indexOf(input.type) +1\"\n                        v-model=\"editedItem[input.name]\"\n                        :attributes=\"input\"\n                    />\n                    <v-switch\n                        v-else-if=\"['switch1','boolean1'].indexOf(input.type) +1\"\n                        :value=\"value[input.name]\"\n                        :label=\"input.title\"\n                        :false-value=\"checkProp(input, 'falseValue', false)\"\n                        :true-value=\"checkProp(input, 'trueValue', true)\"\n                        \n                        :append-icon=\"checkProp(input, 'appendIcon')\"\n                        :append-outer-icon=\"checkProp(input, 'appendOuterIcon')\"\n                        :background-color=\"checkProp(input, 'backgroundColor')\"\n                        :clear-icon=\"checkProp(input, 'clearIcon')\"\n                        :color=\"checkProp(input, 'color')\"\n                        :prepend-icon=\"checkProp(input, 'prependIcon')\"\n    \n                        @change=\"update(input.name, $event)\"\n                        v-bind=\"extraProps(input)\"\n    \n                        :error-messages=\"errors[input.name]\"\n                    ></v-switch>\n                    \n                    <ue-input-checkbox\n                        v-else-if=\"['checkbox'].indexOf(input.type) +1\"\n                        v-model=\"editedItem[input.name]\"\n                        :attributes=\"input\"\n                    />\n                    <v-checkbox\n                        v-else-if=\"['checkbox1'].indexOf(input.type) +1\"\n                        :input-value=\"value[input.name]\"\n                        :label=\"input.title\"\n                        :false-value=\"false\"\n    \n                        :color=\"checkProp(input, 'color', 'info')\"\n                        :append-icon=\"checkProp(input, 'appendIcon')\"\n                        :prepend-icon=\"checkProp(input, 'prependIcon')\"\n                        :on-icon=\"checkProp(input, 'onIcon')\"\n                        :off-icon=\"checkProp(input, 'offIcon')\"\n    \n                        @change=\"update(input.name, $event)\"\n                        v-bind=\"extraProps(input)\"\n    \n                        :error-messages=\"errors[input.name]\"\n                    ></v-checkbox>\n                    \n                    <ue-input-radio\n                        v-else-if=\"['radio', 'enum'].indexOf(input.type)+1\"\n                        v-model=\"editedItem[input.name]\"\n                        :attributes=\"input\"\n                    />\n                    <v-radio-group \n                        v-else-if=\"['radio1', 'enum1'].indexOf(input.type)+1\"\n                        :value=\"value[input.name]\"\n                        :active-class=\"checkProp(input, 'activeClass', '')\"\n                        :append-icon=\"checkProp(input, 'appendIcon')\"\n                        :prepend-icon=\"checkProp(input, 'prependIcon')\"\n                        :background-color=\"checkProp(input, 'backgroundColor')\"\n    \n                        @change=\"update(input.name, $event)\"\n                        v-bind=\"extraProps(input)\"\n    \n                        :error-messages=\"errors[input.name]\"\n    \n                    >\n                        <v-radio\n                            v-for=\"(option,n) in input.options\"\n                            :value=\"option.value\"\n                            :key=\"n\"\n                            :label=\"checkProp(option, 'label', option.value)\"\n                            :color=\"checkProp(option, 'color', 'info')\"\n                            :id=\"checkProp(option, 'id', `option${n}`)\"\n                            :on-icon=\"checkProp(option, 'onIcon', '$radioOn')\"\n                            :off-icon=\"checkProp(option, 'offIcon', '$radioOff')\"\n    \n                            v-bind=\"extraProps(option)\"\n                        ></v-radio>\n                    </v-radio-group>\n                    \n                    <ue-input-select\n                        v-else-if=\"['select'].indexOf(input.type)+1\"\n                        v-model=\"editedItem[input.name]\"\n                        :attributes=\"input\"\n                        />\n                    <v-select\n                        v-else-if=\"['select1'].indexOf(input.type)+1\"\n                        :value=\"value[input.name]\"\n                        \n                        :label=\"input.title\"\n                        :items=\"input.options\"\n    \n                        :append-icon=\"checkProp(input, 'appendIcon')\"\n                        :append-outer-icon=\"checkProp(input, 'appendOuterIcon')\"\n                        :background-color=\"checkProp(input, 'backgroundColor')\"\n                        :clear-icon=\"checkProp(input, 'clearIcon')\"\n                        :color=\"checkProp(input, 'color')\"\n                        :item-color=\"checkProp(input, 'itemColor', 'primary')\"\n                        :prepend-icon=\"checkProp(input, 'prependIcon')\"\n    \n                        @change=\"update(input.name, $event)\"\n                        v-bind=\"extraProps(input)\"\n    \n                        :error-messages=\"errors[input.name]\"\n                    ></v-select>\n                    \n                    <ue-input-file\n                        v-else-if=\"['file'].indexOf(input.type) +1\"\n                        v-model=\"editedItem[input.name]\"\n                        :attributes=\"input\"\n                    />\n                    <v-file-input\n                        v-else-if=\"['file1'].indexOf(input.type) +1\"\n                        :value=\"value[input.name]\"\n                        \n                        :accept=\"checkProp(input, 'accept' )\"\n                        :label=\"input.title\"\n                        :append-icon=\"checkProp(input, 'appendIcon')\"\n                        :append-outer-icon=\"checkProp(input, 'appendOuterIcon')\"\n                        :background-color=\"checkProp(input, 'backgroundColor')\"\n                        :clear-icon=\"checkProp(input, 'clearIcon')\"\n                        :menu-props=\"checkProp(input,'menuProps', {})\"\n                        :prepend-icon=\"checkProp(input, 'prependIcon')\"\n    \n                        @change=\"update(input.name, $event)\"\n                        v-bind=\"extraProps(input)\"\n    \n                        :error-messages=\"errors[input.name]\"\n\n                    ></v-file-input>\n                    \n                    <ue-input-range\n                        v-else-if=\"['range-slider', 'progress', 'process'].indexOf(input.type)+1\"\n                        v-model=\"editedItem[input.name]\"\n                        :attributes=\"input\"\n                        />\n                    <v-range-slider\n                        v-else-if=\"['range-slider1', 'progress1', 'process1'].indexOf(input.type)+1\"\n                        :label=\"input.title\"\n                        :value=\"value[input.name]\"\n    \n                        :hint=\"checkProp(input, 'hint')\"\n                        :max=\"checkProp(input, 'max', 100)\"\n                        :min=\"checkProp(input, 'min', 0)\"\n    \n                        :append-icon=\"checkProp(input, 'appendIcon')\"\n                        :background-color=\"checkProp(input, 'backgroundColor')\"\n                        :prepend-icon=\"checkProp(input, 'prependIcon')\"\n                        :tick-size=\"checkProp(input, 'tickSize', 1)\"\n    \n                        @change=\"update(input.name, $event)\"\n                        v-bind=\"extraProps(input)\"    \n                        \n                        :error-messages=\"errors[input.name]\"\n                    ></v-range-slider>\n                    \n                    <ue-date\n                        v-else-if=\"['date'].indexOf(input.type) +1\"\n                        v-model=\"editedItem[input.name]\"\n                        :attributes=\"input\"\n                    />\n                    <v-menu \n                        v-else-if=\"['date1'].indexOf(input.type) +1\"\n                        v-model=\"pickDate\"\n                        :close-on-content-click=\"false\"\n                        :nudge-right=\"40\"\n                        transition=\"scale-transition\"\n                        offset-y\n                        max-width=\"290px\"\n                        min-width=\"290px\"\n    \n                        >\n                        <template v-slot:activator=\"{ on }\">\n                            <v-text-field\n                                    v-on=\"on\"\n                                    :label=\"input.title\"\n                                    prepend-inner-icon=\"mdi-calendar\"\n    \n                                    :value=\"value[input.name]\"\n                                    @input=\"update(input.name, $event)\"\n                                    v-bind=\"extraProps(input)\"\n    \n                                    :error-messages=\"errors[input.name]\"\n                            ></v-text-field>\n                        </template>\n                    \n                        <v-date-picker \n                            :locale=\"$i18n.locale\"\n                            @input=\"pickDate = false\"\n                            :value=\"value[input.name]\"\n                            :label=\"input.title\"\n    \n                            :active-picker=\"checkProp(input, 'activePicker')\"\n                            :color=\"checkProp(input, 'color')\"\n                            :elevation=\"checkProp(input, 'elevation', 15)\"\n    \n                            @change=\"update(input.name, $event)\"\n                            v-bind=\"extraProps(input)\"     \n                        ></v-date-picker>\n    \n                    </v-menu>  \n\n                    <v-menu \n                        v-else-if=\"['colo-picker'].indexOf(input.type) +1\"\n                        v-model=\"pickColor\"\n                        :close-on-content-click=\"false\"\n                        :nudge-right=\"40\"\n                        transition=\"scale-transition\"\n                        offset-y\n                        max-width=\"290px\"\n                        min-width=\"290px\"\n    \n                        >\n                        <template v-slot:activator=\"{ on }\">\n                            <v-text-field\n                                    v-on=\"on\"\n                                    :label=\"input.title\"\n                                    prepend-inner-icon=\"mdi-calendar\"\n                                    :value=\"value[input.name]\"\n                                    @input=\"update(input.name, $event)\"\n                                    v-bind=\"extraProps(input)\"\n    \n                                    :error-messages=\"errors[input.name]\"\n    \n                            ></v-text-field>\n                        </template>\n    \n                        <v-color-picker\n    \n                            :value=\"value[input.name]\"\n                            :label=\"input.title\"\n                            :dot-size=\"checkProp(input, 'dotSize', 'rgba')\"\n                            :swatches-max-height=\"checkProp(input, 'maxHeight', 200)\"\n    \n                            @input=\"update(input.name, $event)\"\n                            v-bind=\"extraProps(input)\"\n                        ></v-color-picker>\n                    </v-menu>  \n    \n                    <v-text-field \n                        v-else-if=\"['color-picker'].indexOf(input.type) +1\"\n                        :value=\"value[input.name]\"\n                        :label=\"input.title\"\n                        v-mask=\"mask\"\n                        hide-details \n                        class=\"ma-0 pa-0\" \n                        @input=\"update(input.name, $event)\"\n                    >\n    \n                        <template v-slot:append>\n                            <v-menu \n                                v-model=\"pickColor\" \n                                top \n                                nudge-bottom=\"105\" \n                                nudge-left=\"16\" \n                                :close-on-content-click=\"false\"\n                            >\n    \n                                <template v-slot:activator=\"{ on }\">\n                                    <div :style=\"swatchStyle(value[input.name])\" v-on=\"on\" />\n                                </template>\n                                <v-card>\n                                    <v-card-text class=\"pa-0\">\n                                        <v-color-picker \n                                            flat \n                                            :value=\"value[input.name]\"\n                                            :label=\"input.title\"\n                                            :dot-size=\"checkProp(input, 'dotSize', 'rgba')\"\n                                            :swatches-max-height=\"checkProp(input, 'maxHeight', 200)\"\n                                            @input=\"update(input.name, $event)\"\n                                            v-bind=\"extraProps(input)\"\n                                        \n                                        />\n                                    </v-card-text>\n                                </v-card>\n                            </v-menu>\n                        </template>\n                    </v-text-field>\n    \n                    <v-otp-input\n                        v-else-if=\"['otp'].indexOf(input.type)+1\"\n                        :value=\"value[input.name]\"\n                        :length=\"checkProp(input,'length', 6)\"\n    \n                        @change=\"update(input.name, $event)\"\n                        v-bind=\"extraProps(input)\"                    \n                    ></v-otp-input>\n                    \n    \n                </v-col>\n    \n                <v-text-field\n                    v-if=\"loading\"\n                    color=\"success\"\n                    loading\n                    disabled\n                ></v-text-field>\n            </v-row>\n        </v-container>\n        \n        <v-divider></v-divider>\n\n        <v-container v-if=\"hasSubmit\">\n                <!-- <v-spacer></v-spacer> -->\n                <slot \n                    name=\"submitButton\"\n                    :attrs=\"{\n                        \n                    }\"\n                    :on=\"{\n                        \n                    }\"\n                    >\n                    <ue-btn\n                        :form=\"id\"\n                        type=\"submit\"\n                        absolute\n                        right\n                        >\n                        {{ $tc('submit') }}\n                    </ue-btn>\n                </slot>\n        </v-container>\n\n    </v-form>\n\n</template>\n\n<script>\nimport { mapGetters, mapState } from 'vuex'\nimport { FORM } from '@/store/mutations/index'\nimport ACTIONS from '@/store/actions'\n\nexport default {\n    // name: \"ue-form\",\n    props: {\n        // value: {\n        //     type: Object,\n        //     default: {}\n        // },\n        inputs: {\n            type: Array\n        },\n        async: {\n            type: Boolean,\n            default: true\n        },\n        hasSubmit: {\n            type: Boolean,\n            default: false\n        },\n        buttonFloat: {\n            type: String,\n            default: 'right'\n        },\n        buttonPosition: {\n            type: String,\n            default: 'bottom'\n        }\n    },\n    data() {\n        return {\n            id: Math.ceil(Math.random()*1000000) + \"-form\",\n            valid: false,\n            pickDate: false,\n            pickColor: false,\n            mask: '!XNNNNNNNN',\n\n        }\n    },\n\n    created() {\n\n        // Object.fromEntries(this.inputs[1].extras.map(v => ([v,true])))\n        \n        // console.log(this.inputs[2])\n    },\n\n    computed: {\n        editedItem: {\n            get () {\n                return this.$store.state.form.editedItem;\n            },\n            set (value) {\n                __log('form->editedItem set', value)\n                // this.$store.commit(FORM.SET_EDITED_ITEM, value);\n\n            }\n        },\n        ...mapState({\n            loading: state => state.form.loading,\n            errors: state => state.form.errors,\n\n        }),\n        ...mapGetters([\n            'defaultItem'\n        ])\n    },\n    \n    methods: {\n        update(key, value) {\n            __log('form->update', key, value);\n            // this.$emit('input', { ...this.value, [key]: value })\n        },\n        checkProp(object, prop, def = undefined) {\n            return object[prop] !== 'undefined' ? object[prop] : def;\n        },\n        extraProps(props) {\n            return Array.isArray(props.extras) ? Object.fromEntries( props.extras.map(v => ([v,true]))) : {}\n        },\n        swatchStyle(color){\n            const { pickColor } = this\n            return {\n                backgroundColor: color,\n                cursor: 'pointer',\n                height: '30px',\n                width: '30px',\n                borderRadius: pickColor ? '50%' : '4px',\n                transition: 'border-radius 200ms ease-in-out'\n            }\n        },\n\n        saveForm(callback=null, errorCallback=null){\n            let fields = {};\n            Object.keys(this.defaultItem).forEach( (key,i) => {\n                fields[key] = (this.$store.state.form.editedItem[key]==null || this.defaultItem[key] != '') \n                    ? this.defaultItem[key]\n                    : this.$store.state.form.editedItem[key]\n            });\n\n            if(!!this.$store.state.form.editedItem.id)\n                fields.id = this.$store.state.form.editedItem.id;\n\n            this.$store.commit(FORM.SET_EDITED_ITEM, fields);\n\n            this.$store.dispatch(ACTIONS.SAVE_FORM, {item:null, callback:callback, errorCallback:errorCallback})\n        },\n\n        submit () {\n            if(this.async){\n                this.saveForm();\n            }\n\n            // this.$v.$touch()\n        },\n    }\n\n\n}\n</script>\n\n<style>\n\n</style>"],"mappings":";;;85iBA8UoC,GAAAA,YAAA,CAAqBC,mBAAA,G,iBAAA,ye"},"metadata":{},"sourceType":"module","externalDependencies":[]}