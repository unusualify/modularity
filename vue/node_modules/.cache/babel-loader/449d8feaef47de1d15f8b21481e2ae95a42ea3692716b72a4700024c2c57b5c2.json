{"ast":null,"code":"import _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport isEmpty from 'lodash/isEmpty';\n\n/*\n* Gather selected items in a selected object (currently used for medias and browsers)\n* if a block is passed as second argument, we retrieve selected items namespaced by the block id\n* and strip it out from the key to clean things up and make it easier for the backend\n*/\nvar gatherSelected = function gatherSelected(selected) {\n  var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.keys(selected).map(function (key) {\n    if (block) {\n      if (isBlockField(key, block.id)) {\n        return _defineProperty({}, stripOutBlockNamespace(key, block.id), selected[key]);\n      }\n    } else if (!key.startsWith('blocks[')) {\n      return _defineProperty({}, key, selected[key]);\n    }\n    return null;\n  }).filter(function (x) {\n    return x;\n  }))));\n};\nexport var isBlockField = function isBlockField(name, id) {\n  return name.startsWith('blocks[' + id + ']');\n};\nexport var stripOutBlockNamespace = function stripOutBlockNamespace(name, id) {\n  var nameWithoutBlock = name.replace('blocks[' + id + '][', '');\n  return nameWithoutBlock.match(/]/gi).length > 1 ? nameWithoutBlock.replace(']', '') : nameWithoutBlock.slice(0, -1);\n};\nexport var buildBlock = function buildBlock(block, rootState) {\n  return {\n    id: block.id,\n    type: block.type,\n    editor_name: block.name,\n    // retrieve all fields for this block and clean up field names\n    content: rootState.form.fields.filter(function (field) {\n      return isBlockField(field.name, block.id);\n    }).map(function (field) {\n      return {\n        name: stripOutBlockNamespace(field.name, block.id),\n        value: field.value\n      };\n    }).reduce(function (content, field) {\n      content[field.name] = field.value;\n      return content;\n    }, {}),\n    medias: gatherSelected(rootState.mediaLibrary.selected, block),\n    browsers: gatherSelected(rootState.browser.selected, block),\n    // gather repeater blocks from the repeater store module\n    blocks: Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.keys(rootState.repeaters.repeaters).filter(function (repeaterKey) {\n      return repeaterKey.startsWith('blocks-' + block.id);\n    }).map(function (repeaterKey) {\n      return _defineProperty({}, repeaterKey.replace('blocks-' + block.id + '_', ''), rootState.repeaters.repeaters[repeaterKey].map(function (repeaterItem) {\n        return buildBlock(repeaterItem, rootState);\n      }));\n    }))))\n  };\n};\nexport var isBlockEmpty = function isBlockEmpty(blockData) {\n  return isEmpty(blockData.content) && isEmpty(blockData.browsers) && isEmpty(blockData.medias) && isEmpty(blockData.blocks);\n};\nexport var gatherRepeaters = function gatherRepeaters(rootState) {\n  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.keys(rootState.repeaters.repeaters).filter(function (repeaterKey) {\n    // we start by filtering out repeater blocks\n    return !repeaterKey.startsWith('blocks-');\n  }).map(function (repeater) {\n    return _defineProperty({}, repeater, rootState.repeaters.repeaters[repeater].map(function (repeaterItem) {\n      // and for each repeater we build a block for each item\n      var repeaterBlock = buildBlock(repeaterItem, rootState);\n\n      // we want to inline fields in the repeater object\n      // and we don't need the type of component used\n      var fields = repeaterBlock.content;\n      delete repeaterBlock.content;\n      delete repeaterBlock.type;\n\n      // and lastly we want to keep the id to update existing items\n      fields.id = repeaterItem.id;\n      return Object.assign(repeaterBlock, fields);\n    }));\n  }))));\n};\nexport var gatherBlocks = function gatherBlocks(rootState) {\n  var used = _objectSpread({}, rootState.blocks.blocks);\n  return Object.keys(used).map(function (name) {\n    return used[name].map(function (block) {\n      block.name = name;\n      return buildBlock(block, rootState);\n    });\n  }).flat();\n};\nexport var getFormFields = function getFormFields(rootState) {\n  var fields = rootState.form.fields.filter(function (field) {\n    // we start by filtering out blocks related form fields\n    return !field.name.startsWith('blocks[') && !field.name.startsWith('mediaMeta[');\n  }).reduce(function (fields, field) {\n    // and we create a new object with field names as keys,\n    // to inline fields in the submitted data\n    fields[field.name] = field.value;\n    return fields;\n  }, {});\n  return fields;\n};\nexport var getModalFormFields = function getModalFormFields(rootState) {\n  var fields = rootState.form.modalFields.filter(function (field) {\n    // we start by filtering out blocks related form fields\n    return !field.name.startsWith('blocks[') && !field.name.startsWith('mediaMeta[');\n  }).reduce(function (fields, field) {\n    // and we create a new object with field names as keys,\n    // to inline fields in the submitted data\n    fields[field.name] = field.value;\n    return fields;\n  }, {});\n  return fields;\n};\nexport var getFormData = function getFormData(rootState) {\n  var fields = getFormFields(rootState);\n\n  // we can now create our submitted data object out of:\n  // - our just created fields object,\n  // - publication properties\n  // - selected medias and browsers\n  // - created blocks and repeaters\n  var data = Object.assign(fields, {\n    cmsSaveType: rootState.form.type,\n    published: rootState.publication.published,\n    \"public\": rootState.publication.visibility === 'public',\n    publish_start_date: rootState.publication.startDate,\n    publish_end_date: rootState.publication.endDate,\n    languages: rootState.language.all,\n    parent_id: rootState.parents.active,\n    medias: gatherSelected(rootState.mediaLibrary.selected),\n    browsers: gatherSelected(rootState.browser.selected),\n    blocks: gatherBlocks(rootState),\n    repeaters: gatherRepeaters(rootState)\n  });\n  return data;\n};\nexport var getSchemaModel = function getSchemaModel(inputs) {\n  // __log(inputs)\n  var isTreeview = 'custom-input-treeview|treeview';\n  var values = Object.keys(inputs).reduce(function (a, c) {\n    if (isTreeview.includes(inputs[c].type)) {\n      a[inputs[c].name] = [];\n    } else if (__isObject(inputs[c])) {\n      a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c][\"default\"] : '';\n    }\n    return a;\n  }, {});\n\n  // __log(values);\n  return values;\n  Object.keys(inputs).reduce(function (a, c) {\n    return a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c][\"default\"] : '', a;\n  }, {});\n};\nexport var getSchema = function getSchema(inputs) {\n  // __log(inputs)\n  var values = Object.keys(inputs).reduce(function (a, c) {\n    if (__isObject(inputs[c])) {\n      a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c][\"default\"] : '';\n    } else if (Array.isArray(inputs[c])) {\n      a[inputs[c].name] = [];\n    }\n    return a;\n  }, {});\n  return values;\n  Object.keys(inputs).reduce(function (a, c) {\n    return a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c][\"default\"] : '', a;\n  }, {});\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}