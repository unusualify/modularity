{"ast":null,"code":"import { renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, mergeProps as _mergeProps, openBlock as _openBlock, createBlock as _createBlock, normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"d-flex flex-column align-items-center\",\n  style: {\n    \"position\": \"sticky\",\n    \"top\": \"100px\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"caption\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ue_btn = _resolveComponent(\"ue-btn\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_icon = _resolveComponent(\"v-icon\");\n  const _component_v_custom_form_base = _resolveComponent(\"v-custom-form-base\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_text_field = _resolveComponent(\"v-text-field\");\n  const _component_v_form = _resolveComponent(\"v-form\");\n  return _openBlock(), _createBlock(_component_v_form, {\n    ref: $options.reference,\n    modelValue: $data.valid,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.valid = $event),\n    \"lazy-validation\": \"\",\n    onSubmit: _withModifiers($options.submit, [\"prevent\"]),\n    id: $data.id\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createVNode(_component_v_row, null, {\n        default: _withCtx(() => [$options.hasStickyFrame ? (_openBlock(), _createBlock(_component_v_col, _mergeProps({\n          key: 0\n        }, $options.stickyColumnAttrs, {\n          class: \"d-flex flex-column\",\n          style: {\n            \"position\": \"sticky\"\n          }\n        }), {\n          default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [$props.hasSubmit && $props.stickyButton ? _renderSlot(_ctx.$slots, \"submitButton\", {\n            key: 0,\n            attrs: {},\n            on: {}\n          }, () => [_createVNode(_component_ue_btn, {\n            form: $data.id,\n            type: \"submit\",\n            width: \"60%\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$tc('submit')), 1 /* TEXT */)], undefined, true),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"form\"])]) : _createCommentVNode(\"v-if\", true), _renderSlot(_ctx.$slots, \"stickyBody\", {\n            attrs: {},\n            on: {}\n          }, () => [_createCommentVNode(\" <v-card class=\\\"mt-6\\\" height=\\\"\\\">\\n                                        <div>\\n                                            <v-icon>mdi-camera</v-icon>\\n                                            <h3>Upload</h3>\\n                                        </div>\\n                                </v-card> \")])]), _createCommentVNode(\" <v-spacer></v-spacer> \")], undefined, true),\n          _: 3 /* FORWARDED */\n        }, 16 /* FULL_PROPS */)) : _createCommentVNode(\"v-if\", true), _createVNode(_component_v_col, _normalizeProps(_guardReactiveProps($options.formColumnAttrs)), {\n          default: _withCtx(() => [_createVNode(_component_v_custom_form_base, {\n            id: \"treeview-slot\",\n            row: $props.rowAttribute,\n            model: $options.model,\n            schema: $options.inputSchema,\n            onUpdate: $options.handleUpdate,\n            onInput: $options.handleInput,\n            onResize: $options.handleResize,\n            onBlur: $options.handleBlur\n          }, {\n            [`slot-inject-prepend-key-treeview-slot-permissions`]: _withCtx(({\n              open\n            }) => [_createVNode(_component_v_icon, {\n              color: \"blue\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(open ? 'mdi-folder-open' : 'mdi-folder'), 1 /* TEXT */)], undefined, true),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */)]),\n\n            \"slot-inject-label-key-treeview-slot-permissions\": _withCtx(({\n              item\n            }) => [_createElementVNode(\"span\", _hoisted_2, _toDisplayString(item.name.toUpperCase()), 1 /* TEXT */)]),\n\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"row\", \"model\", \"schema\", \"onUpdate\", \"onInput\", \"onResize\", \"onBlur\"])], undefined, true),\n          _: 1 /* STABLE */\n        }, 16 /* FULL_PROPS */)], undefined, true),\n        _: 3 /* FORWARDED */\n      })], undefined, true),\n      _: 3 /* FORWARDED */\n    }), $props.hasSubmit && !$props.stickyButton ? (_openBlock(), _createBlock(_component_v_container, {\n      key: 0\n    }, {\n      default: _withCtx(() => [_createCommentVNode(\" <v-spacer></v-spacer> \"), _renderSlot(_ctx.$slots, \"submitButton\", {\n        attrs: {},\n        on: {}\n      }, () => [_createVNode(_component_ue_btn, {\n        form: $data.id,\n        type: \"submit\",\n        right: \"\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$tc('submit')), 1 /* TEXT */)], undefined, true),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"form\"])])], undefined, true),\n      _: 3 /* FORWARDED */\n    })) : _createCommentVNode(\"v-if\", true), _createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_ctx.loading ? (_openBlock(), _createBlock(_component_v_text_field, {\n        key: 0,\n        color: \"success\",\n        loading: \"\",\n        disabled: \"\"\n      })) : _createCommentVNode(\"v-if\", true)], undefined, true),\n      _: 1 /* STABLE */\n    })], undefined, true),\n    _: 3 /* FORWARDED */\n  }, 8 /* PROPS */, [\"modelValue\", \"onSubmit\", \"id\"]);\n}","map":{"version":3,"names":["class","style","_createBlock","_component_v_form","ref","$options","reference","$data","valid","$event","onSubmit","_withModifiers","submit","id","_createVNode","_component_v_container","_component_v_row","hasStickyFrame","_component_v_col","_mergeProps","key","stickyColumnAttrs","_createElementVNode","_hoisted_1","$props","hasSubmit","stickyButton","_renderSlot","_ctx","$slots","attrs","on","_component_ue_btn","form","type","width","$tc","_createCommentVNode","_normalizeProps","_guardReactiveProps","formColumnAttrs","_component_v_custom_form_base","row","rowAttribute","model","schema","inputSchema","onUpdate","handleUpdate","onInput","handleInput","onResize","handleResize","onBlur","handleBlur","_withCtx","open","_component_v_icon","color","item","_hoisted_2","_toDisplayString","name","toUpperCase","right","loading","_component_v_text_field","disabled"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/FormBase.vue"],"sourcesContent":["<template>\n\n    <v-form \n        :ref=\"reference\" \n        v-model=\"valid\" \n        lazy-validation\n        @submit.prevent=\"submit\" \n        :id=\"id\"\n        >\n        <v-container>\n            <v-row>\n                <v-col\n                    v-if=\"hasStickyFrame\"\n                    v-bind=\"stickyColumnAttrs\"\n                    class=\"d-flex flex-column\"\n                    style=\"position:sticky;\"\n                    >\n                        <div class=\"d-flex flex-column align-items-center\" style=\"position:sticky;top:100px;\">\n                            <slot \n                                v-if=\"hasSubmit && stickyButton\"\n                                name=\"submitButton\"\n                                :attrs=\"{\n                                    \n                                }\"\n                                :on=\"{\n                                    \n                                }\"\n                                >\n                                <ue-btn\n                                    :form=\"id\"\n                                    type=\"submit\"\n                                    width=\"60%\"\n                                    \n                                    >\n                                    {{ $tc('submit') }}\n                                </ue-btn>\n                            </slot>\n\n                            <slot \n                                name=\"stickyBody\"\n                                :attrs=\"{\n                                    \n                                }\"\n                                :on=\"{\n                                    \n                                }\"\n                                >\n                                <!-- <v-card class=\"mt-6\" height=\"\">\n                                        <div>\n                                            <v-icon>mdi-camera</v-icon>\n                                            <h3>Upload</h3>\n                                        </div>\n                                </v-card> -->\n                            </slot>\n    \n\n                        </div>\n                        <!-- <v-spacer></v-spacer> -->\n\n                </v-col>\n                <v-col\n                    v-bind=\"formColumnAttrs\"\n                    >\n\n                    <v-custom-form-base \n                        id=\"treeview-slot\"\n                        \n                        :row=\"rowAttribute\"\n                        :model=\"model\"\n                        :schema=\"inputSchema\" \n                        \n                        @update=\"handleUpdate\"\n                        @input=\"handleInput\"\n                        @resize=\"handleResize\"\n                        @blur=\"handleBlur\"\n                        \n                        >\n                        <template v-slot:[`slot-inject-prepend-key-treeview-slot-permissions`]=\"{open}\" >  \n                            <v-icon color=\"blue\">\n                                {{open ? 'mdi-folder-open' : 'mdi-folder'}}\n                            </v-icon>\n                        </template>\n                        <template #slot-inject-label-key-treeview-slot-permissions=\"{item}\" >  \n                            <span class=\"caption\" >{{item.name.toUpperCase()}}</span>\n                        </template>\n                    </v-custom-form-base>\n                        \n                </v-col>\n            </v-row>\n        </v-container>\n\n        <v-container v-if=\"hasSubmit && !stickyButton\">\n                <!-- <v-spacer></v-spacer> -->\n                <slot \n                    name=\"submitButton\"\n                    :attrs=\"{\n                        \n                    }\"\n                    :on=\"{\n                        \n                    }\"\n                    >\n                    <ue-btn\n                        :form=\"id\"\n                        type=\"submit\"\n                        right\n                        >\n                        {{ $tc('submit') }}\n                    </ue-btn>\n                </slot>\n        </v-container>\n\n        <v-container>\n            <v-text-field\n                v-if=\"loading\"\n                color=\"success\"\n                loading\n                disabled\n            />\n        </v-container>\n    </v-form>\n\n</template>\n\n<script>\nimport { mapGetters, mapState } from 'vuex'\nimport { FORM } from '@/store/mutations/index'\nimport ACTIONS from '@/store/actions'\n\nexport default {\n    // name: \"ue-form-base\",\n    props: {\n        value: {\n            type: Object,\n            default() {\n                return {}\n            }\n        },\n        schema: {\n            type: Object,\n            default() {\n                return {}\n            }\n        },\n        rowAttribute: {\n            type: Object,\n            default() {\n                return {\n                    noGutters: false,\n                    // justify:'center', \n                    // align:'center'\n                }\n            }\n        },\n        async: {\n            type: Boolean,\n            default: true\n        },\n        hasSubmit: {\n            type: Boolean,\n            default: false\n        },\n        stickyFrame: {\n            type: Boolean,\n            default: false\n        },\n        stickyButton: {\n            type: Boolean,\n            default: false\n        },\n    },\n    data() {\n        return {\n            id: Math.ceil(Math.random()*1000000) + \"-form\",\n            valid: false,\n        }\n    },\n\n    beforeCreate(){\n\n    },\n\n    created() {\n        // __log(this.$root)\n        // Object.fromEntries(this.inputs[1].extras.map(v => ([v,true])))\n        \n        // console.log(this.inputs[2])\n    },\n\n    watch: {\n        inputSchema(val) {\n            __log('inputSchema changed', val )\n        }\n    },\n\n    computed: {\n        issetModel() {\n            return Object.keys(this.value).length > 0;\n        },\n        issetSchema() {\n            return Object.keys(this.schema).length > 0;\n        },\n        hasStickyFrame() {\n            return this.stickyFrame || this.stickyButton;\n        },\n        inputSchema() {\n            return this.issetSchema ? this.schema : this.$store.state.form.inputs;\n        },\n        defaultItem: {\n            get () {\n                // __log(\n                //     this.issetModel ? this.value : this.$store.state.form.editedItem\n                // )\n                return this.issetModel ? this.value : this.$store.state.form.editedItem;\n            },\n            set (value) {\n\n            }\n        },\n        model: {\n            get () {\n                console.log('formBase model getter', this.defaultItem, this.value)\n                return this.defaultItem;\n            },\n            set (value) {\n                __log('model setter', value)\n                // __log('ForBase.vue->model set', value)\n\n                // if(this.issetModel)\n                //     this.$emit('input', value)\n                // else    \n                //     this.$store.commit(FORM.SET_EDITED_ITEM, value)\n            }\n        },\n\n        reference(){\n            return 'ref-' + this.id;\n        },\n\n        formColumnAttrs() {\n            return this.hasStickyFrame ? \n                {\n                    'cols': '12',\n                    'sm': '12',\n                    'md': '12',\n                    'lg': '8',\n                    'xl': '6',\n                    'order-lg': '0',\n                    'order-xl': '0',\n                } :\n                {\n                    'cols': '12',\n                }\n\n        },\n\n        stickyColumnAttrs(){\n            return {\n                'cols': '12',\n                'sm': '12',\n                'md': '12',\n                'lg': '4',\n                'xl': '6',\n                'order-lg': '1',\n                'order-xl': '1',\n            };\n        },\n\n        ...mapState({\n            loading: state => state.form.loading,\n            errors: state => state.form.errors,\n        }),\n\n        \n    },\n    \n    methods: {\n        validate () {\n            this.$refs[this.reference].validate()\n        },\n        resetValidation () {\n            this.$refs[this.reference].resetValidation()\n        },\n\n        handleInput(v){\n            // __log(\n            //     'handleInput', \n            //     v.obj.key,\n            //     v.obj.value,\n            //     this.model\n            // )\n            // this.model = this.model;\n        },\n        handleUpdate(v){\n            __log('handleUpdate', v)\n        },\n        handleResize(v){\n            // __log('handleResize', v)\n            \n        },\n        handleBlur(v){\n            // __log('handleBlur', v)\n\n        },\n\n        saveForm(callback=null, errorCallback=null){\n\n            let fields = {};\n            Object.keys(this.defaultItem).forEach( (key,i) => {\n                fields[key] = (this.model[key]==null || this.defaultItem[key] != '') \n                    ? this.defaultItem[key]\n                    : this.model[key]\n            });\n\n            if(!!this.model.id)\n                fields.id = this.model.id;\n\n            // __log(\n            //     this.defaultItem,\n            //     fields,\n            // );\n            // return;\n            this.$store.commit(FORM.SET_EDITED_ITEM, fields);\n\n            this.$store.dispatch(ACTIONS.SAVE_FORM, {item:null, callback:callback, errorCallback:errorCallback})\n        },\n\n        submit () {\n            if(this.async){\n                this.saveForm();\n            }\n\n            // this.$v.$touch()\n        },\n    }\n\n}\n</script>\n\n<style>\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}