{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, resolveComponent as _resolveComponent, mergeProps as _mergeProps, withCtx as _withCtx, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_treeview = _resolveComponent(\"v-treeview\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" TREEVIEW \"), _createVNode(_component_v_treeview, _mergeProps({\n    modelValue: _ctx.input,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.input = $event),\n    active: _ctx.input,\n    open: _ctx.obj.schema.open\n  }, _ctx.obj.schema, {\n    items: _ctx.obj.schema.items\n  }), {\n    default: _withCtx(() => [_renderSlot(_ctx.$slots, \"default\"), _createCommentVNode(\" works with #[s]=\\\"slotData\\\" \\\" \"), _createCommentVNode(\" <template v-for=\\\"s in getInjectedScopedSlots(id, obj)\\\" #[s]=\\\"slotData\\\"><slot :name=\\\"getKeyInjectSlot(obj, s)\\\" v-bind= \\\"{ id, obj, index,  ...slotData}\\\" /></template> \")]),\n    _: 3 /* FORWARDED */\n  }, 16 /* FULL_PROPS */, [\"modelValue\", \"active\", \"open\", \"items\"]), _createCommentVNode(\" END TREEVIEW \")], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}