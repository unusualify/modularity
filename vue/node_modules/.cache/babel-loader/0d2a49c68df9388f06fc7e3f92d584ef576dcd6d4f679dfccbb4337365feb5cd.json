{"ast":null,"code":"import isEmpty from 'lodash/isEmpty';\n\n/*\n* Gather selected items in a selected object (currently used for medias and browsers)\n* if a block is passed as second argument, we retrieve selected items namespaced by the block id\n* and strip it out from the key to clean things up and make it easier for the backend\n*/\nconst gatherSelected = (selected, block = null) => {\n  return Object.assign({}, ...Object.keys(selected).map(key => {\n    if (block) {\n      if (isBlockField(key, block.id)) {\n        return {\n          [stripOutBlockNamespace(key, block.id)]: selected[key]\n        };\n      }\n    } else if (!key.startsWith('blocks[')) {\n      return {\n        [key]: selected[key]\n      };\n    }\n    return null;\n  }).filter(x => x));\n};\nexport const isBlockField = (name, id) => {\n  return name.startsWith('blocks[' + id + ']');\n};\nexport const stripOutBlockNamespace = (name, id) => {\n  const nameWithoutBlock = name.replace('blocks[' + id + '][', '');\n  return nameWithoutBlock.match(/]/gi).length > 1 ? nameWithoutBlock.replace(']', '') : nameWithoutBlock.slice(0, -1);\n};\nexport const buildBlock = (block, rootState) => {\n  return {\n    id: block.id,\n    type: block.type,\n    editor_name: block.name,\n    // retrieve all fields for this block and clean up field names\n    content: rootState.form.fields.filter(field => {\n      return isBlockField(field.name, block.id);\n    }).map(field => {\n      return {\n        name: stripOutBlockNamespace(field.name, block.id),\n        value: field.value\n      };\n    }).reduce((content, field) => {\n      content[field.name] = field.value;\n      return content;\n    }, {}),\n    medias: gatherSelected(rootState.mediaLibrary.selected, block),\n    browsers: gatherSelected(rootState.browser.selected, block),\n    // gather repeater blocks from the repeater store module\n    blocks: Object.assign({}, ...Object.keys(rootState.repeaters.repeaters).filter(repeaterKey => {\n      return repeaterKey.startsWith('blocks-' + block.id);\n    }).map(repeaterKey => {\n      return {\n        [repeaterKey.replace('blocks-' + block.id + '_', '')]: rootState.repeaters.repeaters[repeaterKey].map(repeaterItem => {\n          return buildBlock(repeaterItem, rootState);\n        })\n      };\n    }))\n  };\n};\nexport const isBlockEmpty = blockData => {\n  return isEmpty(blockData.content) && isEmpty(blockData.browsers) && isEmpty(blockData.medias) && isEmpty(blockData.blocks);\n};\nexport const gatherRepeaters = rootState => {\n  return Object.assign({}, ...Object.keys(rootState.repeaters.repeaters).filter(repeaterKey => {\n    // we start by filtering out repeater blocks\n    return !repeaterKey.startsWith('blocks-');\n  }).map(repeater => {\n    return {\n      [repeater]: rootState.repeaters.repeaters[repeater].map(repeaterItem => {\n        // and for each repeater we build a block for each item\n        const repeaterBlock = buildBlock(repeaterItem, rootState);\n\n        // we want to inline fields in the repeater object\n        // and we don't need the type of component used\n        const fields = repeaterBlock.content;\n        delete repeaterBlock.content;\n        delete repeaterBlock.type;\n\n        // and lastly we want to keep the id to update existing items\n        fields.id = repeaterItem.id;\n        return Object.assign(repeaterBlock, fields);\n      })\n    };\n  }));\n};\nexport const gatherBlocks = rootState => {\n  const used = {\n    ...rootState.blocks.blocks\n  };\n  return Object.keys(used).map(name => {\n    return used[name].map(block => {\n      block.name = name;\n      return buildBlock(block, rootState);\n    });\n  }).flat();\n};\nexport const getFormFields = rootState => {\n  const fields = rootState.form.fields.filter(field => {\n    // we start by filtering out blocks related form fields\n    return !field.name.startsWith('blocks[') && !field.name.startsWith('mediaMeta[');\n  }).reduce((fields, field) => {\n    // and we create a new object with field names as keys,\n    // to inline fields in the submitted data\n    fields[field.name] = field.value;\n    return fields;\n  }, {});\n  return fields;\n};\nexport const getModalFormFields = rootState => {\n  const fields = rootState.form.modalFields.filter(field => {\n    // we start by filtering out blocks related form fields\n    return !field.name.startsWith('blocks[') && !field.name.startsWith('mediaMeta[');\n  }).reduce((fields, field) => {\n    // and we create a new object with field names as keys,\n    // to inline fields in the submitted data\n    fields[field.name] = field.value;\n    return fields;\n  }, {});\n  return fields;\n};\nexport const getFormData = rootState => {\n  const fields = getFormFields(rootState);\n\n  // we can now create our submitted data object out of:\n  // - our just created fields object,\n  // - publication properties\n  // - selected medias and browsers\n  // - created blocks and repeaters\n  const data = Object.assign(fields, {\n    cmsSaveType: rootState.form.type,\n    published: rootState.publication.published,\n    public: rootState.publication.visibility === 'public',\n    publish_start_date: rootState.publication.startDate,\n    publish_end_date: rootState.publication.endDate,\n    languages: rootState.language.all,\n    parent_id: rootState.parents.active,\n    medias: gatherSelected(rootState.mediaLibrary.selected),\n    browsers: gatherSelected(rootState.browser.selected),\n    blocks: gatherBlocks(rootState),\n    repeaters: gatherRepeaters(rootState)\n  });\n  return data;\n};\nexport const getSchemaModel = inputs => {\n  // __log(inputs)\n  let isTreeview = 'custom-input-treeview|treeview';\n  let values = Object.keys(inputs).reduce((a, c) => {\n    if (isTreeview.includes(inputs[c].type)) {\n      a[inputs[c].name] = [];\n    } else if (__isObject(inputs[c])) {\n      a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c].default : '';\n    }\n    return a;\n  }, {});\n\n  // __log(values);\n  return values;\n  Object.keys(inputs).reduce((a, c) => (a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c].default : '', a), {});\n};\nexport const getSchema = inputs => {\n  // __log(inputs)\n  let values = Object.keys(inputs).reduce((a, c) => {\n    if (__isObject(inputs[c])) {\n      a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c].default : '';\n    } else if (Array.isArray(inputs[c])) {\n      a[inputs[c].name] = [];\n    }\n    return a;\n  }, {});\n  return values;\n  Object.keys(inputs).reduce((a, c) => (a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c].default : '', a), {});\n};","map":{"version":3,"names":["isEmpty","gatherSelected","selected","block","Object","assign","keys","map","key","isBlockField","id","stripOutBlockNamespace","startsWith","filter","x","name","nameWithoutBlock","replace","match","length","slice","buildBlock","rootState","type","editor_name","content","form","fields","field","value","reduce","medias","mediaLibrary","browsers","browser","blocks","repeaters","repeaterKey","repeaterItem","isBlockEmpty","blockData","gatherRepeaters","repeater","repeaterBlock","gatherBlocks","used","flat","getFormFields","getModalFormFields","modalFields","getFormData","data","cmsSaveType","published","publication","public","visibility","publish_start_date","startDate","publish_end_date","endDate","languages","language","all","parent_id","parents","active","getSchemaModel","inputs","isTreeview","values","a","c","includes","__isObject","hasOwnProperty","default","getSchema","Array","isArray"],"sources":["/Users/oguzhanbukcuoglu/Desktop/Projects/crm_template/packages/oobook/crm-base/vue/src/js/utils/getFormData.js"],"sourcesContent":["import isEmpty from 'lodash/isEmpty'\n\n/*\n* Gather selected items in a selected object (currently used for medias and browsers)\n* if a block is passed as second argument, we retrieve selected items namespaced by the block id\n* and strip it out from the key to clean things up and make it easier for the backend\n*/\nconst gatherSelected = (selected, block = null) => {\n  return Object.assign({}, ...Object.keys(selected).map(key => {\n    if (block) {\n      if (isBlockField(key, block.id)) {\n        return {\n          [stripOutBlockNamespace(key, block.id)]: selected[key]\n        }\n      }\n    } else if (!key.startsWith('blocks[')) {\n      return {\n        [key]: selected[key]\n      }\n    }\n    return null\n  }).filter(x => x))\n}\n\nexport const isBlockField = (name, id) => {\n  return name.startsWith('blocks[' + id + ']')\n}\n\nexport const stripOutBlockNamespace = (name, id) => {\n  const nameWithoutBlock = name.replace('blocks[' + id + '][', '')\n  return nameWithoutBlock.match(/]/gi).length > 1 ? nameWithoutBlock.replace(']', '') : nameWithoutBlock.slice(0, -1)\n}\n\nexport const buildBlock = (block, rootState) => {\n  return {\n    id: block.id,\n    type: block.type,\n    editor_name: block.name,\n    // retrieve all fields for this block and clean up field names\n    content: rootState.form.fields.filter((field) => {\n      return isBlockField(field.name, block.id)\n    }).map((field) => {\n      return {\n        name: stripOutBlockNamespace(field.name, block.id),\n        value: field.value\n      }\n    }).reduce((content, field) => {\n      content[field.name] = field.value\n      return content\n    }, {}),\n    medias: gatherSelected(rootState.mediaLibrary.selected, block),\n    browsers: gatherSelected(rootState.browser.selected, block),\n    // gather repeater blocks from the repeater store module\n    blocks: Object.assign({}, ...Object.keys(rootState.repeaters.repeaters).filter(repeaterKey => {\n      return repeaterKey.startsWith('blocks-' + block.id)\n    }).map(repeaterKey => {\n      return {\n        [repeaterKey.replace('blocks-' + block.id + '_', '')]: rootState.repeaters.repeaters[repeaterKey].map(repeaterItem => {\n          return buildBlock(repeaterItem, rootState)\n        })\n      }\n    }))\n  }\n}\n\nexport const isBlockEmpty = (blockData) => {\n  return isEmpty(blockData.content) && isEmpty(blockData.browsers) && isEmpty(blockData.medias) && isEmpty(blockData.blocks)\n}\n\nexport const gatherRepeaters = (rootState) => {\n  return Object.assign({}, ...Object.keys(rootState.repeaters.repeaters).filter(repeaterKey => {\n    // we start by filtering out repeater blocks\n    return !repeaterKey.startsWith('blocks-')\n  }).map(repeater => {\n    return {\n      [repeater]: rootState.repeaters.repeaters[repeater].map(repeaterItem => {\n        // and for each repeater we build a block for each item\n        const repeaterBlock = buildBlock(repeaterItem, rootState)\n\n        // we want to inline fields in the repeater object\n        // and we don't need the type of component used\n        const fields = repeaterBlock.content\n        delete repeaterBlock.content\n        delete repeaterBlock.type\n\n        // and lastly we want to keep the id to update existing items\n        fields.id = repeaterItem.id\n\n        return Object.assign(repeaterBlock, fields)\n      })\n    }\n  }))\n}\n\nexport const gatherBlocks = (rootState) => {\n  const used = { ...rootState.blocks.blocks }\n  return Object.keys(used).map(name => {\n    return used[name].map(block => {\n      block.name = name\n      return buildBlock(block, rootState)\n    })\n  }).flat()\n}\n\nexport const getFormFields = (rootState) => {\n  const fields = rootState.form.fields.filter((field) => {\n    // we start by filtering out blocks related form fields\n    return !field.name.startsWith('blocks[') && !field.name.startsWith('mediaMeta[')\n  }).reduce((fields, field) => {\n    // and we create a new object with field names as keys,\n    // to inline fields in the submitted data\n    fields[field.name] = field.value\n    return fields\n  }, {})\n\n  return fields\n}\n\nexport const getModalFormFields = (rootState) => {\n  const fields = rootState.form.modalFields.filter((field) => {\n    // we start by filtering out blocks related form fields\n    return !field.name.startsWith('blocks[') && !field.name.startsWith('mediaMeta[')\n  }).reduce((fields, field) => {\n    // and we create a new object with field names as keys,\n    // to inline fields in the submitted data\n    fields[field.name] = field.value\n    return fields\n  }, {})\n\n  return fields\n}\n\nexport const getFormData = (rootState) => {\n  const fields = getFormFields(rootState)\n\n  // we can now create our submitted data object out of:\n  // - our just created fields object,\n  // - publication properties\n  // - selected medias and browsers\n  // - created blocks and repeaters\n  const data = Object.assign(fields, {\n    cmsSaveType: rootState.form.type,\n    published: rootState.publication.published,\n    public: rootState.publication.visibility === 'public',\n    publish_start_date: rootState.publication.startDate,\n    publish_end_date: rootState.publication.endDate,\n    languages: rootState.language.all,\n    parent_id: rootState.parents.active,\n    medias: gatherSelected(rootState.mediaLibrary.selected),\n    browsers: gatherSelected(rootState.browser.selected),\n    blocks: gatherBlocks(rootState),\n    repeaters: gatherRepeaters(rootState)\n  })\n\n  return data\n}\n\nexport const getSchemaModel = (inputs) => {\n  // __log(inputs)\n  let isTreeview = 'custom-input-treeview|treeview';\n  let values = Object.keys(inputs).reduce( (a,c) => {\n      if(isTreeview.includes(inputs[c].type)){\n        a[inputs[c].name] = [];\n      }else if(__isObject(inputs[c])){\n        a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c].default : ''\n      }\n      return a;\n    }\n  , {});\n\n  // __log(values);\n  return values;\n\n  Object.keys(inputs).reduce( (a,c) => (\n      a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c].default : '', \n      a\n    )\n  , {})\n}\n\nexport const getSchema = (inputs) => {\n  // __log(inputs)\n  let values = Object.keys(inputs).reduce( (a,c) => {\n      if(__isObject(inputs[c])){\n        a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c].default : ''\n      }else if(Array.isArray(inputs[c])){\n        a[inputs[c].name] = [];\n      }\n      return a;\n    }\n  , {});\n  \n\n  return values;\n\n  Object.keys(inputs).reduce( (a,c) => (\n      a[inputs[c].name] = inputs[c].hasOwnProperty('default') ? inputs[c].default : '', \n      a\n    )\n  , {})\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}