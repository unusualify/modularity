{"ast":null,"code":"import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VSnackbar.css\";\n\n// Components\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VOverlay } from \"../VOverlay/index.mjs\"; // Composables\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.mjs\";\nimport { makeLocationProps, useLocation } from \"../../composables/location.mjs\";\nimport { makePositionProps, usePosition } from \"../../composables/position.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\nimport { mergeProps, onMounted, ref, watch } from 'vue';\nimport { genericComponent, omit, useRender } from \"../../util/index.mjs\";\nimport { filterVOverlayProps, makeVOverlayProps } from \"../VOverlay/VOverlay.mjs\";\nexport const VSnackbar = genericComponent()({\n  name: 'VSnackbar',\n  props: {\n    multiLine: Boolean,\n    timeout: {\n      type: [Number, String],\n      default: 5000\n    },\n    vertical: Boolean,\n    ...makeLocationProps({\n      location: 'bottom'\n    }),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeVariantProps(),\n    ...makeThemeProps(),\n    ...omit(makeVOverlayProps({\n      transition: 'v-snackbar-transition'\n    }), ['persistent', 'noClickAnimation', 'scrim', 'scrollStrategy'])\n  },\n  emits: {\n    'update:modelValue': v => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      locationStyles\n    } = useLocation(props);\n    const {\n      positionClasses\n    } = usePosition(props);\n    const {\n      scopeId\n    } = useScopeId();\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      colorClasses,\n      colorStyles,\n      variantClasses\n    } = useVariant(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const overlay = ref();\n    watch(isActive, startTimeout);\n    watch(() => props.timeout, startTimeout);\n    onMounted(() => {\n      if (isActive.value) startTimeout();\n    });\n    let activeTimeout = -1;\n    function startTimeout() {\n      window.clearTimeout(activeTimeout);\n      const timeout = Number(props.timeout);\n      if (!isActive.value || timeout === -1) return;\n      activeTimeout = window.setTimeout(() => {\n        isActive.value = false;\n      }, timeout);\n    }\n    function onPointerenter() {\n      window.clearTimeout(activeTimeout);\n    }\n    useRender(() => {\n      const [overlayProps] = filterVOverlayProps(props);\n      return _createVNode(VOverlay, _mergeProps({\n        \"ref\": overlay,\n        \"class\": ['v-snackbar', {\n          'v-snackbar--active': isActive.value,\n          'v-snackbar--multi-line': props.multiLine && !props.vertical,\n          'v-snackbar--vertical': props.vertical\n        }, positionClasses.value]\n      }, overlayProps, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"contentProps\": mergeProps({\n          style: locationStyles.value\n        }, overlayProps.contentProps),\n        \"persistent\": true,\n        \"noClickAnimation\": true,\n        \"scrim\": false,\n        \"scrollStrategy\": \"none\"\n      }, scopeId), {\n        default: () => [_createVNode(\"div\", {\n          \"class\": ['v-snackbar__wrapper', themeClasses.value, colorClasses.value, roundedClasses.value, variantClasses.value],\n          \"style\": [colorStyles.value],\n          \"onPointerenter\": onPointerenter,\n          \"onPointerleave\": startTimeout\n        }, [genOverlays(false, 'v-snackbar'), slots.default && _createVNode(\"div\", {\n          \"class\": \"v-snackbar__content\",\n          \"role\": \"status\",\n          \"aria-live\": \"polite\"\n        }, [slots.default()]), slots.actions && _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VBtn: {\n              variant: 'text',\n              ripple: false\n            }\n          }\n        }, {\n          default: () => [_createVNode(\"div\", {\n            \"class\": \"v-snackbar__actions\"\n          }, [slots.actions()])]\n        })])],\n        activator: slots.activator\n      });\n    });\n    return forwardRefs({}, overlay);\n  }\n});","map":{"version":3,"names":["VDefaultsProvider","VOverlay","genOverlays","makeVariantProps","useVariant","makeLocationProps","useLocation","makePositionProps","usePosition","makeRoundedProps","useRounded","makeThemeProps","provideTheme","useProxiedModel","useScopeId","forwardRefs","mergeProps","onMounted","ref","watch","genericComponent","omit","useRender","filterVOverlayProps","makeVOverlayProps","VSnackbar","name","props","multiLine","Boolean","timeout","type","Number","String","default","vertical","location","transition","emits","v","setup","_ref","slots","isActive","locationStyles","positionClasses","scopeId","themeClasses","colorClasses","colorStyles","variantClasses","roundedClasses","overlay","startTimeout","value","activeTimeout","window","clearTimeout","setTimeout","onPointerenter","overlayProps","_createVNode","_mergeProps","$event","style","contentProps","actions","VBtn","variant","ripple","activator"],"sources":["../../../src/components/VSnackbar/VSnackbar.tsx"],"sourcesContent":["// Styles\nimport './VSnackbar.sass'\n\n// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { mergeProps, onMounted, ref, watch } from 'vue'\nimport { genericComponent, omit, useRender } from '@/util'\nimport { filterVOverlayProps, makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\ntype VSnackbarSlots = {\n  activator: [{ isActive: boolean, props: Record<string, any> }]\n  default: []\n  actions: []\n}\n\nexport const VSnackbar = genericComponent<VSnackbarSlots>()({\n  name: 'VSnackbar',\n\n  props: {\n    multiLine: Boolean,\n    timeout: {\n      type: [Number, String],\n      default: 5000,\n    },\n    vertical: Boolean,\n\n    ...makeLocationProps({ location: 'bottom' } as const),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeVariantProps(),\n    ...makeThemeProps(),\n    ...omit(makeVOverlayProps({\n      transition: 'v-snackbar-transition',\n    }), ['persistent', 'noClickAnimation', 'scrim', 'scrollStrategy']),\n  },\n\n  emits: {\n    'update:modelValue': (v: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { scopeId } = useScopeId()\n    const { themeClasses } = provideTheme(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { roundedClasses } = useRounded(props)\n\n    const overlay = ref<VOverlay>()\n\n    watch(isActive, startTimeout)\n    watch(() => props.timeout, startTimeout)\n\n    onMounted(() => {\n      if (isActive.value) startTimeout()\n    })\n\n    let activeTimeout = -1\n    function startTimeout () {\n      window.clearTimeout(activeTimeout)\n      const timeout = Number(props.timeout)\n\n      if (!isActive.value || timeout === -1) return\n\n      activeTimeout = window.setTimeout(() => {\n        isActive.value = false\n      }, timeout)\n    }\n\n    function onPointerenter () {\n      window.clearTimeout(activeTimeout)\n    }\n\n    useRender(() => {\n      const [overlayProps] = filterVOverlayProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-snackbar',\n            {\n              'v-snackbar--active': isActive.value,\n              'v-snackbar--multi-line': props.multiLine && !props.vertical,\n              'v-snackbar--vertical': props.vertical,\n            },\n            positionClasses.value,\n          ]}\n          { ...overlayProps }\n          v-model={ isActive.value }\n          contentProps={ mergeProps({\n            style: locationStyles.value,\n          }, overlayProps.contentProps) }\n          persistent\n          noClickAnimation\n          scrim={ false }\n          scrollStrategy=\"none\"\n          { ...scopeId }\n          v-slots={{ activator: slots.activator }}\n        >\n          <div\n            class={[\n              'v-snackbar__wrapper',\n              themeClasses.value,\n              colorClasses.value,\n              roundedClasses.value,\n              variantClasses.value,\n            ]}\n            style={[colorStyles.value]}\n            onPointerenter={ onPointerenter }\n            onPointerleave={ startTimeout }\n          >\n            { genOverlays(false, 'v-snackbar') }\n\n            { slots.default && (\n              <div\n                class=\"v-snackbar__content\"\n                role=\"status\"\n                aria-live=\"polite\"\n              >\n                { slots.default() }\n              </div>\n            ) }\n\n            { slots.actions && (\n              <VDefaultsProvider\n                defaults={{\n                  VBtn: {\n                    variant: 'text',\n                    ripple: false,\n                  },\n                }}\n              >\n                <div class=\"v-snackbar__actions\">\n                  { slots.actions() }\n                </div>\n              </VDefaultsProvider>\n            ) }\n          </div>\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VSnackbar = InstanceType<typeof VSnackbar>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}