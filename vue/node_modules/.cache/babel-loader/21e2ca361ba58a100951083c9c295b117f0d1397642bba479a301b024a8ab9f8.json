{"ast":null,"code":"import _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { mapGetters, mapState } from 'vuex';\nimport { FORM } from '@/store/mutations/index';\nimport ACTIONS from '@/store/actions';\nexport default {\n  // name: \"ue-form\",\n  props: {\n    value: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    inputs: {\n      type: Array\n    },\n    async: {\n      type: Boolean,\n      \"default\": true\n    },\n    hasSubmit: {\n      type: Boolean,\n      \"default\": false\n    },\n    buttonFloat: {\n      type: String,\n      \"default\": 'right'\n    },\n    buttonPosition: {\n      type: String,\n      \"default\": 'bottom'\n    },\n    stickyButton: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      id: Math.ceil(Math.random() * 1000000) + '-form',\n      valid: false\n    };\n  },\n  created: function created() {\n    // Object.fromEntries(this.inputs[1].extras.map(v => ([v,true])))\n    // console.log(this.inputs[2])\n  },\n  computed: _objectSpread(_objectSpread({\n    issetModel: function issetModel() {\n      return Object.keys(this.value).length > 0;\n    },\n    model: {\n      get: function get() {\n        return this.issetModel ? this.value : this.$store.state.form.editedItem;\n      },\n      set: function set(value) {\n        // __log('Form.vue->model set', value)\n        // this.$store.commit(FORM.SET_EDITED_ITEM, value);\n      }\n    },\n    formInputs: {\n      get: function get() {\n        var _ref, _this$inputs;\n        // __log(this.inputs ?? this.$store.state.form.inputs ?? [])\n        return (_ref = (_this$inputs = this.inputs) !== null && _this$inputs !== void 0 ? _this$inputs : this.$store.state.form.inputs) !== null && _ref !== void 0 ? _ref : [];\n      },\n      set: function set(value) {\n        __log('form->inputs set', value);\n        // this.$store.commit(FORM.SET_EDITED_ITEM, value);\n      }\n    }\n  }, mapState({\n    loading: function loading(state) {\n      return state.form.loading;\n    },\n    errors: function errors(state) {\n      return state.form.errors;\n    }\n  })), mapGetters(['defaultItem'])),\n  methods: {\n    // update(key, value) {\n    //     __log('form->update', key, value);\n    //     // this.$emit('input', { ...this.value, [key]: value })\n    // },\n    saveForm: function saveForm() {\n      var _this = this;\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var errorCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      __log(this.model);\n      return;\n      var fields = {};\n      Object.keys(this.defaultItem).forEach(function (key, i) {\n        fields[key] = _this.$store.state.form.editedItem[key] == null || _this.defaultItem[key] != '' ? _this.defaultItem[key] : _this.$store.state.form.editedItem[key];\n      });\n      if (this.$store.state.form.editedItem.id) {\n        fields.id = this.$store.state.form.editedItem.id;\n      }\n      this.$store.commit(FORM.SET_EDITED_ITEM, fields);\n      this.$store.dispatch(ACTIONS.SAVE_FORM, {\n        item: null,\n        callback: callback,\n        errorCallback: errorCallback\n      });\n    },\n    submit: function submit() {\n      if (this.async) {\n        this.saveForm();\n      }\n\n      // this.$v.$touch()\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","mapState","FORM","ACTIONS","props","value","type","Object","_default","inputs","Array","async","Boolean","hasSubmit","buttonFloat","String","buttonPosition","stickyButton","data","id","Math","ceil","random","valid","created","computed","_objectSpread","issetModel","keys","length","model","get","$store","state","form","editedItem","set","formInputs","_ref","_this$inputs","__log","loading","errors","methods","saveForm","_this","callback","arguments","undefined","errorCallback","fields","defaultItem","forEach","key","i","commit","SET_EDITED_ITEM","dispatch","SAVE_FORM","item","submit"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/Form.vue"],"sourcesContent":["<template>\n\n    <v-form v-model=\"valid\" @submit.prevent=\"submit\" :id=\"id\" >\n\n        <v-container>\n\n            <v-row>\n                <v-col\n                    :cols=\"12\"\n                    :sm=\"12\"\n                    :md=\"12\"\n                    :lg=\"4\"\n                    :xl=\"6\"\n\n                    :order-lg=\"1\"\n                    :order-xl=\"1\"\n                    class=\"d-flex flex-column\"\n                    style=\"position:sticky;\"\n\n                    >\n                        <div class=\"d-flex flex-column align-items-center\" style=\"position:sticky;top:100px;\">\n                            <slot\n                                v-if=\"stickyButton && hasSubmit\"\n                                name=\"submitButton\"\n                                :attrs=\"{\n\n                                }\"\n                                :on=\"{\n\n                                }\"\n                                >\n                                <ue-btn\n                                    :form=\"id\"\n                                    type=\"submit\"\n                                    width=\"60%\"\n                                    class=\"mb-6\"\n                                    >\n                                    {{ $t('submit') }}\n                                </ue-btn>\n                            </slot>\n\n                            <!-- <v-card class=\"mt-6\" height=\"\">\n                                    <div>\n                                        <v-icon>mdi-camera</v-icon>\n                                        <h3>Upload</h3>\n                                    </div>\n                            </v-card> -->\n                        </div>\n                        <!-- <v-spacer></v-spacer> -->\n\n                </v-col>\n\n                <v-col\n                    :cols=\"12\"\n                    :sm=\"12\"\n                    :md=\"12\"\n                    :lg=\"8\"\n                    :xl=\"6\"\n\n                    :order-lg=\"0\"\n                    :order-xl=\"0\"\n                    >\n\n                    <slot\n                        name=\"body\"\n                        :attrs=\"{\n                            // inputs: this.formInputs,\n                            // item: this.editedItem\n                        }\"\n                        >\n                        <v-row>\n                            <v-col\n                                v-for=\"(input, i) in formInputs\"\n                                :key =\"i\"\n                                :index=\"i\"\n                                :cols='input.cols'\n                                :sm='input.sm'\n                                :md='input.md'\n                                :lg='input.lg'\n                                :xl='input.xl'\n                            >\n                                <component\n                                    :is=\"`ue-input-${input.type}`\"\n                                    v-model=\"model[input.name]\"\n                                    :attributes=\"input\"\n                                    />\n\n                            </v-col>\n                        </v-row>\n                    </slot>\n                </v-col>\n\n            </v-row>\n\n        </v-container>\n\n        <!-- <v-divider></v-divider> -->\n\n        <v-container v-if=\"!stickyButton && hasSubmit\">\n                <!-- <v-spacer></v-spacer> -->\n                <slot\n                    name=\"submitButton\"\n                    :attrs=\"{\n\n                    }\"\n                    :on=\"{\n\n                    }\"\n                    >\n                    <ue-btn\n                        :form=\"id\"\n                        type=\"submit\"\n                        right\n                        >\n                        {{ $t('submit') }}\n                    </ue-btn>\n                </slot>\n        </v-container>\n\n        <v-container>\n            <v-text-field\n                v-if=\"loading\"\n                color=\"success\"\n                loading\n                disabled\n            />\n        </v-container>\n\n    </v-form>\n\n</template>\n\n<script>\nimport { mapGetters, mapState } from 'vuex'\nimport { FORM } from '@/store/mutations/index'\nimport ACTIONS from '@/store/actions'\n\nexport default {\n  // name: \"ue-form\",\n  props: {\n    value: {\n      type: Object,\n      default () {\n        return {}\n      }\n    },\n    inputs: {\n      type: Array\n    },\n    async: {\n      type: Boolean,\n      default: true\n    },\n    hasSubmit: {\n      type: Boolean,\n      default: false\n    },\n    buttonFloat: {\n      type: String,\n      default: 'right'\n    },\n    buttonPosition: {\n      type: String,\n      default: 'bottom'\n    },\n    stickyButton: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      id: Math.ceil(Math.random() * 1000000) + '-form',\n      valid: false\n    }\n  },\n\n  created () {\n    // Object.fromEntries(this.inputs[1].extras.map(v => ([v,true])))\n    // console.log(this.inputs[2])\n  },\n\n  computed: {\n    issetModel () {\n      return Object.keys(this.value).length > 0\n    },\n    model: {\n      get () {\n        return this.issetModel ? this.value : this.$store.state.form.editedItem\n      },\n      set (value) {\n        // __log('Form.vue->model set', value)\n        // this.$store.commit(FORM.SET_EDITED_ITEM, value);\n\n      }\n    },\n    formInputs: {\n      get () {\n        // __log(this.inputs ?? this.$store.state.form.inputs ?? [])\n        return this.inputs ?? this.$store.state.form.inputs ?? []\n      },\n      set (value) {\n        __log('form->inputs set', value)\n        // this.$store.commit(FORM.SET_EDITED_ITEM, value);\n      }\n    },\n    ...mapState({\n      loading: state => state.form.loading,\n      errors: state => state.form.errors\n    }),\n\n    ...mapGetters([\n      'defaultItem'\n    ])\n  },\n\n  methods: {\n    // update(key, value) {\n    //     __log('form->update', key, value);\n    //     // this.$emit('input', { ...this.value, [key]: value })\n    // },\n\n    saveForm (callback = null, errorCallback = null) {\n      __log(\n        this.model\n      )\n      return\n      const fields = {}\n\n      Object.keys(this.defaultItem).forEach((key, i) => {\n        fields[key] = (this.$store.state.form.editedItem[key] == null || this.defaultItem[key] != '')\n          ? this.defaultItem[key]\n          : this.$store.state.form.editedItem[key]\n      })\n\n      if (this.$store.state.form.editedItem.id) { fields.id = this.$store.state.form.editedItem.id }\n\n      this.$store.commit(FORM.SET_EDITED_ITEM, fields)\n\n      this.$store.dispatch(ACTIONS.SAVE_FORM, { item: null, callback, errorCallback })\n    },\n\n    submit () {\n      if (this.async) {\n        this.saveForm()\n      }\n\n      // this.$v.$touch()\n    }\n  }\n\n}\n</script>\n\n<style>\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}