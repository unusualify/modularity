{"ast":null,"code":"import _typeof from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nexport default function (formNode) {\n  // We are not using FormaData because this can be used for get requests (where you need to send direct params)\n\n  var formRef = null;\n\n  /**\n   * Defaults\n   */\n\n  var includeEmptyValuedElements = false;\n\n  // Currently matching only '[]'.\n  var keyRegex = /[^\\[\\]]+|\\[\\]/g; // eslint-disable-line\n  var $form = null;\n  var $formElements = [];\n\n  /**\n   * Private methods\n   */\n\n  /**\n   * Check to see if the object is a HTML node.\n   *\n   * @param {object} node\n   * @returns {boolean}\n   */\n  function isDomElementNode(node) {\n    return !!(node && _typeof(node) === 'object' && 'nodeType' in node && node.nodeType === 1);\n  }\n\n  /**\n   * Check for last numeric key.\n   *\n   * @param o object\n   * @return mixed (string|undefined)\n   */\n  function checkForLastNumericKey(o) {\n    if (!o || _typeof(o) !== 'object') {\n      return undefined;\n    }\n    return Object.keys(o).filter(function (elem) {\n      return !isNaN(parseInt(elem, 10));\n    }).splice(-1)[0];\n  }\n\n  /**\n   * Get last numeric key from an object.\n   * @param o object\n   * @return int\n   */\n  function getLastIntegerKey(o) {\n    var lastKeyIndex = checkForLastNumericKey(o);\n    if (typeof lastKeyIndex === 'string') {\n      return parseInt(lastKeyIndex, 10);\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * Get the next numeric key (like the index from a PHP array)\n   * @param o object\n   * @return int\n   */\n  function getNextIntegerKey(o) {\n    var lastKeyIndex = checkForLastNumericKey(o);\n    if (typeof lastKeyIndex === 'string') {\n      return parseInt(lastKeyIndex, 10) + 1;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * Get the real number of properties from an object.\n   *\n   * @param {object} o\n   * @returns {number}\n   */\n  function getObjLength(o) {\n    if (_typeof(o) !== 'object' || o === null) {\n      return 0;\n    }\n    var l = 0;\n    var k;\n    if (typeof Object.keys === 'function') {\n      l = Object.keys(o).length;\n    } else {\n      for (k in o) {\n        if (o.hasOwnProperty(k)) {\n          l++;\n        }\n      }\n    }\n    return l;\n  }\n\n  // Iteration through arrays.\n  // Compatible with IE.\n  function forEach(arr, callback) {\n    if ([].forEach) {\n      return [].forEach.call(arr, callback);\n    }\n    var i;\n    for (i = 0; i < arr.length; i++) {\n      callback.call(arr, arr[i], i);\n    }\n  }\n\n  // Constructor\n  function init(formNode) {\n    // Assign the current form reference.\n    if (!formNode) return false;\n    formRef = formNode;\n    if (!setForm()) {\n      return false;\n    }\n    if (!setFormElements()) {\n      return false;\n    }\n    return convertToObj();\n  }\n\n  // Set the main form object we are working on.\n  function setForm() {\n    switch (_typeof(formRef)) {\n      case 'string':\n        $form = document.getElementById(formRef);\n        break;\n      case 'object':\n        if (isDomElementNode(formRef)) {\n          $form = formRef;\n        }\n        break;\n    }\n    return $form;\n  }\n  function isUploadForm() {\n    return !!($form.enctype && $form.enctype === 'multipart/form-data');\n  }\n\n  // Set the elements we need to parse.\n  function setFormElements() {\n    $formElements = $form.querySelectorAll('input, textarea, select');\n    return $formElements.length;\n  }\n  function isRadio($domNode) {\n    return $domNode.nodeName === 'INPUT' && $domNode.type === 'radio';\n  }\n  function isCheckbox($domNode) {\n    return $domNode.nodeName === 'INPUT' && $domNode.type === 'checkbox';\n  }\n  function isFileField($domNode) {\n    return $domNode.nodeName === 'INPUT' && $domNode.type === 'file';\n  }\n  function isTextarea($domNode) {\n    return $domNode.nodeName === 'TEXTAREA';\n  }\n  function isSelectSimple($domNode) {\n    return $domNode.nodeName === 'SELECT' && $domNode.type === 'select-one';\n  }\n  function isSelectMultiple($domNode) {\n    return $domNode.nodeName === 'SELECT' && $domNode.type === 'select-multiple';\n  }\n  function isSubmitButton($domNode) {\n    return $domNode.nodeName === 'BUTTON' && $domNode.type === 'submit';\n  }\n  function isChecked($domNode) {\n    return $domNode.checked;\n  }\n\n  // function isMultiple($domNode){\n  //  return ($domNode.multiple ? true : false);\n  // }\n\n  function isFileList($domNode) {\n    return window.FileList && $domNode.files instanceof window.FileList;\n  }\n  function getNodeValues($domNode) {\n    // We're only interested in the radio that is checked.\n    if (isRadio($domNode)) {\n      return isChecked($domNode) ? $domNode.value : false;\n    }\n\n    // We're only interested in the checkbox that is checked.\n    if (isCheckbox($domNode)) {\n      return isChecked($domNode) ? $domNode.value : false;\n    }\n\n    // File inputs are a special case.\n    // We have to grab the .files property of the input, which is a FileList.\n    if (isFileField($domNode)) {\n      // Ignore input file fields if the form is not encoded properly.\n      if (isUploadForm()) {\n        // HTML5 compatible browser.\n        if (isFileList($domNode) && $domNode.files.length > 0) {\n          return $domNode.files;\n        } else {\n          return $domNode.value && $domNode.value !== '' ? $domNode.value : false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n    // We're only interested in textarea fields that have values.\n    if (isTextarea($domNode)) {\n      return $domNode.value && $domNode.value !== '' ? $domNode.value : false;\n    }\n    if (isSelectSimple($domNode)) {\n      if ($domNode.value && $domNode.value !== '') {\n        return $domNode.value;\n      } else if ($domNode.options && $domNode.options.length && $domNode.options[0].value !== '') {\n        return $domNode.options[0].value;\n      } else {\n        return false;\n      }\n    }\n\n    // We're only interested in multiple selects that have at least one option selected.\n    if (isSelectMultiple($domNode)) {\n      if ($domNode.options && $domNode.options.length > 0) {\n        var values = [];\n        forEach($domNode.options, function ($option) {\n          if ($option.selected) {\n            values.push($option.value);\n          }\n        });\n        if (includeEmptyValuedElements) {\n          return values;\n        } else {\n          return values.length ? values : false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n    // We're only interested if the button is type=\"submit\"\n    if (isSubmitButton($domNode)) {\n      if ($domNode.value && $domNode.value !== '') {\n        return $domNode.value;\n      }\n      if ($domNode.innerText && $domNode.innerText !== '') {\n        return $domNode.innerText;\n      }\n      return false;\n    }\n\n    // Fallback or other non special fields.\n    if (typeof $domNode.value !== 'undefined') {\n      if (includeEmptyValuedElements) {\n        return $domNode.value;\n      } else {\n        return $domNode.value !== '' ? $domNode.value : false;\n      }\n    } else {\n      return false;\n    }\n  }\n  function processSingleLevelNode($domNode, arr, domNodeValue, result) {\n    // Get the last remaining key.\n    var key = arr[0];\n\n    // We're only interested in the radio that is checked.\n    if (isRadio($domNode)) {\n      if (domNodeValue !== false) {\n        result[key] = domNodeValue;\n        return domNodeValue;\n      } else {\n        return;\n      }\n    }\n\n    // Checkboxes are a special case.\n    // We have to grab each checked values\n    // and put them into an array.\n    if (isCheckbox($domNode)) {\n      if (domNodeValue !== false) {\n        if (!result[key]) {\n          result[key] = [];\n        }\n        return result[key].push(domNodeValue);\n      } else {\n        return;\n      }\n    }\n\n    // Multiple select is a special case.\n    // We have to grab each selected option and put them into an array.\n    if (isSelectMultiple($domNode)) {\n      if (domNodeValue !== false) {\n        result[key] = domNodeValue;\n      } else {\n        return;\n      }\n    }\n\n    // Fallback or other cases that don't\n    // need special treatment of the value.\n    result[key] = domNodeValue;\n    return domNodeValue;\n  }\n  function processMultiLevelNode($domNode, arr, value, result) {\n    var keyName = arr[0];\n    if (arr.length > 1) {\n      if (keyName === '[]') {\n        // result.push({});\n        result[getNextIntegerKey(result)] = {};\n        return processMultiLevelNode($domNode, arr.splice(1, arr.length), value, result[getLastIntegerKey(result)]);\n      } else {\n        if (result[keyName] && getObjLength(result[keyName]) > 0) {\n          // result[keyName].push(null);\n          return processMultiLevelNode($domNode, arr.splice(1, arr.length), value, result[keyName]);\n        } else {\n          result[keyName] = {};\n        }\n        return processMultiLevelNode($domNode, arr.splice(1, arr.length), value, result[keyName]);\n      }\n    }\n\n    // Last key, attach the original value.\n    if (arr.length === 1) {\n      if (keyName === '[]') {\n        // result.push(value);\n        result[getNextIntegerKey(result)] = value;\n        return result;\n      } else {\n        processSingleLevelNode($domNode, arr, value, result);\n\n        //  result[keyName] = value;\n        return result;\n      }\n    }\n  }\n  function convertToObj() {\n    var i = 0;\n    var objKeyNames;\n    var $domNode;\n    var domNodeValue;\n    var result = {};\n    for (i = 0; i < $formElements.length; i++) {\n      $domNode = $formElements[i];\n\n      // Skip the element if the 'name' attribute is empty.\n      // Skip the 'disabled' elements.\n      // Skip the non selected radio elements.\n      if (!$domNode.name || $domNode.name === '' || $domNode.disabled || isRadio($domNode) && !isChecked($domNode)) {\n        continue;\n      }\n\n      // Get the final processed domNode value.\n      domNodeValue = getNodeValues($domNode);\n\n      // Exclude empty valued nodes if the settings allow it.\n      if (domNodeValue === false && !includeEmptyValuedElements) {\n        continue;\n      }\n\n      // Extract all possible keys\n      // Eg. name=\"firstName\", name=\"settings[a][b]\", name=\"settings[0][a]\"\n      objKeyNames = $domNode.name.match(keyRegex);\n      if (objKeyNames.length === 1) {\n        processSingleLevelNode($domNode, objKeyNames, domNodeValue || '', result);\n      }\n      if (objKeyNames.length > 1) {\n        processMultiLevelNode($domNode, objKeyNames, domNodeValue || '', result);\n      }\n    }\n\n    // Check the length of the result.\n    var resultLength = getObjLength(result);\n    return resultLength > 0 ? result : false;\n  }\n  return init(formNode);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}