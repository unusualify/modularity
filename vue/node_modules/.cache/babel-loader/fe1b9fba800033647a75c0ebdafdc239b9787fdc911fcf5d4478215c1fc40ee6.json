{"ast":null,"code":"import _defineProperty from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport { createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, resolveComponent as _resolveComponent, mergeProps as _mergeProps, withCtx as _withCtx, createSlots as _createSlots, createBlock as _createBlock, toHandlerKey as _toHandlerKey, createVNode as _createVNode, resolveDynamicComponent as _resolveDynamicComponent, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveDirective as _resolveDirective, withDirectives as _withDirectives, vShow as _vShow, createElementVNode as _createElementVNode } from \"vue\";\nvar _hoisted_1 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_v_radio = _resolveComponent(\"v-radio\");\n  var _component_v_radio_group = _resolveComponent(\"v-radio-group\");\n  var _component_v_text_field = _resolveComponent(\"v-text-field\");\n  var _component_v_menu = _resolveComponent(\"v-menu\");\n  var _component_v_custom_form_base = _resolveComponent(\"v-custom-form-base\");\n  var _component_v_card_title = _resolveComponent(\"v-card-title\");\n  var _component_v_card_subtitle = _resolveComponent(\"v-card-subtitle\");\n  var _component_v_form_base = _resolveComponent(\"v-form-base\");\n  var _component_v_toolbar_title = _resolveComponent(\"v-toolbar-title\");\n  var _component_v_toolbar = _resolveComponent(\"v-toolbar\");\n  var _component_v_list_item = _resolveComponent(\"v-list-item\");\n  var _component_v_list = _resolveComponent(\"v-list\");\n  var _component_v_file_input = _resolveComponent(\"v-file-input\");\n  var _component_v_icon = _resolveComponent(\"v-icon\");\n  var _component_v_slider = _resolveComponent(\"v-slider\");\n  var _component_v_img = _resolveComponent(\"v-img\");\n  var _component_v_btn = _resolveComponent(\"v-btn\");\n  var _component_v_btn_toggle = _resolveComponent(\"v-btn-toggle\");\n  var _component_v_col = _resolveComponent(\"v-col\");\n  var _component_v_spacer = _resolveComponent(\"v-spacer\");\n  var _component_v_tooltip = _resolveComponent(\"v-tooltip\");\n  var _component_v_row = _resolveComponent(\"v-row\");\n  var _directive_mask = _resolveDirective(\"mask\");\n  var _directive_intersect = _resolveDirective(\"intersect\");\n  var _directive_touch = _resolveDirective(\"touch\");\n  var _directive_click_outside = _resolveDirective(\"click-outside\");\n  var _directive_resize = _resolveDirective(\"resize\");\n  return _withDirectives((_openBlock(), _createBlock(_component_v_row, _mergeProps({\n    id: $props.id\n  }, $options.getRow), {\n    \"default\": _withCtx(function () {\n      return [_createCommentVNode(\" FORM-BASE TOP SLOT \"), _renderSlot(_ctx.$slots, $options.getFormTopSlot(), {\n        id: $props.id\n      }), _createCommentVNode(\" main loop over components/controls \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.flatCombinedArraySorted, function (obj, index) {\n        return _openBlock(), _createElementBlock(_Fragment, {\n          key: index\n        }, [_createCommentVNode(\" Tooltip Wrapper \"), _createVNode(_component_v_tooltip, _mergeProps({\n          disabled: !obj.schema.tooltip\n        }, $options.getShorthandTooltip(obj.schema.tooltip)), {\n          activator: _withCtx(function (_ref) {\n            var props = _ref.props;\n            return [_withDirectives((_openBlock(), _createBlock(_component_v_col, _mergeProps({\n              key: index\n            }, _objectSpread(_objectSpread({}, $options.getGridAttributes(obj)), props), {\n              \"class\": $options.getClassName(obj),\n              draggable: obj.schema.drag,\n              onMouseenter: function onMouseenter($event) {\n                return $options.onEvent($event, obj);\n              },\n              onMouseleave: function onMouseleave($event) {\n                return $options.onEvent($event, obj);\n              },\n              onDragstart: function onDragstart($event) {\n                return $options.dragstart($event, obj);\n              },\n              onDragover: function onDragover($event) {\n                return $options.dragover($event, obj);\n              },\n              onDrop: function onDrop($event) {\n                return $options.drop($event, obj);\n              }\n            }), {\n              \"default\": _withCtx(function () {\n                return [_createCommentVNode(\" slot on top of type  -> <div slot=\\\"slot-bottom-type-[propertyName]\\\"> \"), _renderSlot(_ctx.$slots, $options.getTypeTopSlot(obj), _normalizeProps(_guardReactiveProps({\n                  obj: obj,\n                  index: index,\n                  id: $props.id\n                }))), _createCommentVNode(\" slot on top of key  -> <v-btn slot=\\\"slot-bottom-key-[propertyName]\\\"> \"), _renderSlot(_ctx.$slots, $options.getKeyTopSlot(obj), _normalizeProps(_guardReactiveProps({\n                  obj: obj,\n                  index: index,\n                  id: $props.id\n                }))), _createCommentVNode(\" slot replaces complete item of defined TYPE -> <v-btn slot=\\\"slot-item-type-[propertyName]\\\">\"), _renderSlot(_ctx.$slots, $options.getTypeItemSlot(obj), _normalizeProps(_guardReactiveProps({\n                  obj: obj,\n                  index: index,\n                  id: $props.id\n                })), function () {\n                  return [_createCommentVNode(\" slot replaces complete item of defined KEY -> <div slot=\\\"slot-item-key-[propertyName]\\\">\"), _renderSlot(_ctx.$slots, $options.getKeyItemSlot(obj), _normalizeProps(_guardReactiveProps({\n                    obj: obj,\n                    index: index,\n                    id: $props.id\n                  })), function () {\n                    var _mergeProps3, _mergeProps5;\n                    return [_createCommentVNode(\" <div class=\\\"caption\\\">\\n                    OBJ:{{obj}}\\n                    <br>\\n                    FORM:{{getFormTopSlot()}}\\n                    <br>\\n                    INJECT:{{getKeyInjectSlot(obj)}}\\n                    <br>\\n                    ARRAY:{{getArrayItemSlot(obj)}}\\n                    <br>\\n                    TYPE:{{getTypeItemSlot(obj)}}\\n                    <br>\\n                    KEY:{{getKeyItemSlot(obj)}}\\n                    <br>\\n                    CLASS:{{getClassName(obj)}}\\n                    <br>\\n                    Slots: {{getInjectedScopedSlots(id, obj)}}\\n                    <br>\\n                    VAL:{{setValue(obj)}}\\n                  </div> \"), _createCommentVNode(\" RADIO \"), obj.schema.type === 'radio' ? (_openBlock(), _createBlock(_component_v_radio_group, _mergeProps({\n                      key: 0\n                    }, $options.bindSchema(obj), {\n                      value: $options.setValue(obj),\n                      onChange: function onChange($event) {\n                        return $options.onInput($event, obj);\n                      }\n                    }), {\n                      \"default\": _withCtx(function () {\n                        return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(obj.schema.options, function (option, idx) {\n                          return _openBlock(), _createBlock(_component_v_radio, _mergeProps({\n                            key: idx\n                          }, $options.bindOptions(option)), _createSlots({\n                            _: 2 /* DYNAMIC */\n                          }, [_renderList($options.getInjectedScopedSlots($props.id, obj), function (s) {\n                            return {\n                              name: s,\n                              fn: _withCtx(function () {\n                                return [_renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({\n                                  id: $props.id,\n                                  obj: obj,\n                                  index: index,\n                                  idx: idx,\n                                  option: option\n                                })))];\n                              })\n                            };\n                          })]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */);\n                        }), 128 /* KEYED_FRAGMENT */))];\n                      }),\n\n                      _: 2 /* DYNAMIC */\n                    }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"value\", \"onChange\"])) : $options.isDateTimeColorTypeAndExtensionText(obj) ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 1\n                    }, [_createCommentVNode(\" END RADIO \"), _createCommentVNode(\" DATE, TIME, COLOR TEXT-MENU \"), _createVNode(_component_v_menu, _normalizeProps(_guardReactiveProps($options.bindSchemaMenu(obj))), {\n                      activator: _withCtx(function (_ref2) {\n                        var props = _ref2.props;\n                        return [_createVNode(_component_v_text_field, _mergeProps(_objectSpread(_objectSpread({}, $options.bindSchemaText(obj)), props), {\n                          value: $options.setValue(obj)\n                        }, _defineProperty({}, _toHandlerKey($options.suspendClickAppend(obj)), function ($event) {\n                          return $options.onEvent($event, obj, $data.append);\n                        }), {\n                          \"onClick:appendOuter\": function onClickAppendOuter($event) {\n                            return $options.onEvent($event, obj, $data.appendOuter);\n                          },\n                          \"onClick:prepend\": function onClickPrepend($event) {\n                            return $options.onEvent($event, obj, $data.prepend);\n                          },\n                          \"onClick:prependInner\": function onClickPrependInner($event) {\n                            return $options.onEvent($event, obj, $data.prependInner);\n                          }\n                        }), null, 16 /* FULL_PROPS */, [\"value\", \"onClick:appendOuter\", \"onClick:prepend\", \"onClick:prependInner\"]), _createCommentVNode(\" SLOTS append|prepend|message for picker not avilable, try custom component \")];\n                      }),\n                      \"default\": _withCtx(function () {\n                        return [(_openBlock(), _createBlock(_resolveDynamicComponent($options.mapTypeToComponent(obj.schema.type)), _mergeProps($options.bindSchema(obj), {\n                          type: $options.checkInternType(obj),\n                          value: $options.setValue(obj),\n                          \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n                            return $options.onInput($event, obj);\n                          },\n                          \"onClick:hour\": function onClickHour($event) {\n                            return $options.onEvent({\n                              type: 'click'\n                            }, obj, $data.hour);\n                          },\n                          \"onClick:minute\": function onClickMinute($event) {\n                            return $options.onEvent({\n                              type: 'click'\n                            }, obj, $data.minute);\n                          },\n                          \"onClick:second\": function onClickSecond($event) {\n                            return $options.onEvent({\n                              type: 'click'\n                            }, obj, $data.second);\n                          }\n                        }), null, 16 /* FULL_PROPS */, [\"type\", \"value\", \"onUpdate:modelValue\", \"onClick:hour\", \"onClick:minute\", \"onClick:second\"]))];\n                      }),\n                      _: 2 /* DYNAMIC */\n                    }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : obj.schema.type === 'array' ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 2\n                    }, [_createCommentVNode(\" END DATE, TIME, COLOR TEXT-MENU \"), _createCommentVNode(\" ARRAY \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.setValue(obj), function (item, idx) {\n                      return _openBlock(), _createElementBlock(\"div\", _mergeProps({\n                        key: $options.getKeyForArray($props.id, obj, item, idx)\n                      }, $options.bindSchema(obj), {\n                        value: $options.setValue(obj)\n                      }), [_renderSlot(_ctx.$slots, $options.getArrayTopSlot(obj), _normalizeProps(_guardReactiveProps({\n                        obj: obj,\n                        id: $props.id,\n                        index: index,\n                        idx: idx,\n                        item: item\n                      }))), _renderSlot(_ctx.$slots, $options.getArrayItemSlot(obj), _normalizeProps(_guardReactiveProps({\n                        obj: obj,\n                        id: $props.id,\n                        index: index,\n                        idx: idx,\n                        item: item\n                      })), function () {\n                        return [_createVNode(_component_v_custom_form_base, _mergeProps({\n                          id: \"\".concat($props.id, \"-\").concat(obj.key, \"-\").concat(idx),\n                          model: item,\n                          schema: obj.schema.schema,\n                          row: $options.getRowGroupOrArray(obj),\n                          col: $options.getColGroupOrArray(obj),\n                          \"class\": \"\".concat($props.id, \"-\").concat(obj.key)\n                        }, _ctx.$attrs), _createSlots({\n                          _: 2 /* DYNAMIC */\n                        }, [_renderList(_ctx.$slots, function (_, name) {\n                          return {\n                            name: name,\n                            fn: _withCtx(function (slotData) {\n                              return [_renderSlot(_ctx.$slots, name, _normalizeProps(_guardReactiveProps(_objectSpread({\n                                id: $props.id,\n                                obj: obj,\n                                index: index,\n                                idx: idx,\n                                item: item\n                              }, slotData))))];\n                            })\n                          };\n                        })]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"id\", \"model\", \"schema\", \"row\", \"col\", \"class\"])];\n                      }), _renderSlot(_ctx.$slots, $options.getArrayBottomSlot(obj), _normalizeProps(_guardReactiveProps({\n                        obj: obj,\n                        id: $props.id,\n                        index: index,\n                        idx: idx,\n                        item: item\n                      })))], 16 /* FULL_PROPS */, _hoisted_1);\n                    }), 128 /* KEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */)) : /(wrap|group)/.test(obj.schema.type) ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 3\n                    }, [_createCommentVNode(\" END ARRAY \"), _createCommentVNode(\" GROUP | WRAP\"), (_openBlock(), _createBlock(_resolveDynamicComponent($options.checkInternGroupType(obj)), _mergeProps($options.bindSchema(obj), {\n                      onClick: function onClick($event) {\n                        return $options.onEvent($event, obj);\n                      }\n                    }), {\n                      \"default\": _withCtx(function () {\n                        return [obj.schema.title ? (_openBlock(), _createBlock(_component_v_card_title, {\n                          key: 0\n                        }, {\n                          \"default\": _withCtx(function () {\n                            return [_createTextVNode(_toDisplayString(obj.schema.title), 1 /* TEXT */)];\n                          }),\n\n                          _: 2 /* DYNAMIC */\n                        }, 1024 /* DYNAMIC_SLOTS */)) : _createCommentVNode(\"v-if\", true), obj.schema.subtitle ? (_openBlock(), _createBlock(_component_v_card_subtitle, {\n                          key: 1\n                        }, {\n                          \"default\": _withCtx(function () {\n                            return [_createTextVNode(_toDisplayString(obj.schema.subtitle), 1 /* TEXT */)];\n                          }),\n\n                          _: 2 /* DYNAMIC */\n                        }, 1024 /* DYNAMIC_SLOTS */)) : _createCommentVNode(\"v-if\", true), _createVNode(_component_v_form_base, _mergeProps({\n                          id: \"\".concat($props.id, \"-\").concat(obj.key),\n                          model: $options.setValue(obj),\n                          schema: obj.schema.schema,\n                          row: $options.getRowGroupOrArray(obj),\n                          col: $options.getColGroupOrArray(obj),\n                          \"class\": \"\".concat($props.id, \"-\").concat(obj.key)\n                        }, _ctx.$attrs), _createSlots({\n                          _: 2 /* DYNAMIC */\n                        }, [_renderList(_ctx.$slots, function (_, name) {\n                          return {\n                            name: name,\n                            fn: _withCtx(function (slotData) {\n                              return [_renderSlot(_ctx.$slots, name, _normalizeProps(_guardReactiveProps(_objectSpread({\n                                id: $props.id,\n                                obj: obj,\n                                index: index\n                              }, slotData))))];\n                            })\n                          };\n                        })]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"id\", \"model\", \"schema\", \"row\", \"col\", \"class\"])];\n                      }),\n                      _: 2 /* DYNAMIC */\n                    }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"onClick\"]))], 64 /* STABLE_FRAGMENT */)) : obj.schema.type === $data.treeview ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 4\n                    }, [_createCommentVNode(\" END GROUP | WRAP \"), _createCommentVNode(\" TREEVIEW \"), (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.v - $data.treeview), _mergeProps({\n                      open: obj.schema.open,\n                      \"onUpdate:open\": function onUpdateOpen($event) {\n                        return obj.schema.open = $event;\n                      }\n                    }, $options.bindSchema(obj), {\n                      \"onUpdate:open\": function onUpdateOpen($event) {\n                        return $options.onEvent({\n                          type: 'click'\n                        }, obj, 'open');\n                      },\n                      \"onUpdate:active\": function onUpdateActive($event) {\n                        return $options.onEvent({\n                          type: 'click'\n                        }, obj, 'selected');\n                      },\n                      items: obj.schema.items,\n                      value: $options.setValue(obj),\n                      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n                        return $options.onInput($event, obj);\n                      }\n                    }), _createSlots({\n                      _: 2 /* DYNAMIC */\n                    }, [_renderList($options.getInjectedScopedSlots($props.id, obj), function (s) {\n                      return {\n                        name: s,\n                        fn: _withCtx(function (slotData) {\n                          return [_renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps(_objectSpread({\n                            id: $props.id,\n                            obj: obj,\n                            index: index\n                          }, slotData))))];\n                        })\n                      };\n                    })]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"open\", \"onUpdate:open\", \"onUpdate:active\", \"items\", \"value\", \"onUpdate:modelValue\"]))], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : obj.schema.type === $data.list ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 5\n                    }, [_createCommentVNode(\" END TREEVIEW \"), _createCommentVNode(\" LIST \"), _createVNode(_component_v_list, null, {\n                      \"default\": _withCtx(function () {\n                        return [_renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, 'label'), _normalizeProps(_guardReactiveProps({\n                          id: $props.id,\n                          obj: obj,\n                          index: index\n                        })), function () {\n                          return [obj.schema.label ? (_openBlock(), _createBlock(_component_v_toolbar, _mergeProps({\n                            key: 0\n                          }, $options.bindSchema(obj), {\n                            dark: \"\"\n                          }), {\n                            \"default\": _withCtx(function () {\n                              return [_createVNode(_component_v_toolbar_title, null, {\n                                \"default\": _withCtx(function () {\n                                  return [_createTextVNode(_toDisplayString(obj.schema.label), 1 /* TEXT */)];\n                                }),\n\n                                _: 2 /* DYNAMIC */\n                              }, 1024 /* DYNAMIC_SLOTS */)];\n                            }),\n\n                            _: 2 /* DYNAMIC */\n                          }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */)) : _createCommentVNode(\"v-if\", true)];\n                        }), _createVNode(_component_v_list, _mergeProps({\n                          modelValue: obj.schema.model,\n                          \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n                            return obj.schema.model = $event;\n                          }\n                        }, $options.bindSchema(obj), {\n                          light: \"\"\n                        }), {\n                          \"default\": _withCtx(function () {\n                            return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.setValue(obj), function (item, idx) {\n                              return _openBlock(), _createBlock(_component_v_list_item, {\n                                key: idx,\n                                onClick: function onClick($event) {\n                                  return $options.onEvent($event, obj, $data.list);\n                                }\n                              }, {\n                                \"default\": _withCtx(function () {\n                                  return [_renderSlot(_ctx.$slots, $options.getArrayItemSlot(obj), _normalizeProps(_guardReactiveProps({\n                                    obj: obj,\n                                    id: $props.id,\n                                    index: index,\n                                    idx: idx,\n                                    item: item\n                                  })), function () {\n                                    return [_createVNode(_component_v_list_item, {\n                                      icon: obj.schema.icon,\n                                      title: obj.schema.item ? item[obj.schema.item] : item\n                                    }, null, 8 /* PROPS */, [\"icon\", \"title\"]), _createCommentVNode(\" <v-list-item-icon>\\n                              <v-icon v-text=\\\"obj.schema.icon\\\" />\\n                            </v-list-item-icon>\\n                            <v-list-item-content>\\n                              <v-list-item-title v-text=\\\"obj.schema.item ? item[obj.schema.item] : item\\\" />\\n                            </v-list-item-content> \")];\n                                  })];\n                                }),\n                                _: 2 /* DYNAMIC */\n                              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"]);\n                            }), 128 /* KEYED_FRAGMENT */))];\n                          }),\n\n                          _: 2 /* DYNAMIC */\n                        }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"modelValue\", \"onUpdate:modelValue\"])];\n                      }),\n                      _: 2 /* DYNAMIC */\n                    }, 1024 /* DYNAMIC_SLOTS */)], 64 /* STABLE_FRAGMENT */)) : /(switch|checkbox)/.test(obj.schema.type) ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 6\n                    }, [_createCommentVNode(\" END LIST \"), _createCommentVNode(\" CHECKBOX | SWITCH \"), (_openBlock(), _createBlock(_resolveDynamicComponent($options.mapTypeToComponent(obj.schema.type)), _mergeProps({\n                      \"model-value\": $options.setValue(obj)\n                    }, $options.bindSchema(obj), {\n                      onChange: function onChange($event) {\n                        return $options.onInput($event, obj);\n                      }\n                    }), _createSlots({\n                      _: 2 /* DYNAMIC */\n                    }, [_renderList($options.getInjectedScopedSlots($props.id, obj), function (s) {\n                      return {\n                        name: s,\n                        fn: _withCtx(function () {\n                          return [_renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({\n                            id: $props.id,\n                            obj: obj,\n                            index: index\n                          })))];\n                        })\n                      };\n                    })]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"model-value\", \"onChange\"]))], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : obj.schema.type === 'file' ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 7\n                    }, [_createCommentVNode(\" END CHECKBOX | SWITCH \"), _createCommentVNode(\" FILE \"), _createVNode(_component_v_file_input, _mergeProps($options.bindSchema(obj), {\n                      value: $options.setValue(obj),\n                      onFocus: function onFocus($event) {\n                        return $options.onEvent($event, obj);\n                      },\n                      onBlur: function onBlur($event) {\n                        return $options.onEvent($event, obj);\n                      },\n                      onChange: function onChange($event) {\n                        return $options.onInput($event, obj);\n                      }\n                    }), _createSlots({\n                      _: 2 /* DYNAMIC */\n                    }, [_renderList($options.getInjectedScopedSlots($props.id, obj), function (s) {\n                      return {\n                        name: s,\n                        fn: _withCtx(function (scopeData) {\n                          return [_renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps(_objectSpread({\n                            id: $props.id,\n                            obj: obj,\n                            index: index\n                          }, scopeData))))];\n                        })\n                      };\n                    })]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"value\", \"onFocus\", \"onBlur\", \"onChange\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : obj.schema.type === 'icon' ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 8\n                    }, [_createCommentVNode(\" END FILE \"), _createCommentVNode(\" ICON \"), _createVNode(_component_v_icon, _mergeProps($options.bindSchema(obj), {\n                      textContent: _toDisplayString($options.getIconValue(obj)),\n                      onClick: function onClick($event) {\n                        return $options.onEvent($event, obj);\n                      }\n                    }), null, 16 /* FULL_PROPS */, [\"textContent\", \"onClick\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : obj.schema.type === 'slider' ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 9\n                    }, [_createCommentVNode(\" END ICON \"), _createCommentVNode(\" SLIDER \"), _createVNode(_component_v_slider, _mergeProps($options.bindSchema(obj), {\n                      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n                        return $options.onInput($event, obj);\n                      }\n                    }), _createSlots({\n                      _: 2 /* DYNAMIC */\n                    }, [_renderList($options.getInjectedScopedSlots($props.id, obj), function (s) {\n                      return {\n                        name: s,\n                        fn: _withCtx(function () {\n                          return [_renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({\n                            id: $props.id,\n                            obj: obj,\n                            index: index\n                          })))];\n                        })\n                      };\n                    })]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"onUpdate:modelValue\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : obj.schema.type === 'img' ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 10\n                    }, [_createCommentVNode(\" END SLIDER \"), _createCommentVNode(\" IMG \"), _createVNode(_component_v_img, _mergeProps({\n                      src: $options.getImageSource(obj)\n                    }, $options.bindSchema(obj), {\n                      onClick: function onClick($event) {\n                        return $options.onEvent($event, obj);\n                      }\n                    }), _createSlots({\n                      _: 2 /* DYNAMIC */\n                    }, [_renderList($options.getInjectedScopedSlots($props.id, obj), function (s) {\n                      return {\n                        name: s,\n                        fn: _withCtx(function () {\n                          return [_renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({\n                            id: $props.id,\n                            obj: obj,\n                            index: index\n                          })))];\n                        })\n                      };\n                    })]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"src\", \"onClick\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : obj.schema.type === 'btn-toggle' ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 11\n                    }, [_createCommentVNode(\" END IMG \"), _createCommentVNode(\" BTN-TOGGLE \"), _createVNode(_component_v_btn_toggle, _mergeProps($options.bindSchema(obj), {\n                      \"model-value\": $options.setValue(obj),\n                      onChange: function onChange($event) {\n                        return $options.onInput($event, obj);\n                      }\n                    }), {\n                      \"default\": _withCtx(function () {\n                        return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(obj.schema.options, function (option, idx) {\n                          return _openBlock(), _createBlock(_component_v_btn, _mergeProps({\n                            key: idx\n                          }, $options.bindOptions(option), {\n                            icon: option.icon ? true : false\n                          }), {\n                            \"default\": _withCtx(function () {\n                              return [_createVNode(_component_v_icon, {\n                                dark: obj.schema.dark\n                              }, {\n                                \"default\": _withCtx(function () {\n                                  return [_createTextVNode(_toDisplayString($options.bindOptions(option).icon), 1 /* TEXT */)];\n                                }),\n\n                                _: 2 /* DYNAMIC */\n                              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"dark\"]), _createTextVNode(\" \" + _toDisplayString($options.bindOptions(option).label), 1 /* TEXT */)];\n                            }),\n\n                            _: 2 /* DYNAMIC */\n                          }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"icon\"]);\n                        }), 128 /* KEYED_FRAGMENT */))];\n                      }),\n\n                      _: 2 /* DYNAMIC */\n                    }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"model-value\", \"onChange\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : obj.schema.type === 'btn' ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 12\n                    }, [_createCommentVNode(\" END BTN-TOGGLE \"), _createCommentVNode(\" BTN \"), _createVNode(_component_v_btn, _mergeProps($options.bindSchema(obj), {\n                      onClick: function onClick($event) {\n                        return $options.onEvent($event, obj, $data.button);\n                      }\n                    }), {\n                      \"default\": _withCtx(function () {\n                        return [obj.schema.iconLeft ? (_openBlock(), _createBlock(_component_v_icon, {\n                          key: 0,\n                          left: \"\",\n                          dark: obj.schema.dark\n                        }, {\n                          \"default\": _withCtx(function () {\n                            return [_createTextVNode(_toDisplayString(obj.schema.iconLeft), 1 /* TEXT */)];\n                          }),\n\n                          _: 2 /* DYNAMIC */\n                        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"dark\"])) : _createCommentVNode(\"v-if\", true), _createTextVNode(\" \" + _toDisplayString($options.setValue(obj)) + \" \", 1 /* TEXT */), obj.schema.iconCenter ? (_openBlock(), _createBlock(_component_v_icon, {\n                          key: 1,\n                          dark: obj.schema.dark\n                        }, {\n                          \"default\": _withCtx(function () {\n                            return [_createTextVNode(_toDisplayString(obj.schema.iconCenter), 1 /* TEXT */)];\n                          }),\n\n                          _: 2 /* DYNAMIC */\n                        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"dark\"])) : _createCommentVNode(\"v-if\", true), _createTextVNode(\" \" + _toDisplayString(obj.schema.label) + \" \", 1 /* TEXT */), obj.schema.iconRight ? (_openBlock(), _createBlock(_component_v_icon, {\n                          key: 2,\n                          right: \"\",\n                          dark: obj.schema.dark\n                        }, {\n                          \"default\": _withCtx(function () {\n                            return [_createTextVNode(_toDisplayString(obj.schema.iconRight), 1 /* TEXT */)];\n                          }),\n\n                          _: 2 /* DYNAMIC */\n                        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"dark\"])) : _createCommentVNode(\"v-if\", true)];\n                      }),\n                      _: 2 /* DYNAMIC */\n                    }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"onClick\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : obj.schema.mask ? (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 13\n                    }, [_createCommentVNode(\" END BTN \"), _createCommentVNode(\" MASK  \"), _withDirectives((_openBlock(), _createBlock(_resolveDynamicComponent($options.mapTypeToComponent(obj.schema.type)), _mergeProps($options.bindSchema(obj), (_mergeProps3 = {\n                      type: $options.checkExtensionType(obj),\n                      \"model-value\": $options.setValue(obj),\n                      obj: obj\n                    }, _defineProperty(_mergeProps3, $options.searchInputSync(obj), obj.schema.searchInput), _defineProperty(_mergeProps3, \"onUpdate:\" + $options.searchInputSync(obj), function ($event) {\n                      return obj.schema.searchInput = $event;\n                    }), _defineProperty(_mergeProps3, \"onFocus\", function onFocus($event) {\n                      return $options.onEvent($event, obj);\n                    }), _defineProperty(_mergeProps3, \"onBlur\", function onBlur($event) {\n                      return $options.onEvent($event, obj);\n                    }), _mergeProps3), _defineProperty({}, _toHandlerKey($options.suspendClickAppend(obj)), function ($event) {\n                      return $options.onEvent($event, obj, $data.append);\n                    }), {\n                      \"onClick:appendOuter\": function onClickAppendOuter($event) {\n                        return $options.onEvent($event, obj, $data.appendOuter);\n                      },\n                      \"onClick:prepend\": function onClickPrepend($event) {\n                        return $options.onEvent($event, obj, $data.prepend);\n                      },\n                      \"onClick:prependInner\": function onClickPrependInner($event) {\n                        return $options.onEvent($event, obj, $data.prependInner);\n                      },\n                      \"onClick:clear\": function onClickClear($event) {\n                        return $options.onEvent($event, obj, $data.clear);\n                      },\n                      \"onClick:hour\": function onClickHour($event) {\n                        return $options.onEvent({\n                          type: 'click'\n                        }, obj, $data.hour);\n                      },\n                      \"onClick:minute\": function onClickMinute($event) {\n                        return $options.onEvent({\n                          type: 'click'\n                        }, obj, $data.minute);\n                      },\n                      \"onClick:second\": function onClickSecond($event) {\n                        return $options.onEvent({\n                          type: 'click'\n                        }, obj, $data.second);\n                      },\n                      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n                        return $options.onInput($event, obj);\n                      }\n                    }), _createSlots({\n                      _: 2 /* DYNAMIC */\n                    }, [_renderList($options.getInjectedScopedSlots($props.id, obj), function (s) {\n                      return {\n                        name: s,\n                        fn: _withCtx(function () {\n                          return [_renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({\n                            id: $props.id,\n                            obj: obj,\n                            index: index\n                          })))];\n                        })\n                      };\n                    })]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"type\", \"model-value\", \"obj\", \"onFocus\", \"onBlur\", \"onClick:appendOuter\", \"onClick:prepend\", \"onClick:prependInner\", \"onClick:clear\", \"onClick:hour\", \"onClick:minute\", \"onClick:second\", \"onUpdate:modelValue\"])), [[_directive_mask, obj.schema.mask]])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n                      key: 14\n                    }, [_createCommentVNode(\" END MASK \"), _createCommentVNode(\" DEFAULT all other Types -> typeToComponent \"), (_openBlock(), _createBlock(_resolveDynamicComponent($options.mapTypeToComponent(obj.schema.type)), _mergeProps($options.bindSchema(obj), (_mergeProps5 = {\n                      type: $options.checkExtensionType(obj),\n                      value: $options.setValue(obj),\n                      obj: obj\n                    }, _defineProperty(_mergeProps5, $options.searchInputSync(obj), obj.schema.searchInput), _defineProperty(_mergeProps5, \"onUpdate:\" + $options.searchInputSync(obj), function ($event) {\n                      return obj.schema.searchInput = $event;\n                    }), _defineProperty(_mergeProps5, \"onFocus\", function onFocus($event) {\n                      return $options.onEvent($event, obj);\n                    }), _defineProperty(_mergeProps5, \"onBlur\", function onBlur($event) {\n                      return $options.onEvent($event, obj);\n                    }), _mergeProps5), _defineProperty({}, _toHandlerKey($options.suspendClickAppend(obj)), function ($event) {\n                      return $options.onEvent($event, obj, $data.append);\n                    }), {\n                      \"onClick:appendOuter\": function onClickAppendOuter($event) {\n                        return $options.onEvent($event, obj, $data.appendOuter);\n                      },\n                      \"onClick:prepend\": function onClickPrepend($event) {\n                        return $options.onEvent($event, obj, $data.prepend);\n                      },\n                      \"onClick:prependInner\": function onClickPrependInner($event) {\n                        return $options.onEvent($event, obj, $data.prependInner);\n                      },\n                      \"onClick:clear\": function onClickClear($event) {\n                        return $options.onEvent($event, obj, $data.clear);\n                      },\n                      \"onClick:hour\": function onClickHour($event) {\n                        return $options.onEvent({\n                          type: 'click'\n                        }, obj, $data.hour);\n                      },\n                      \"onClick:minute\": function onClickMinute($event) {\n                        return $options.onEvent({\n                          type: 'click'\n                        }, obj, $data.minute);\n                      },\n                      \"onClick:second\": function onClickSecond($event) {\n                        return $options.onEvent({\n                          type: 'click'\n                        }, obj, $data.second);\n                      },\n                      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n                        return $options.onInput($event, obj);\n                      }\n                    }), _createSlots({\n                      _: 2 /* DYNAMIC */\n                    }, [_renderList($options.getInjectedScopedSlots($props.id, obj), function (s) {\n                      return {\n                        name: s,\n                        fn: _withCtx(function () {\n                          return [_renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({\n                            id: $props.id,\n                            obj: obj,\n                            index: index\n                          })))];\n                        })\n                      };\n                    })]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"type\", \"value\", \"obj\", \"onFocus\", \"onBlur\", \"onClick:appendOuter\", \"onClick:prepend\", \"onClick:prependInner\", \"onClick:clear\", \"onClick:hour\", \"onClick:minute\", \"onClick:second\", \"onUpdate:modelValue\"]))], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" END DEFAULT \")];\n                  })];\n                }), _createCommentVNode(\" slot at bottom of item  -> <div slot=\\\"slot-bottom-key-[deep-nested-key-name]\\\"> \"), _renderSlot(_ctx.$slots, $options.getTypeBottomSlot(obj), _normalizeProps(_guardReactiveProps({\n                  obj: obj,\n                  index: index,\n                  id: $props.id\n                }))), _renderSlot(_ctx.$slots, $options.getKeyBottomSlot(obj), _normalizeProps(_guardReactiveProps({\n                  obj: obj,\n                  index: index,\n                  id: $props.id\n                })))];\n              }),\n              _: 2 /* DYNAMIC */\n            }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"class\", \"draggable\", \"onMouseenter\", \"onMouseleave\", \"onDragstart\", \"onDragover\", \"onDrop\"])), [[_vShow, !obj.schema.hidden], [_directive_intersect, function (isIntersecting, entries, observer) {\n              return $options.onIntersect(isIntersecting, entries, observer, obj);\n            }], [_directive_touch, {\n              left: function left() {\n                return $options.onSwipe('left', obj);\n              },\n              right: function right() {\n                return $options.onSwipe('right', obj);\n              },\n              up: function up() {\n                return $options.onSwipe('up', obj);\n              },\n              down: function down() {\n                return $options.onSwipe('down', obj);\n              }\n            }], [_directive_click_outside, function (event) {\n              return $options.onClickOutside(event, obj);\n            }]]), _createCommentVNode(\" schema.spacer:true - push next item to the right and fill space between items \"), obj.schema.spacer ? (_openBlock(), _createBlock(_component_v_spacer, {\n              key: \"s-\".concat(index)\n            })) : _createCommentVNode(\"v-if\", true)];\n          }),\n          \"default\": _withCtx(function () {\n            return [_renderSlot(_ctx.$slots, $options.getTooltipSlot(obj), _normalizeProps(_guardReactiveProps({\n              obj: obj,\n              index: index,\n              id: $props.id\n            })), function () {\n              return [_createElementVNode(\"span\", null, _toDisplayString($options.getShorthandTooltipLabel(obj.schema.tooltip)), 1 /* TEXT */)];\n            }), _renderSlot(_ctx.$slots, $options.getKeyTooltipSlot(obj), _normalizeProps(_guardReactiveProps({\n              obj: obj,\n              index: index,\n              id: $props.id\n            })))];\n          }),\n          _: 2 /* DYNAMIC */\n        }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\"disabled\"])], 64 /* STABLE_FRAGMENT */);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" FORM-BASE BOTTOM SLOT \"), _renderSlot(_ctx.$slots, $options.getFormBottomSlot(), {\n        id: $props.id\n      })];\n    }),\n    _: 3 /* FORWARDED */\n  }, 16 /* FULL_PROPS */, [\"id\"])), [[_directive_resize, $options.onResize, void 0, {\n    quiet: true\n  }]]);\n}","map":{"version":3,"names":["_createBlock","_component_v_row","_mergeProps","id","$props","$options","getRow","_createCommentVNode","_renderSlot","_ctx","$slots","getFormTopSlot","_createElementBlock","_Fragment","_renderList","flatCombinedArraySorted","obj","index","_createVNode","_component_v_tooltip","disabled","schema","tooltip","getShorthandTooltip","activator","_withCtx","_ref","props","_component_v_col","key","_objectSpread","getGridAttributes","getClassName","draggable","drag","onMouseenter","$event","onEvent","onMouseleave","onDragstart","dragstart","onDragover","dragover","onDrop","drop","getTypeTopSlot","_normalizeProps","_guardReactiveProps","getKeyTopSlot","getTypeItemSlot","getKeyItemSlot","_mergeProps3","_mergeProps5","type","_component_v_radio_group","bindSchema","value","setValue","onChange","onInput","options","option","idx","_component_v_radio","bindOptions","_createSlots","_","getInjectedScopedSlots","s","getKeyInjectSlot","isDateTimeColorTypeAndExtensionText","_component_v_menu","bindSchemaMenu","_ref2","_component_v_text_field","bindSchemaText","suspendClickAppend","$data","append","onClickAppendOuter","appendOuter","onClickPrepend","prepend","onClickPrependInner","prependInner","_resolveDynamicComponent","mapTypeToComponent","checkInternType","onUpdateModelValue","onClickHour","hour","onClickMinute","minute","onClickSecond","second","item","getKeyForArray","getArrayTopSlot","getArrayItemSlot","_component_v_custom_form_base","concat","model","row","getRowGroupOrArray","col","getColGroupOrArray","$attrs","name","slotData","getArrayBottomSlot","test","checkInternGroupType","onClick","title","_component_v_card_title","subtitle","_component_v_card_subtitle","_component_v_form_base","treeview","v","open","onUpdateOpen","onUpdateActive","items","list","_component_v_list","label","_component_v_toolbar","dark","_component_v_toolbar_title","light","_component_v_list_item","icon","_component_v_file_input","onFocus","onBlur","scopeData","_component_v_icon","_toDisplayString","getIconValue","_component_v_slider","_component_v_img","src","getImageSource","_component_v_btn_toggle","_component_v_btn","button","iconLeft","left","iconCenter","iconRight","right","mask","checkExtensionType","_defineProperty","searchInputSync","searchInput","onClickClear","clear","getTypeBottomSlot","getKeyBottomSlot","hidden","isIntersecting","entries","observer","onIntersect","onSwipe","up","down","event","onClickOutside","spacer","_component_v_spacer","getTooltipSlot","_createElementVNode","getShorthandTooltipLabel","getKeyTooltipSlot","getFormBottomSlot","onResize"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/others/CustomFormBase.vue"],"sourcesContent":["<template>\n  <v-row\n    :id=\"id\"\n    v-bind=\"getRow\"\n    v-resize.quiet=\"onResize\"\n  >\n    <!-- FORM-BASE TOP SLOT -->\n    <slot :name=\"getFormTopSlot()\" :id= \"id\"/>\n    <!-- main loop over components/controls -->\n    <template v-for=\"(obj, index) in flatCombinedArraySorted\" :key=\"index\">\n      <!-- Tooltip Wrapper -->\n      <v-tooltip\n        :disabled=\"!obj.schema.tooltip\"\n        v-bind=\"getShorthandTooltip(obj.schema.tooltip)\"\n      >\n        <template v-slot:activator=\"{ props }\">\n          <v-col\n            v-show=\"!obj.schema.hidden\"\n            :key=\"index\"\n            v-bind= \"{\n              ...getGridAttributes(obj),\n              ...props\n            }\"\n            v-intersect= \"(isIntersecting, entries, observer) => onIntersect(isIntersecting, entries, observer, obj)\"\n            v-touch= \"{ left: () => onSwipe('left', obj), right: () => onSwipe('right', obj), up: () => onSwipe('up', obj), down: () => onSwipe('down', obj) }\"\n            v-click-outside= \"(event) => onClickOutside(event, obj)\"\n            :class =\"getClassName(obj)\"\n            :draggable =\"obj.schema.drag\"\n            @mouseenter =\"onEvent($event, obj)\"\n            @mouseleave =\"onEvent($event, obj)\"\n\n            @dragstart=\"dragstart($event, obj)\"\n            @dragover=\"dragover($event, obj)\"\n            @drop=\"drop($event, obj)\"\n\n          >\n            <!-- slot on top of type  -> <div slot=\"slot-bottom-type-[propertyName]\"> -->\n            <slot :name=\"getTypeTopSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n            <!-- slot on top of key  -> <v-btn slot=\"slot-bottom-key-[propertyName]\"> -->\n            <slot :name=\"getKeyTopSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n            <!-- slot replaces complete item of defined TYPE -> <v-btn slot=\"slot-item-type-[propertyName]\">-->\n            <slot :name=\"getTypeItemSlot(obj)\" v-bind= \"{ obj, index, id }\">\n              <!-- slot replaces complete item of defined KEY -> <div slot=\"slot-item-key-[propertyName]\">-->\n              <slot :name=\"getKeyItemSlot(obj)\" v-bind= \"{ obj, index, id }\">\n\n                  <!-- <div class=\"caption\">\n                    OBJ:{{obj}}\n                    <br>\n                    FORM:{{getFormTopSlot()}}\n                    <br>\n                    INJECT:{{getKeyInjectSlot(obj)}}\n                    <br>\n                    ARRAY:{{getArrayItemSlot(obj)}}\n                    <br>\n                    TYPE:{{getTypeItemSlot(obj)}}\n                    <br>\n                    KEY:{{getKeyItemSlot(obj)}}\n                    <br>\n                    CLASS:{{getClassName(obj)}}\n                    <br>\n                    Slots: {{getInjectedScopedSlots(id, obj)}}\n                    <br>\n                    VAL:{{setValue(obj)}}\n                  </div> -->\n\n              <!-- RADIO -->\n                <v-radio-group\n                  v-if=\"obj.schema.type === 'radio'\"\n                  v-bind=\"bindSchema(obj)\"\n                  :value=\"setValue(obj)\"\n                  @change=\"onInput($event, obj)\"\n                >\n                  <v-radio\n                    v-for=\"(option, idx) in obj.schema.options\"\n                    :key=\"idx\"\n                    v-bind=\"bindOptions(option)\"\n                  >\n                    <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                    <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name= \"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index, idx, option }\"/></template>\n                  </v-radio>\n                </v-radio-group>\n              <!-- END RADIO -->\n\n              <!-- DATE, TIME, COLOR TEXT-MENU -->\n                <v-menu\n                  v-else-if=\"isDateTimeColorTypeAndExtensionText(obj)\"\n                  v-bind=\"bindSchemaMenu(obj)\"\n                >\n                  <template v-slot:activator=\"{ props }\">\n                    <v-text-field\n                      v-bind= \"{\n                        ...bindSchemaText(obj),\n                        ...props\n                      }\"\n                      :value=\"setValue(obj)\"\n                      @[suspendClickAppend(obj)]=\"onEvent($event, obj, append)\"\n                      @click:append-outer=\"onEvent($event, obj, appendOuter)\"\n                      @click:prepend=\"onEvent($event, obj, prepend)\"\n                      @click:prepend-inner=\"onEvent($event, obj, prependInner)\"\n                    />\n                    <!-- SLOTS append|prepend|message for picker not avilable, try custom component -->\n                  </template>\n                  <component\n                    :is=\"mapTypeToComponent( obj.schema.type )\"\n                    v-bind=\"bindSchema(obj)\"\n                    :type=\"checkInternType(obj)\"\n                    :value=\"setValue(obj)\"\n                    @update:model-value=\"onInput($event, obj)\"\n                    @click:hour=\"onEvent({type:'click'}, obj, hour)\"\n                    @click:minute=\"onEvent({type:'click'}, obj, minute)\"\n                    @click:second=\"onEvent({type:'click'}, obj, second)\"\n                  />\n                </v-menu>\n              <!-- END DATE, TIME, COLOR TEXT-MENU -->\n\n              <!-- ARRAY -->\n                <template\n                  v-else-if=\"obj.schema.type === 'array'\"\n                >\n                  <div\n                    v-for=\"(item, idx) in setValue(obj)\"\n                    :key=\"getKeyForArray(id, obj, item, idx)\"\n                    v-bind=\"bindSchema(obj)\"\n                    :value=\"setValue(obj)\"\n                  >\n                    <slot :name=\"getArrayTopSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\"/>\n                    <slot :name=\"getArrayItemSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\">\n                      <v-custom-form-base\n                        :id=\"`${id}-${obj.key}-${idx}`\"\n                        :model=\"item\"\n                        :schema=\"obj.schema.schema\"\n                        :row=\"getRowGroupOrArray(obj)\"\n                        :col=\"getColGroupOrArray(obj)\"\n                        :class=\"`${id}-${obj.key}`\"\n\n                        v-bind=\"$attrs\"\n                      >\n                        <!-- Based on https://gist.github.com/loilo/73c55ed04917ecf5d682ec70a2a1b8e2 -->\n                        <template v-for=\"(_, name) in $slots\" #[name]=\"slotData\"><slot :name=\"name\" v-bind= \"{ id, obj, index, idx, item, ...slotData}\" /></template>\n                      </v-custom-form-base>\n                    </slot>\n                    <slot :name=\"getArrayBottomSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\"/>\n                  </div>\n                </template>\n              <!-- END ARRAY -->\n\n              <!-- GROUP | WRAP-->\n                <template v-else-if=\"/(wrap|group)/.test(obj.schema.type)\">\n                  <component\n                    :is=\"checkInternGroupType(obj)\"\n                    v-bind=\"bindSchema(obj)\"\n                    @click=\"onEvent($event, obj)\"\n                  >\n                    <v-card-title v-if=\"obj.schema.title\">{{obj.schema.title}}</v-card-title>\n                    <v-card-subtitle v-if=\"obj.schema.subtitle\">{{obj.schema.subtitle}}</v-card-subtitle>\n\n                    <v-form-base\n                      :id=\"`${id}-${obj.key}`\"\n                      :model=\"setValue(obj)\"\n                      :schema=\"obj.schema.schema\"\n                      :row=\"getRowGroupOrArray(obj)\"\n                      :col=\"getColGroupOrArray(obj)\"\n                      :class=\"`${id}-${obj.key}`\"\n                      v-bind=\"$attrs\"\n                    >\n                      <!-- Based on https://gist.github.com/loilo/73c55ed04917ecf5d682ec70a2a1b8e2 -->\n                      <template v-for=\"(_, name) in $slots\" #[name]=\"slotData\"><slot :name=\"name\" v-bind= \"{ id, obj, index,  ...slotData}\" /></template>\n\n                    </v-form-base>\n                  </component>\n                </template>\n              <!-- END GROUP | WRAP -->\n\n              <!-- TREEVIEW -->\n                <component\n                  v-else-if=\"obj.schema.type === treeview\"\n                  v-bind:is=\"v-treeview\"\n\n                  v-model:open=\"obj.schema.open\"\n                  v-bind=\"bindSchema(obj)\"\n                  @update:open=\"onEvent({type:'click'}, obj, 'open' )\"\n                  @update:active=\"onEvent({type:'click'}, obj, 'selected' )\"\n\n                  :items=\"obj.schema.items\"\n                  :value=\"setValue(obj)\"\n                  @update:model-value= \"onInput($event, obj)\"\n                >\n                  <!-- works with #[s]=\"slotData\" \" -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]=\"slotData\"><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index,  ...slotData}\" /></template>\n                </component>\n\n              <!-- END TREEVIEW -->\n\n              <!-- LIST -->\n                <template\n                  v-else-if=\"obj.schema.type === list\"\n                >\n                  <v-list>\n                    <slot :name=\"getKeyInjectSlot(obj, 'label')\" v-bind= \"{ id, obj, index }\" >\n                      <v-toolbar\n                        v-if=\"obj.schema.label\"\n                        v-bind=\"bindSchema(obj)\"\n                        dark\n                      >\n                        <v-toolbar-title>{{ obj.schema.label }}</v-toolbar-title>\n                      </v-toolbar>\n                    </slot>\n                    <v-list\n                      v-model=\"obj.schema.model\"\n                      v-bind=\"bindSchema(obj)\"\n                      light\n                    >\n                      <template v-for=\"(item, idx) in setValue(obj)\" :key=\"idx\">\n                        <v-list-item\n\n                          @click=\"onEvent($event, obj, list )\"\n                        >\n                        <slot :name=\"getArrayItemSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\">\n                              <v-list-item\n                                  :icon=\"obj.schema.icon\"\n                                  :title=\"obj.schema.item ? item[obj.schema.item] : item\"\n                                  >\n\n                              </v-list-item>\n                            <!-- <v-list-item-icon>\n                              <v-icon v-text=\"obj.schema.icon\" />\n                            </v-list-item-icon>\n                            <v-list-item-content>\n                              <v-list-item-title v-text=\"obj.schema.item ? item[obj.schema.item] : item\" />\n                            </v-list-item-content> -->\n                        </slot>\n                        </v-list-item>\n                      </template>\n                    </v-list>\n                  </v-list>\n                </template>\n              <!-- END LIST -->\n\n              <!-- CHECKBOX | SWITCH -->\n                <component\n                  v-else-if=\"/(switch|checkbox)/.test(obj.schema.type)\"\n                  :is=\"mapTypeToComponent(obj.schema.type)\"\n                  :model-value=\"setValue(obj)\"\n                  v-bind=\"bindSchema(obj)\"\n                  @change=\"onInput($event, obj)\"\n                >\n                  <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                </component>\n              <!-- END CHECKBOX | SWITCH -->\n\n              <!-- FILE -->\n                <v-file-input\n                  v-else-if=\"obj.schema.type === 'file' \"\n                  v-bind=\"bindSchema(obj)\"\n                  :value=\"setValue(obj)\"\n                  @focus=\"onEvent($event, obj)\"\n                  @blur=\"onEvent($event, obj)\"\n                  @change=\"onInput($event, obj)\"\n                >\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]=\"scopeData\"><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index, ...scopeData}\" /></template>\n                </v-file-input>\n              <!-- END FILE -->\n\n              <!-- ICON -->\n                <v-icon\n                  v-else-if=\"obj.schema.type === 'icon'\"\n                  v-bind=\"bindSchema(obj)\"\n                  v-text=\"getIconValue(obj)\"\n                  @click=\"onEvent($event, obj)\"\n                />\n              <!-- END ICON -->\n\n              <!-- SLIDER -->\n                <v-slider\n                  v-else-if=\"obj.schema.type === 'slider'\"\n                  v-bind=\"bindSchema(obj)\"\n                  @update:model-value=\"onInput($event, obj)\"\n                >\n                  <!-- some component works with #[s]=\"slotData\"  some doesn't work with slot data ie: 'label'  / but 'thumb-label' works only with scopeData -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\" /></template>\n                  <!-- <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]=\"scopeData\"><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index, ...scopeData}\" /></template> -->\n                </v-slider>\n              <!-- END SLIDER -->\n\n              <!-- IMG -->\n                <v-img\n                  v-else-if=\"obj.schema.type === 'img'\"\n                  :src=\"getImageSource(obj)\"\n                  v-bind=\"bindSchema(obj)\"\n                  @click=\"onEvent($event, obj)\"\n                >\n                  <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                </v-img>\n              <!-- END IMG -->\n\n              <!-- BTN-TOGGLE -->\n                <v-btn-toggle\n                  v-else-if=\"obj.schema.type === 'btn-toggle'\"\n                  v-bind=\"bindSchema(obj)\"\n                  :model-value=\"setValue(obj)\"\n                  @change=\"onInput($event, obj)\"\n                >\n                  <v-btn\n                    v-for=\"(option,idx) in obj.schema.options\"\n                    :key=\"idx\"\n                    v-bind=\"bindOptions(option)\"\n                    :icon=\"option.icon ? true :false\"\n                  >\n                    <v-icon :dark=\"obj.schema.dark\">\n                      {{ bindOptions(option).icon }}\n                    </v-icon>\n                    {{ bindOptions(option).label }}\n                  </v-btn>\n                </v-btn-toggle>\n              <!-- END BTN-TOGGLE -->\n\n              <!-- BTN -->\n                <v-btn\n                  v-else-if=\"obj.schema.type === 'btn'\"\n                  v-bind=\"bindSchema(obj)\"\n                  @click=\"onEvent($event, obj, button)\"\n                >\n                  <v-icon\n                    v-if=\"obj.schema.iconLeft\"\n                    left\n                    :dark=\"obj.schema.dark\"\n                  >\n                    {{ obj.schema.iconLeft }}\n                  </v-icon>\n                  {{ setValue(obj) }}\n                  <v-icon\n                    v-if=\"obj.schema.iconCenter\"\n                    :dark=\"obj.schema.dark\"\n                  >\n                    {{ obj.schema.iconCenter }}\n                  </v-icon>\n                  {{ obj.schema.label }}\n                  <v-icon\n                    v-if=\"obj.schema.iconRight\"\n                    right\n                    :dark=\"obj.schema.dark\"\n                  >\n                    {{ obj.schema.iconRight }}\n                  </v-icon>\n                </v-btn>\n              <!-- END BTN -->\n\n              <!-- MASK  -->\n                <component\n                  :is=\"mapTypeToComponent(obj.schema.type)\"\n                  v-else-if=\"obj.schema.mask\"\n                  v-bind=\"bindSchema(obj)\"\n                  v-mask=\"obj.schema.mask\"\n                  :type=\"checkExtensionType(obj)\"\n                  :model-value=\"setValue(obj)\"\n                  :obj=\"obj\"\n                  v-model:[searchInputSync(obj)]=\"obj.schema.searchInput\"\n                  @focus= \"onEvent($event, obj)\"\n                  @blur= \"onEvent($event, obj)\"\n                  @[suspendClickAppend(obj)]=\"onEvent($event, obj, append)\"\n                  @click:append-outer=\"onEvent($event, obj, appendOuter)\"\n                  @click:prepend=\"onEvent($event, obj, prepend )\"\n                  @click:prepend-inner=\"onEvent($event, obj, prependInner)\"\n                  @click:clear=\"onEvent($event, obj, clear )\"\n                  @click:hour=\"onEvent({type:'click'}, obj, hour)\"\n                  @click:minute=\"onEvent({type:'click'}, obj, minute)\"\n                  @click:second=\"onEvent({type:'click'}, obj, second)\"\n                  @update:model-value=\"onInput($event, obj)\"\n                >\n                  <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                </component>\n              <!-- END MASK -->\n\n              <!-- DEFAULT all other Types -> typeToComponent -->\n                <component\n                  v-else\n                  :is=\"mapTypeToComponent(obj.schema.type)\"\n                  v-bind=\"bindSchema(obj)\"\n                  :type=\"checkExtensionType(obj)\"\n                  :value=\"setValue(obj)\"\n                  :obj=\"obj\"\n                  v-model:[searchInputSync(obj)]=\"obj.schema.searchInput\"\n                  @focus= \"onEvent($event, obj)\"\n                  @blur= \"onEvent($event, obj)\"\n                  @[suspendClickAppend(obj)]=\"onEvent($event, obj, append)\"\n                  @click:append-outer= \"onEvent($event, obj, appendOuter)\"\n                  @click:prepend= \"onEvent($event, obj, prepend )\"\n                  @click:prepend-inner= \"onEvent($event, obj, prependInner)\"\n                  @click:clear= \"onEvent($event, obj, clear )\"\n                  @click:hour= \"onEvent({type:'click'}, obj, hour)\"\n                  @click:minute= \"onEvent({type:'click'}, obj, minute)\"\n                  @click:second= \"onEvent({type:'click'}, obj, second)\"\n                  @update:model-value= \"onInput($event, obj)\"\n                >\n                  <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                  <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name= \"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                </component>\n              <!-- END DEFAULT -->\n              </slot>\n            </slot>\n\n            <!-- slot at bottom of item  -> <div slot=\"slot-bottom-key-[deep-nested-key-name]\"> -->\n            <slot :name=\"getTypeBottomSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n            <slot :name=\"getKeyBottomSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n          </v-col>\n\n          <!-- schema.spacer:true - push next item to the right and fill space between items -->\n          <v-spacer\n            v-if=\"obj.schema.spacer\"\n            :key=\"`s-${index}`\"\n          />\n        </template>\n        <!-- slot for Tooltip or use shorthand schema.tooltip:'myTooltip' | any tooltip activated by schema:{ key:{ tooltip:'myTooltip', ...} -->\n        <slot :name=\"getTooltipSlot(obj)\" v-bind= \"{ obj, index, id }\" >\n          <span>{{getShorthandTooltipLabel(obj.schema.tooltip)}}</span>\n        </slot>\n        <slot :name=\"getKeyTooltipSlot(obj)\" v-bind= \"{ obj, index, id }\" />\n      </v-tooltip>\n    </template>\n    <!-- FORM-BASE BOTTOM SLOT -->\n    <slot :name=\"getFormBottomSlot()\" :id= \"id\"/>\n  </v-row>\n</template>\n\n<script>\n// Import\n// import Vue from 'vue'\n// import { getCurrentInstance } from 'vue'\nimport { get, isPlainObject, isFunction, isString, isNumber, isEmpty, orderBy, delay } from 'lodash'\n\n// import VueMask from 'v-mask'\n// Vue.use(VueMask, {\n//   placeholders: {\n//     // Info Mask https://github.com/probil/v-mask\n//     // '#': null,       // passing `null` removes default placeholder, so `#` is treated as character\n//     // D: /\\d/,         // define new placeholder\n//   }\n// })\n//\n// Declaration\nconst typeToComponent = {\n  // maps schema.type to prop 'type' in v-text-field  - https://www.wufoo.com/html5/\n  text: 'v-text-field',\n  password: 'v-text-field',\n  email: 'v-text-field',\n  tel: 'v-text-field',\n  url: 'v-text-field',\n  search: 'v-text-field',\n  number: 'v-text-field',\n  /*\n        { type:'text, ext:'typeOfTextField', ...}\n        For native <INPUT> type use alternative schema prop ext  -> schema:{ type:'text, ext:'date', ...}\n        correspond to <input type=\"number\" >\n        number: 'v-text-field',   //  { type:'text, ext:'number', ...}\n        range: 'v-text-field',   //  { type:'text, ext:'range', ...}\n        date: 'v-text-field',    //  { type:'text, ext:'date', ...}\n        time: 'v-text-field',    //  { type:'text, ext:'time', ...}\n        color: 'v-text-field',   //  { type:'text, ext:'color', ...}\n      */\n\n  date: 'v-date-picker',\n  time: 'v-time-picker',\n  color: 'v-color-picker',\n  /*\n        INFO: 3 Types of PICKER DATE / TIME / COLOR\n        Date-Native Input    - schema:{ type:'text, ext:'date', ...}\n        Date-Picker          - schema:{ type:'date', ...}\n        Date-Picker-Textmenu     - schema:{ type:'date', ext:'text'...}\n      */\n\n  // map schema.type to vuetify-control (vuetify 2.0)\n  img: 'v-img',\n  textarea: 'v-textarea',\n  range: 'v-slider',\n  file: 'v-file-input',\n  switch: 'v-switch',\n  checkbox: 'v-checkbox',\n  card: 'v-card'\n  /*\n        HOW TO USE CUSTOM Components\n        1)\n          Name and Register your Custom-Control Component globally in 'main.js'\n          but avoid collision with registered names of Vuetify - Controls\n          See: https://vuejs.org/v2/guide/components-registration.html\n\n          Vue.component('custom-component', () => import('@/components/custom-component.vue') )\n\n        2)\n          use it in Schema\n\n          mySchema: { myCustom: { type: 'custom-component' }\n\n        3) // custom-component.vue\n          <template>\n            <v-text-field v-model=\"inp\"  label=\"Basic\"></v-text-field>\n          </template>\n          <script>\n            export default {\n              props: ['type','value', 'obj'],\n              computed:{\n                inp:{\n                  get(){  return this.value},\n                  set(v){ this.$emit('input', v)}\n                }\n              }\n            }\n          < /script>\n      */\n\n}\nconst orderDirection = 'ASC'\nconst pathDelimiter = '.'\nconst classKeyDelimiter = '-'\nconst defaultID = 'form-base'\nconst isPicker = 'date|time|color'\nconst onEventDelay = 1 // ms\n\nconst mouse = 'mouseenter|mouseleave'\nconst change = 'input|click' // event change collects events 'input|click'\nconst watch = 'focus|input|click|blur' // event watch collects events 'focus|input|click|blur'\nconst display = 'resize|swipe|intersect' // event watch collects events 'resize|swipe|intersect'\n\nconst topAppendix = 'top'\nconst bottomAppendix = 'bottom'\nconst slotAppendix = 'slot'\nconst tooltipAppendix = 'tooltip'\nconst injectAppendix = 'inject'\nconst itemClassAppendix = 'item'\nconst typeClassAppendix = 'type'\nconst keyClassAppendix = 'key'\nconst arrayClassAppendix = 'array'\nconst propertyClassAppendix = 'prop'\n\nconst injectSlotAppendix = `${slotAppendix}-${injectAppendix}`\nconst arraySlotAppendix = `${slotAppendix}-${arrayClassAppendix}`\nconst topSlotAppendix = `${slotAppendix}-${topAppendix}`\nconst itemSlotAppendix = `${slotAppendix}-${itemClassAppendix}`\nconst bottomSlotAppendix = `${slotAppendix}-${bottomAppendix}`\nconst tooltipSlotAppendix = `${slotAppendix}-${tooltipAppendix}`\n\nconst clear = 'clear'\nconst button = 'button'\nconst treeview = 'treeview'\nconst list = 'list'\nconst focus = 'focus'\nconst blur = 'blur'\nconst append = 'append'\nconst appendOuter = 'append-outer'\nconst prepend = 'prepend'\nconst prependInner = 'prepend-inner'\n\nconst hour = 'hour'\nconst minute = 'minute'\nconst second = 'second'\n\n// symbol on drop\nconst dropEffect = 'move' // 'copy, link, move\n// Default row setting if no row-attribute defined\nconst rowDefault = { noGutters: true } // { noGutters:true, justify:'center', align:'center' }\n\n// Default col setting, overrideable by prop col or by schema.col definition\n// Default col setting, overrideable by prop flex or by schema.flex definition (flex is DEPRECATED use col instead)\nconst colDefault = { cols: 'auto' } // { cols:12, sm: 6, md:4, lg:3, xl:2}\n\n// Mapper for Autogeneration of Schema from Value\nconst defaultSchemaIfValueIsNullOrUndefined = key => ({ type: 'text', label: key })\nconst defaultSchemaIfValueIsString = key => ({ type: 'text', label: key })\nconst defaultSchemaIfValueIsNumber = key => ({ type: 'number', label: key })\nconst defaultSchemaIfValueIsBoolean = key => ({ type: 'checkbox', label: key })\n// Menu triggered DateTimePicker Default\nconst defaultPickerSchemaText = { type: 'text', readonly: true }\nconst defaultPickerSchemaMenu = { closeOnContentClick: false, transition: 'scale-transition', nudgeRight: 32, maxWidth: '290px', minWidth: '290px' }\n// type wrap or group - if no typeInt defined take default\nconst defaultInternGroupType = 'v-card'\n//\nexport default {\n  name: 'VFormBase',\n  props: {\n    id: {\n      type: String,\n      default: defaultID\n    },\n    rootId: {\n      type: String,\n      default: defaultID\n    },\n    row: {\n      type: [Object]\n    },\n    col: {\n      type: [Object, Number, String]\n    },\n    flex: {\n      type: [Object, Number, String]\n    },\n    modelValue: {\n      type: [Object, Array],\n      default: () => null\n    },\n    model: {\n      type: [Object, Array],\n      default: () => ({})\n    },\n    schema: {\n      type: [Object, Array],\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      flatCombinedArray: [],\n      clear,\n      button,\n      treeview,\n      list,\n      focus,\n      blur,\n      append,\n      appendOuter,\n      prepend,\n      prependInner,\n      hour,\n      minute,\n      second\n    }\n  },\n  computed: {\n    valueIntern () {\n      // use <formbase :model=\"myData\" />  ->  legacy code <formbase :value=\"myData\" />\n      const model = this.model || this.modelValue\n      this.updateArrayFromState(model, this.schema)\n      return model\n    },\n    parent () {\n      let p = this\n      if (p.$parent && p.$parent.$parent) {\n        while (p.id.startsWith(p.$parent.$parent.id + '-')) {\n          p = p.$parent.$parent\n        }\n      }\n      return p\n    },\n    index () {\n      const m = this.id && this.id.match(/\\d+/g)\n      return m ? m.map(Number) : null\n    },\n    getRow () {\n      return this.row || rowDefault\n    },\n    flatCombinedArraySorted () {\n      return orderBy(this.flatCombinedArray, ['schema.sort'], [orderDirection])\n    },\n    storeStateData () {\n      this.updateArrayFromState(this.valueIntern, this.schema)\n      return this.valueIntern\n    },\n    storeStateSchema () {\n      this.updateArrayFromState(this.valueIntern, this.schema)\n      return this.schema\n    }\n  },\n  watch: {\n    schema: function (newSchema) {\n      __log(newSchema)\n      this.rebuildArrays(this.valueIntern, newSchema)\n      // this.schema = newSchema\n    }\n  },\n  methods: {\n    // MAP TYPE\n    mapTypeToComponent (type) {\n      // merge global registered components into typeToComponent Object\n      const allTypeComponents = { ...typeToComponent, ...this.$app._instance.appContext.components }\n      // const typeToComponent -> maps type to according v-component\n      // ie. schema:{ type:'password', ... } to specific vuetify-control or default to v-text-field'\n      return allTypeComponents[type] ? allTypeComponents[type] : `v-${type}`\n    },\n    // CHECK FOR TYPE: DATE, TIME OR COLOR and EXT: TEXT\n    isDateTimeColorTypeAndExtensionText (obj) {\n      return isPicker.includes(obj.schema.type) && obj.schema.ext === 'text'\n    },\n    // CHECK FOR EXT: DATE, TIME OR COLOR\n    isDateTimeColorExtension (obj) {\n      return isPicker.includes(obj.schema.ext)\n    },\n    // BIND SCHEMA TEXT OPTIONS\n    bindOptions (b) {\n      // schema.options in RADIO/BUTTON\n      return isString(b) ? { value: b, label: b } : b\n    },\n    bindSchemaText (obj) {\n      return { ...defaultPickerSchemaText, ...obj.schema.text }\n    },\n    bindSchemaMenu (obj) {\n      return { ...defaultPickerSchemaMenu, ...obj.schema.menu }\n    },\n    bindSchema (obj) {\n      return obj.schema\n    },\n    suspendClickAppend (obj) {\n      // select|combobox|autocomplete -> suspend 'click:append' for working down arrow\n      return /(select|combobox|autocomplete)/.test(obj.schema.type) ? '' : 'click:append'\n    },\n    searchInputSync (obj) {\n      // schema.searchInput ->   bind 'search-input'\n      return (typeof obj.schema.searchInput !== 'undefined') ? 'search-input' : ''\n    },\n\n    // EXT TYPE\n    checkExtensionType (obj) {\n      // For native <INPUT> type use prop 'ext'\n      // { type:'text', ext:'range', ... } -> use native Input Type 'range' instead of slider\n      // { type:'text', ext:'number', ...} -> use native Input Type 'number'\n      return obj.schema.ext || obj.schema.type\n    },\n    // V-INTERN TYPE\n    checkInternType (obj) {\n      // If vuetify component needs a 'type' prop for working  - ie. datepicker uses type:'month'\n      // { type:'date', ext:'text', typeInt:'month' ...} -> use v-date-picker menu with intern Type 'month'\n      return obj.schema.typeInt || obj.schema.type\n    },\n    checkInternGroupType (obj) {\n      //  in type 'wrap|group' you can define with typeInt: a component as group - schema: { group1: { type:'wrap', typeInt:'v-card', ... } ...}\n      const typeInt = obj.schema.typeInt || defaultInternGroupType\n      return typeInt.startsWith('v-') ? typeInt : `v-${typeInt}`\n    },\n    // GET ITERATION KEY FOR TYPE ARRAY\n    getKeyForArray (id, obj, item, index) {\n      // IMPORTANT if you want to add or remove items in type:'array'\n      // more Info ->\n      // https://forum.vuejs.org/t/after-splicing-an-object-wrong-item-disappears-from-view/9247/4\n      // https://stackoverflow.com/questions/45655090/vue-array-splice-removing-wrong-item-from-list\n\n      // create for iteration v-for an uniqe key from each object in array using index and time.hash\n      // or define your key index by defining a key property\n      // MODEL\n      // arrayTasks: [{ trace:'100', label:'A'}, ...  ]\n      // SCHEMA\n      // arrayTasks: { type:'array', schema:{ ... } }                                                      DEFAULT KEY -> KEY id-key-index   'arrayTasks-0'\n      // arrayTasks: { type:'array', key:'trace', schema:{ trace: { type:'text'}, ... } }                              -> KEY trace            100\n      // arrayTasks: { type:'array', key:['trace','label'], schema:{ trace: { type:'text'}, label: { type:'text'} } }  -> KEY trace_label      100_A\n\n      // IMPORTANT! Key should not contain an EDITABLE prop, because of re-iteration on any change\n\n      const k = obj.schema.key\n      return k ? Array.isArray(k) ? k.map(i => item[i]).join('_') : item[k] : (!isNaN(index)) ? `${id}-${obj.key}-${index}` : index\n    },\n    //\n    // GET IMG SOURCE\n    getImageSource (obj) {\n      // if exist get source from src otherwise join schema.base & value & schema.tail\n      return obj.schema.src ? obj.schema.src : `${obj.schema.base}${obj.value}${obj.schema.tail}`\n    },\n    //\n    // ICON\n    getIconValue (obj) {\n      // icon: try schema.label or if undefined use value\n      return obj.schema.label ? obj.schema.label : this.setValue(obj)\n    },\n    //\n    // TOOLTIP\n    getShorthandTooltip (schemaTooltip) {\n      // check if tooltip is typeof string ->  shorthand { bottom:true, label: obj.schema.tooltip} otherwise take original object\n      return isString(schemaTooltip) ? { bottom: true, label: schemaTooltip } : schemaTooltip\n    },\n    getShorthandTooltipLabel (schemaTooltip) {\n      // check if tooltip is typeof string ->  return Label\n      return isString(schemaTooltip) ? schemaTooltip : schemaTooltip && schemaTooltip.label\n    },\n    //\n    // FORM SLOTS\n    getFormTopSlot () {\n      // Slot for Top Line in Formbase -> 'slot-formbase-top'\n      return `${topSlotAppendix}-${this.id}`\n    },\n    getFormBottomSlot () {\n      // Slot for Bottom Line in Formbase -> 'slot-formbase-bottom'\n      return `${bottomSlotAppendix}-${this.id}`\n    },\n    //\n    // KEY SLOTS\n    getKeyInjectSlot (obj, inject) {\n      // get slot starting with 'slot-inject' and inject verb 'thumb-label'   -> 'slot-inject-thumb-label-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${injectSlotAppendix}-${inject}-${keyClassAppendix}`)\n    },\n    getKeyTopSlot (obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-top'  -> 'slot-top-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${topSlotAppendix}-${keyClassAppendix}`)\n    },\n    getKeyItemSlot (obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-item'  -> 'slot-item-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${itemSlotAppendix}-${keyClassAppendix}`)\n    },\n    getKeyBottomSlot (obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-bottom'  -> 'slot-bottom-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${bottomSlotAppendix}-${keyClassAppendix}`)\n    },\n    getKeyTooltipSlot (obj) {\n      // matches Key specific Tooltip | name by replacing '.' with '-' and prepending 'slot-bottom'  -> 'slot-tooltip-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${tooltipSlotAppendix}-${keyClassAppendix}`)\n    },\n    getTooltipSlot (obj) {\n      // default tooltip slot matches all keys\n      return `${tooltipSlotAppendix}`\n    },\n    //\n    // ARRAY SLOTS\n    getArrayTopSlot (obj) {\n      // slot each item from array  -> 'slot-top-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${topSlotAppendix}-${arrayClassAppendix}`)\n    },\n    getArrayItemSlot (obj) {\n      // slot each item from array  -> 'slot-top-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${itemSlotAppendix}-${arrayClassAppendix}`)\n    },\n    getArrayBottomSlot (obj) {\n      // slot each item from array   -> 'slot-bottom-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${bottomSlotAppendix}-${arrayClassAppendix}`)\n    },\n    //\n    // TYPE SLOTS\n    getTypeTopSlot (obj) {\n      // get Type specific slot name  -> 'slot-top-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, `${topSlotAppendix}-${typeClassAppendix}`)\n    },\n    getTypeItemSlot (obj) {\n      // get Type specific slot name  -> 'slot-item-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, `${itemSlotAppendix}-${typeClassAppendix}`)\n    },\n    getTypeBottomSlot (obj) {\n      // get Type specific slot name  -> 'slot-bottom-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, `${bottomSlotAppendix}-${typeClassAppendix}`)\n    },\n    //\n    // CLASS Names\n    getPropertyClassNameWithAppendix (obj, appendix) {\n      // get PROP specific name by app-/prepending 'appendix-' and replacing '.' with '-' in nested key path  -> 'controls switch'\n      return obj.key ? obj.key.split(pathDelimiter).map(s => `${appendix ? appendix + classKeyDelimiter : ''}${s}`).join(' ') : ''\n    },\n    getPropertyClassName (obj) {\n      return this.getPropertyClassNameWithAppendix(obj, propertyClassAppendix)\n    },\n    getKeyClassNameWithAppendix (obj, appendix) {\n      // get KEY specific name by app-/prepending 'appendix-' and replacing '.' with '-' in nested key path  -> 'top-slot-address-city'\n      return `${appendix ? appendix + classKeyDelimiter : ''}${this.id ? this.id + classKeyDelimiter : ''}${obj.key.replace(/\\./g, '-')}`\n      // return `${appendix ? appendix + classKeyDelimiter : ''}${obj.key.replace(/\\./g, '-')}`\n    },\n    getKeyClassName (obj) {\n      return this.getKeyClassNameWithAppendix(obj, keyClassAppendix)\n    },\n    getTypeClassNameWithAppendix (obj, appendix) {\n      // get TYPE specific class name by prepending '-type' -> 'type-checkbox'\n      return `${appendix ? appendix + classKeyDelimiter : ''}${this.id ? this.id + classKeyDelimiter : ''}${obj.schema.type}`\n      // return `${appendix + classKeyDelimiter}${obj.schema.type}`\n    },\n    getTypeClassName (obj) {\n      return this.getTypeClassNameWithAppendix(obj, typeClassAppendix)\n    },\n    getClassName (obj) {\n      // combines all into a single classname\n      // class => ie. 'item type-checkbox key-address-zip prop-adress prop-zip'\n      return `${itemClassAppendix} ${this.getTypeClassName(obj)} ${this.getKeyClassName(obj)} ${this.getPropertyClassName(obj)}`\n    },\n    //\n    // GRID\n    gridMapper (obj, prepender) {\n      if (obj) {\n        ['sm', 'md', 'lg', 'xl'].map(k => {\n          if (obj[k]) { obj[prepender + k] = obj[k]; delete obj[k] }\n        })\n      }\n    },\n    gridReplaceXS (obj, replacer) {\n      // see vuetify Grid - replace Prop XS -V1.5 with COLS, ORDER, OFFSET - V2.0\n      // xs must be replaced in new Vuetify 2.0 Grid with cols, offset, order\n      if (obj && obj.xs) { obj[replacer] = obj.xs; delete obj.xs }\n    },\n    getGridAttributes (obj) {\n      // FLEX DEPRECATED use COL instead of FLEX\n      // flex:{ xs|sm|md|lg } - value:number|string\n\n      // col:{ cols|sm|md|lg|xl } - value:number|string\n      // order:{ order|sm|md|lg|xl|order-sm|order-md|order-lg|order-xl } - value:number|string\n      // offset:{ offset|sm|md|lg|xl|offset-sm|offset-md|offset-lg|offset-xl } - value:number|string\n\n      const colSchema = obj.schema.col || obj.schema.flex\n\n      const colAttr = this.col || this.flex || colDefault\n\n      const colObject = colSchema\n        // if available use schema definition of cols\n        ? (isPlainObject(colSchema) ? colSchema : isNumber(colSchema) || isString(colSchema) ? { cols: colSchema } : { cols: 'auto' })\n        // else use formbase attribute definition of cols\n        : colAttr ? (isPlainObject(colAttr) ? colAttr : isNumber(colAttr) || isString(colAttr) ? { cols: colAttr } : { cols: 'auto' })\n        // if no definition set cols to 'auto'\n          : { cols: 'auto' }\n\n      this.gridReplaceXS(colObject, 'cols')\n\n      // schema definition of offset\n      const offset = obj.schema.offset\n      const offsetObject = offset ? (isPlainObject(offset) ? offset : { offset }) : offset\n      this.gridMapper(offsetObject, 'offset-')\n      this.gridReplaceXS(offsetObject, 'offset')\n\n      // schema definition of offset\n      const order = obj.schema.order\n      const orderObject = order ? (isPlainObject(order) ? order : { order }) : order\n      this.gridMapper(orderObject, 'order-')\n      this.gridReplaceXS(orderObject, 'order')\n\n      return { ...colObject, ...offsetObject, ...orderObject }\n    },\n    getRowGroupOrArray (obj) {\n      return obj.schema.row || this.row || rowDefault\n    },\n    getColGroupOrArray (obj) {\n      return obj.schema.col || this.col || colDefault\n    },\n    //\n    // SANITIZE SLOTS\n    getInjectedScopedSlots (id, obj) {\n      // <template #slot-inject-thumb-label-key-formbase-path-to-mykey />\n      // extract the verb 'thumb-label' from Slots starting with 'slot-inject' and matching [component-id] and [key]\n      const rx = new RegExp(`${injectSlotAppendix}-(.*?)-${keyClassAppendix}`)\n      return Object.keys(this.$slots)\n        .filter(s => (s.includes(`${id}${classKeyDelimiter}${obj.key.replace(/\\./g, '-')}`) && s.includes(injectSlotAppendix)))\n        .map(i => i.match(rx)[1])\n    },\n    //\n    // Map Values coming FROM Control, TO Control or DROP on Control\n    toCtrl (params) {\n      // signature params { value, obj, data, schema }\n      //\n      // manipulate value going to control, function must return a (modified) value\n      // schema:{ name: { type:'text', toCtrl: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      // return isFunction(params.obj.schema && params.obj.schema.toCtrl) ? params.obj.schema.toCtrl(params) : params.value\n      return params.obj.schema && isFunction(params.obj.schema.toCtrl) ? params.obj.schema.toCtrl(params) : params.value\n    },\n    fromCtrl (params) {\n      // signature params { value, obj, data, schema }\n      //\n      // manipulate updated value from control, function must return a (modified) value\n      // schema:{ name: { type:'text', fromCtrl: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      return params.obj.schema && isFunction(params.obj.schema.fromCtrl) ? params.obj.schema.fromCtrl(params) : params.value\n    },\n    dropCtrl (params) {\n      // signature params { value, obj, dragObject, dragEvent, event,data, schema }\n      //\n      // manipulate dropped value from control, function must return a (modified) value\n      // schema:{ name: { type:'text', drop: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      return params.obj.schema && isFunction(params.obj.schema.drop) ? params.obj.schema.drop(params) : params.value\n    },\n    //\n    // Drag / Drop / DropValue\n    dragstart (event, obj) {\n      if (!obj.schema.drag) return\n\n      event.dataTransfer.dropEffect = dropEffect\n      event.dataTransfer.effectAllowed = dropEffect\n\n      const dragEvent = this.onEvent(event, obj)\n      event.dataTransfer.setData('text', JSON.stringify(dragEvent))\n    },\n\n    dragover (event, obj) { return obj.schema.drop ? event.preventDefault() : null },\n\n    drop (event, obj) {\n      if (!obj.schema.drop) return event.preventDefault()\n      // get dragEvent and dragEvent.obj\n      obj.dragEvent = JSON.parse(event.dataTransfer.getData('text'))\n\n      // no drop on drag object\n      if (obj.key === obj.dragEvent.obj.key && obj.id === obj.dragEvent.id) return event.preventDefault()\n      // handle schema.drop function\n      if (isFunction(obj.schema.drop)) obj.value = this.dropValue(obj, event)\n\n      this.onEvent(event, obj)\n\n      event.preventDefault()\n    },\n\n    dropValue (obj, event) {\n      return this.dropCtrl({ value: obj.dragEvent.value, obj, event, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    //\n    // Set Value\n    setValue (obj, type) {\n      // Use 'schema.toCtrl' Function for setting a modified Value\n      // __log(\n      //     obj.schema.name,\n      //     this.storeStateData,\n      //     // obj.value\n      // )\n      return obj.schema.type === 'wrap'\n        ? this.toCtrl({ value: this.storeStateData, obj, data: this.storeStateData, schema: this.storeStateSchema })\n        : this.toCtrl({ value: obj.value, obj, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    //\n    // EVENTS Get Value from Input & other Events\n    onInput (value, obj, type = 'input') {\n      // Value after change in Control\n      value = this.fromCtrl({ value, obj, data: this.storeStateData, schema: this.storeStateSchema })\n      // harmonize undefined or empty strings => null, because 'clearable' in vuetify controls resets to null and not to empty string!\n      value = !value || value === '' ? null : value\n      // if schema type is number convert to number\n      value = obj.schema.type === 'number' ? Number(value) : value\n      // update deep nested prop(key) with value\n      this.setObjectByPath(this.storeStateData, obj.key, value)\n\n      const emitObj = {\n        on: type,\n        id: this.id,\n        index: this.index,\n        params: { index: this.index, lastValue: obj.value },\n        key: obj.key,\n        value,\n        obj,\n        data: this.storeStateData,\n        schema: this.storeStateSchema,\n        parent: this.parent\n      }\n      this.emitValue(type, emitObj)\n      return emitObj\n    },\n    onEvent (event = {}, obj, tag) {\n      const text = event && event.srcElement && event.srcElement.innerText\n      const model = obj.schema.model\n      const open = obj.schema.open\n      const index = this.index\n      // avoid circular JSON in dragstart\n      const parent = event.type !== 'dragstart' ? this.parent : undefined\n\n      const emitObj = {\n        on: event.type,\n        id: this.id,\n        index,\n        params: { text, tag, model, open, index },\n        key: obj.key,\n        value: obj.value,\n        obj,\n        event,\n        data: this.storeStateData,\n        schema: this.storeStateSchema,\n        parent\n      }\n\n      delay(() => { this.emitValue(event.type, emitObj), onEventDelay })\n\n      return emitObj\n    },\n    onClickOutside (event, obj) {\n      if (!obj.schema || !obj.schema.clickOutside) return\n      if (isFunction(obj.schema.clickOutside)) return obj.schema.clickOutside(obj, event)\n      this.emitValue('clickOutside', { on: 'clickOutside', id: this.id, key: obj.key, value: obj.value, obj, params: { x: event.clientX, y: event.clientY }, event, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    onIntersect (isIntersecting, entries, observer, obj) {\n      //   const isIntersecting = entries[0].isIntersecting\n      const index = this.index\n      this.emitValue('intersect', { on: 'intersect', id: this.id, index, key: obj.key, value: obj.value, obj, params: { isIntersecting, entries, observer }, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    onSwipe (tag, obj) {\n      this.emitValue('swipe', { on: 'swipe', id: this.id, key: obj.key, value: obj.value, obj, params: { tag }, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    onResize (event) {\n      this.emitValue('resize', { on: 'resize', id: this.id, params: { x: window.innerWidth, y: window.innerHeight }, event, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    //\n    // EMIT EVENT\n    emitValue (event, val) {\n      const emitEvent = change.includes(event) ? 'change' : watch.includes(event) ? 'watch' : mouse.includes(event) ? 'mouse' : display.includes(event) ? 'display' : event\n\n      if (this.$attrs[`${emitEvent}:${this.id}`]) {\n        this.deprecateEventCustomID(emitEvent)\n        this.deprecateCombinedEvents(emitEvent, event)\n        this.$emit(`${emitEvent}:${this.id}`, val) // listen to specific event only\n      } else if (this.$attrs[`${emitEvent}`]) {\n        this.deprecateCombinedEvents(emitEvent, event)\n        this.$emit(emitEvent, val) // listen to specific event only\n      } else if (this.$attrs[`${event}:${this.id}`]) {\n        this.deprecateEventCustomID(event)\n        this.$emit(`${event}:${this.id}`, val) // listen to specific event only\n      } else if (this.$attrs[`${event}`]) {\n        this.$emit(event, val) // listen to specific event only\n      }\n    },\n    deprecateEventCustomID (ev) {\n      console.warn(`--- DEPRECATION ${ev}:${this.id}: ----------------------------------------------------------------------------`)\n      console.warn(`<v-form-base  @${ev}:${this.id}=\"handler\" /> is deprecated use simplified version <v-form-base  @${ev}=\"handler\" />`)\n      console.warn('---------------------------------------------------------------------------------------------')\n    },\n    deprecateCombinedEvents (emitEvent, event) {\n      if (emitEvent !== event) {\n        console.warn('--- DEPRECATION Combined Listener:  --------------------------------------------------------------------------')\n        console.warn(`Combined Event-Listener '${emitEvent}' have been removed for better comprehensibility and simplification`)\n        console.warn('Please use separate listener for each event like <v-form-base  @focus=\"handler\" @input=\"handler\" @blur=\"handler\"/>')\n        console.warn('---------------------------------------------------------------------------------------------')\n      }\n    },\n    //\n    // PREPARE ARRAYS DATA & SCHEMA\n    setObjectByPath (object, path, value) {\n      // resolves chained keys (like 'user.address.street') on an object and set the value\n      const pathArray = path.split(pathDelimiter)\n      pathArray.forEach((p, ix) => {\n        if (ix === pathArray.length - 1) object[p] = value\n        object = object[p]\n      })\n    },\n    updateArrayFromState (data, schema) {\n      this.flatCombinedArray.forEach(obj => {\n        obj.value = get(data, obj.key, null) // get - lodash\n        obj.schema = get(schema, obj.key, null) // get - lodash\n      })\n    },\n    sanitizeShorthandType (key, schema) {\n      // if key in schema is string only, then handle shorthand definition\n      // schema:{ name:'text' }  => schema:{ name: { type:'text', label: 'name' }\n      return isString(schema) ? { type: schema, label: key } : schema\n    },\n    flattenObjects (dat = {}, sch) {\n      const data = {}\n      const schema = {}\n      // Organize Formular using Schema not Data\n      Object.keys(sch).forEach(key => {\n        // convert string definition of name:'text' into object name:{type:'text'}\n        sch[key] = this.sanitizeShorthandType(key, sch[key])\n\n        const bothArray = Array.isArray(dat[key]) && Array.isArray(sch[key])\n        const datObjectWithoutSchemaType = isPlainObject(dat[key]) && !sch[key].type\n        const datObjectContainsTypeKey = (dat[key] && dat[key].type && (sch[key] && sch[key].type))\n        const notInstanceOfFileObject = !(dat[key] instanceof File)\n\n        if (bothArray || datObjectWithoutSchemaType || (datObjectContainsTypeKey && notInstanceOfFileObject)) {\n          const { data: flatData, schema: flatSchema } = this.flattenObjects(dat[key], sch[key])\n          Object.keys(flatData).forEach(ii => {\n            data[key + pathDelimiter + ii] = flatData[ii]\n            schema[key + pathDelimiter + ii] = flatSchema[ii]\n          })\n        } else {\n          data[key] = dat[key]\n          schema[key] = sch[key]\n        }\n      })\n      return { data, schema }\n    },\n    combineObjectsToArray ({ data, schema }) {\n      const arr = []\n      Object.keys(schema).forEach(key => {\n        if (!isPlainObject(schema[key])) {\n          console.warn(`Schema '${JSON.stringify(schema)}' of Prop '${key}' must be a string with value of type key:'text' or a plainobject with at least key:{ type:'text'} definition.  Prop '${key}' will be ignored!`)\n          return\n        }\n        arr.push({ key, value: data[key], schema: schema[key] })\n      })\n      return arr\n    },\n    flattenAndCombineToArray (data, schema) {\n      // flatten nested structure of both objects 'data' & 'schema' ...\n      const flattenedObjects = this.flattenObjects(data, schema)\n      // ... and combine them to an array\n      return this.combineObjectsToArray(flattenedObjects)\n    },\n    autogenerateSchema (value) {\n      // generate a minimal default schema from value\n      let schema = JSON.stringify(value, (key, val) => val === undefined ? null : val)\n      schema = JSON.parse(schema, (key, val) => {\n        if (val === null || val === undefined) return defaultSchemaIfValueIsNullOrUndefined(key)\n        if (typeof val === 'string') return defaultSchemaIfValueIsString(key)\n        if (typeof val === 'number') return defaultSchemaIfValueIsNumber(key)\n        if (typeof val === 'boolean') return defaultSchemaIfValueIsBoolean(key)\n        return val\n      })\n      // assign root props to avoid manipulating prop: schema\n      Object.keys(schema).forEach(key => this.schema[key] = schema[key])\n    },\n\n    tryAutogenerateModelStructure (model, schema) {\n      // generate or complete an empty model based on schema structure\n\n      Object.keys(schema).forEach(key => {\n        // model must be at least an empty Object. It doesn't work with 'null', 'undefined' or any 'primitive value'\n        // Autogeneration from Schema works only if model is an empty Object\n        // if model is NOT an empty Object, no action is applied, otherwise data in model could be changed or modified\n        if (!isEmpty(model[key])) return\n\n        const val = schema[key]\n        if (val.type === 'group') {\n          model[key] = {}\n          this.tryAutogenerateModelStructure(model[key], val.schema)\n        } else\n        if (val.type === 'array') {\n          model[key] = {}\n          this.tryAutogenerateModelStructure(model[key], val.schema)\n        } else\n        if (val.type === 'list') {\n          model[key] = {}\n        } else\n        if (isPlainObject(val) && !val.type) {\n          model[key] = {}\n          this.tryAutogenerateModelStructure(model[key], val)\n        }\n        if (Array.isArray(val) && !val.type) {\n          model[key] = {}\n          this.tryAutogenerateModelStructure(model[key], val)\n        }\n      })\n    },\n    rebuildArrays (model, schema) {\n      // undefined, null or primitive value for model can't work because you need reference to object for working on\n      if (!model) throw 'Property \\'model\\' is null or undefined. Use \\'<v-form-base :model=\"myModel\" :schema=\"mySchema\" />\\'. myModel must be at least an empty Object.'\n\n      // noise if async loading\n      if (isEmpty(schema) && isEmpty(model)) {\n        console.warn('At least one of the properties \\'model\\' or \\'schema\\' in <v-form-base /> must be at least an empty Object. Ignore this Warning on async loading \\'model\\' or \\'schema\\' ')\n        // return\n      }\n      // generate/complete structure of model\n      this.tryAutogenerateModelStructure(model, schema)\n\n      // no schema defined or empty -> autogenerate basic schema\n      if (isEmpty(schema)) this.autogenerateSchema(model)\n\n      // create flatted working array from schema and value\n      this.flatCombinedArray = this.flattenAndCombineToArray(this.storeStateData, this.storeStateSchema)\n    }\n    //\n  },\n  created () {\n    this.rebuildArrays(this.valueIntern, this.schema)\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}