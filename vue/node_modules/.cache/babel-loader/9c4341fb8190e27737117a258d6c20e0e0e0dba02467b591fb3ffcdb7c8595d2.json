{"ast":null,"code":"import htmlClasses from '@/utils/htmlClasses';\nexport default {\n  props: {\n    value: {\n      type: Boolean\n    },\n    name: {\n      type: String,\n      \"default\": \"Item\"\n    },\n    transition: {\n      type: String,\n      \"default\": \"bottom\"\n    },\n    widthType: {\n      type: String\n    },\n    systembar: {\n      type: Boolean,\n      \"default\": false\n    },\n    fullscreen: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      // dialog: this.value,\n      widths: {\n        sm: \"300px\",\n        md: \"500px\",\n        lg: \"750px\"\n      },\n      width: this.widthType,\n      modalClass: htmlClasses.modal,\n      firstFocusableEl: null,\n      lastFocusableEl: null,\n      full: this.fullscreen\n    };\n  },\n  computed: {\n    dialog: {\n      get: function get() {\n        return this.value;\n      },\n      set: function set(value) {\n        __log('modal->dialog->setter', value);\n        this.$emit('input', value);\n      }\n    },\n    // full: {\n    //     get () {\n    //         return this.fullscreen\n    //         return this.fullScreen\n    //     },\n    //     set (value) {\n    //         // this.$emit('screenListener', this.full)\n    //     }\n    // },\n    togglePersistent: function togglePersistent() {\n      return this.persistent;\n    },\n    toggleScrollable: function toggleScrollable() {\n      return this.scrollable;\n    },\n    modalWidth: function modalWidth() {\n      return !!this.width ? this.widths[this.width] : null;\n    }\n  },\n  watch: {},\n  methods: {\n    toggle: function toggle() {\n      this.dialog = !this.dialog;\n    },\n    close: function close() {\n      this.dialog = false;\n    },\n    open: function open() {\n      this.dialog = true;\n    },\n    confirm: function confirm() {\n      this.dialog = false;\n    },\n    attrs: function attrs(_attrs) {\n      __log(_attrs);\n      return _attrs;\n    },\n    toggleFullScreen: function toggleFullScreen() {\n      __log(this.full);\n      return this.full = !this.full;\n    },\n    screenListener: function screenListener(e) {\n      // __log(e.target);\n      this.full = e.target.fullScreen;\n    }\n  },\n  beforeDestroy: function beforeDestroy() {},\n  created: function created() {\n    // setInterval((self) => {\n    //     __log(self.dialog)\n    // }, 1000, this)\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}