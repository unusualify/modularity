{"ast":null,"code":"/**\n * Media Library\n *\n * Set options for the Media Library and all the medias attached into the form\n */\n\nimport Vue from 'vue';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { MEDIA_LIBRARY } from '../mutations';\nimport ACTIONS from '@/store/actions';\nconst state = {\n  /**\n   * An object of all crops available for cropper component configuration\n   * @type {Object}\n   */\n  crops: window[process.env.VUE_APP_NAME].STORE.medias.crops || {},\n  /**\n   * Display the file name of images\n   * @type {Object}\n   */\n  showFileName: window[process.env.VUE_APP_NAME].STORE.medias.showFileName || false,\n  /**\n   * Define types available in medias library\n   * @type {Array.<string>}\n   */\n  types: window[process.env.VUE_APP_NAME].STORE.medias.types || [],\n  /**\n   * Current type of media library\n   * @type {string}\n   */\n  type: 'image',\n  /**\n   * Connector is used to save media by usage (eg. cover, image, profile...)\n   * @type {string}\n   */\n  connector: null,\n  /**\n   * Define the max of medias that can be select from the media libray\n   * @type {number}\n   */\n  max: 0,\n  /**\n   * Define the maximum filesize allowed to attach in a field from the media library\n   * @type {number}\n   */\n  filesizeMax: 0,\n  /**\n   * Define the min image width allowed to attach in a field from the media library\n   * @type {number}\n   */\n  widthMin: 0,\n  /**\n   * Define the min image height allowed to attach in a field from the media library\n   * @type {number}\n   */\n  heightMin: 0,\n  /**\n   * Restrict the media library navigation between type\n   * @type {Boolean}\n   */\n  strict: true,\n  /**\n   * An object of selected medias by usage (connector)\n   * @type {Object.<string,Object>}\n   */\n  selected: window[process.env.VUE_APP_NAME].STORE.medias.selected || {},\n  /**\n   * An object of configs\n   * @type {Object.<string,Object>}\n   */\n  config: window[process.env.VUE_APP_NAME].STORE.medias.config || {\n    useWysiwyg: false,\n    wysiwygOptions: {}\n  },\n  /**\n   * An array of current uploading medias. When upload is ended, array is reset\n   * @type {Array}\n   */\n  loading: [],\n  /**\n   * The progress value of an upload. When upload is ended, this value is reset to 0.\n   * @type {number}\n   */\n  uploadProgress: 0,\n  /**\n   * An index used when mediaLibrary is open to replace a file\n   * @type {number}\n   */\n  indexToReplace: -1,\n  showModal: window[process.env.VUE_APP_NAME].STORE.medias.openModal || false\n};\n\n// getters\nconst getters = {\n  mediasByBlockId: state => id => {\n    const ids = Object.keys(state.selected).filter(key => key.startsWith(`blocks[${id}]`));\n    const medias = {};\n    ids.forEach(id => medias[id] = state.selected[id]);\n    return medias;\n  }\n};\nconst mutations = {\n  [MEDIA_LIBRARY.UPDATE_MEDIA_TYPE_TOTAL](state, type) {\n    state.types = state.types.map(t => {\n      if (t.value === type.type) t.total = type.total;\n      return t;\n    });\n  },\n  [MEDIA_LIBRARY.UPDATE_REPLACE_INDEX](state, index) {\n    state.indexToReplace = index;\n  },\n  [MEDIA_LIBRARY.INCREMENT_MEDIA_TYPE_TOTAL](state, type) {\n    state.types = state.types.map(t => {\n      if (t.value === type) t.total = t.total + 1;\n      return t;\n    });\n  },\n  [MEDIA_LIBRARY.DECREMENT_MEDIA_TYPE_TOTAL](state, type) {\n    state.types = state.types.map(t => {\n      if (t.value === type) t.total = t.total - 1;\n      return t;\n    });\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIAS](state, {\n    mediaRole,\n    index,\n    media\n  }) {\n    Vue.set(state.selected[mediaRole], index, media);\n  },\n  [MEDIA_LIBRARY.SAVE_MEDIAS](state, medias) {\n    if (state.connector) {\n      const key = state.connector;\n      const existedSelectedConnector = state.selected[key] && state.selected[key].length;\n      if (existedSelectedConnector && state.indexToReplace > -1) {\n        // Replace mode\n        state.selected[key].splice(state.indexToReplace, 1, cloneDeep(medias[0]));\n      } else if (existedSelectedConnector) {\n        // Add mode\n        medias.forEach(function (media) {\n          state.selected[key].push(cloneDeep(media));\n        });\n      } else {\n        // Create mode\n        const newMedias = {};\n        newMedias[key] = medias;\n        state.selected = Object.assign({}, state.selected, newMedias);\n      }\n      state.indexToReplace = -1;\n    }\n  },\n  [MEDIA_LIBRARY.DESTROY_SPECIFIC_MEDIA](state, media) {\n    if (state.selected[media.name]) {\n      state.selected[media.name].splice(media.index, 1);\n      if (state.selected[media.name].length === 0) Vue.delete(state.selected, media.name);\n    }\n    state.connector = null;\n  },\n  [MEDIA_LIBRARY.DESTROY_MEDIAS](state, connector) {\n    if (state.selected[connector]) Vue.delete(state.selected, connector);\n    state.connector = null;\n  },\n  [MEDIA_LIBRARY.REORDER_MEDIAS](state, newValues) {\n    const newMedias = {};\n    newMedias[newValues.name] = newValues.medias;\n    state.selected = Object.assign({}, state.selected, newMedias);\n  },\n  [MEDIA_LIBRARY.PROGRESS_UPLOAD_MEDIA](state, media) {\n    const mediaToUpdate = state.loading.filter(m => m.id === media.id);\n    // Update existing form field\n    if (mediaToUpdate.length) {\n      mediaToUpdate[0].error = false;\n      mediaToUpdate[0].progress = media.progress;\n    } else {\n      state.loading.unshift({\n        id: media.id,\n        name: media.name,\n        progress: media.progress,\n        replacementId: media.replacementId,\n        isReplacement: media.isReplacement\n      });\n    }\n  },\n  [MEDIA_LIBRARY.PROGRESS_UPLOAD](state, uploadProgress) {\n    state.uploadProgress = uploadProgress;\n  },\n  [MEDIA_LIBRARY.DONE_UPLOAD_MEDIA](state, media) {\n    state.loading.forEach(function (m, index) {\n      if (m.id === media.id) state.loading.splice(index, 1);\n    });\n  },\n  [MEDIA_LIBRARY.ERROR_UPLOAD_MEDIA](state, media) {\n    state.loading.forEach(function (m, index) {\n      if (m.id === media.id) {\n        Vue.set(state.loading[index], 'progress', 0);\n        Vue.set(state.loading[index], 'error', true);\n        Vue.set(state.loading[index], 'errorMessage', media.errorMessage);\n      }\n    });\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_CONNECTOR](state, newValue) {\n    if (newValue && newValue !== '') state.connector = newValue;else state.connector = null;\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_MODE](state, newValue) {\n    state.strict = newValue;\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_TYPE](state, newValue) {\n    if (newValue && newValue !== '') state.type = newValue;\n  },\n  [MEDIA_LIBRARY.RESET_MEDIA_TYPE](state) {\n    // __log(state)\n    state.type = state.types[0].value;\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_MAX](state, newValue) {\n    state.max = Math.max(0, newValue);\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_FILESIZE_MAX](state, newValue) {\n    state.filesizeMax = Math.max(0, newValue);\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_WIDTH_MIN](state, newValue) {\n    state.widthMin = Math.max(0, newValue);\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_HEIGHT_MIN](state, newValue) {\n    state.heightMin = Math.max(0, newValue);\n  },\n  [MEDIA_LIBRARY.SET_MEDIA_METADATAS](state, metadatas) {\n    const connector = metadatas.media.context;\n    const medias = state.selected[connector];\n    const newValue = metadatas.value;\n\n    // Save all the custom metadatas here (with or wthout localization)\n    function setMetatadas(mediaToModify) {\n      if (newValue.locale) {\n        // if multi language we will fill an object\n        if (!mediaToModify.metadatas.custom[newValue.id]) {\n          mediaToModify.metadatas.custom[newValue.id] = {};\n        }\n        mediaToModify.metadatas.custom[newValue.id][newValue.locale] = newValue.value;\n      } else {\n        mediaToModify.metadatas.custom[newValue.id] = newValue.value;\n      }\n      return mediaToModify;\n    }\n    if (metadatas.media.hasOwnProperty('index')) {\n      const media = setMetatadas(cloneDeep(medias[metadatas.media.index]));\n      Vue.set(medias, metadatas.media.index, media);\n    }\n  },\n  [MEDIA_LIBRARY.DESTROY_MEDIA_CONNECTOR](state) {\n    state.connector = null;\n  },\n  [MEDIA_LIBRARY.SET_MEDIA_CROP](state, crop) {\n    const key = crop.key;\n    const index = crop.index;\n    const media = state.selected[key][index];\n    function addCrop(mediaToModify) {\n      if (!mediaToModify.crops) mediaToModify.crops = {};\n\n      // save all the crop variants to the media\n      for (const variant in crop.values) {\n        const newValues = {};\n        newValues.name = crop.values[variant].name || variant;\n        newValues.x = crop.values[variant].x;\n        newValues.y = crop.values[variant].y;\n        newValues.width = crop.values[variant].width;\n        newValues.height = crop.values[variant].height;\n        mediaToModify.crops[variant] = newValues;\n      }\n      return mediaToModify;\n    }\n    const newMedia = addCrop(cloneDeep(media));\n    Vue.set(state.selected[key], index, newMedia);\n  },\n  [MEDIA_LIBRARY.ADD_MEDIAS](state, {\n    medias\n  }) {\n    state.selected = Object.assign({}, state.selected, medias);\n  }\n};\nconst actions = {\n  async [ACTIONS.DUPLICATE_BLOCK]({\n    commit,\n    getters\n  }, {\n    block,\n    id\n  }) {\n    // copy medias and update with the provided id\n    const medias = {\n      ...getters.mediasByBlockId(block.id)\n    };\n    const mediaIds = Object.keys(medias);\n    const duplicates = {};\n    mediaIds.forEach(mediaId => duplicates[mediaId.replace(block.id, id)] = [...medias[mediaId]]);\n    commit(MEDIA_LIBRARY.ADD_MEDIAS, {\n      medias: duplicates\n    });\n  }\n};\nexport default {\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["Vue","cloneDeep","MEDIA_LIBRARY","ACTIONS","state","crops","window","process","env","VUE_APP_NAME","STORE","medias","showFileName","types","type","connector","max","filesizeMax","widthMin","heightMin","strict","selected","config","useWysiwyg","wysiwygOptions","loading","uploadProgress","indexToReplace","showModal","openModal","getters","mediasByBlockId","id","ids","Object","keys","filter","key","startsWith","forEach","mutations","UPDATE_MEDIA_TYPE_TOTAL","map","t","value","total","UPDATE_REPLACE_INDEX","index","INCREMENT_MEDIA_TYPE_TOTAL","DECREMENT_MEDIA_TYPE_TOTAL","UPDATE_MEDIAS","mediaRole","media","set","SAVE_MEDIAS","existedSelectedConnector","length","splice","push","newMedias","assign","DESTROY_SPECIFIC_MEDIA","name","delete","DESTROY_MEDIAS","REORDER_MEDIAS","newValues","PROGRESS_UPLOAD_MEDIA","mediaToUpdate","m","error","progress","unshift","replacementId","isReplacement","PROGRESS_UPLOAD","DONE_UPLOAD_MEDIA","ERROR_UPLOAD_MEDIA","errorMessage","UPDATE_MEDIA_CONNECTOR","newValue","UPDATE_MEDIA_MODE","UPDATE_MEDIA_TYPE","RESET_MEDIA_TYPE","UPDATE_MEDIA_MAX","Math","UPDATE_MEDIA_FILESIZE_MAX","UPDATE_MEDIA_WIDTH_MIN","UPDATE_MEDIA_HEIGHT_MIN","SET_MEDIA_METADATAS","metadatas","context","setMetatadas","mediaToModify","locale","custom","hasOwnProperty","DESTROY_MEDIA_CONNECTOR","SET_MEDIA_CROP","crop","addCrop","variant","values","x","y","width","height","newMedia","ADD_MEDIAS","actions","DUPLICATE_BLOCK","commit","block","mediaIds","duplicates","mediaId","replace"],"sources":["/Users/oguzhanbukcuoglu/Desktop/Projects/crm_template/packages/oobook/crm-base/vue/src/js/store/modules/media-library.js"],"sourcesContent":["/**\n * Media Library\n *\n * Set options for the Media Library and all the medias attached into the form\n */\n\nimport Vue from 'vue'\nimport cloneDeep from 'lodash/cloneDeep'\nimport { MEDIA_LIBRARY } from '../mutations'\nimport ACTIONS from '@/store/actions'\n\nconst state = {\n  /**\n   * An object of all crops available for cropper component configuration\n   * @type {Object}\n   */\n  crops: window[process.env.VUE_APP_NAME].STORE.medias.crops || {},\n  /**\n   * Display the file name of images\n   * @type {Object}\n   */\n  showFileName: window[process.env.VUE_APP_NAME].STORE.medias.showFileName || false,\n  /**\n   * Define types available in medias library\n   * @type {Array.<string>}\n   */\n  types: window[process.env.VUE_APP_NAME].STORE.medias.types || [],\n  /**\n   * Current type of media library\n   * @type {string}\n   */\n  type: 'image',\n  /**\n   * Connector is used to save media by usage (eg. cover, image, profile...)\n   * @type {string}\n   */\n  connector: null,\n  /**\n   * Define the max of medias that can be select from the media libray\n   * @type {number}\n   */\n  max: 0,\n  /**\n   * Define the maximum filesize allowed to attach in a field from the media library\n   * @type {number}\n   */\n  filesizeMax: 0,\n  /**\n   * Define the min image width allowed to attach in a field from the media library\n   * @type {number}\n   */\n  widthMin: 0,\n  /**\n   * Define the min image height allowed to attach in a field from the media library\n   * @type {number}\n   */\n  heightMin: 0,\n  /**\n   * Restrict the media library navigation between type\n   * @type {Boolean}\n   */\n  strict: true,\n  /**\n   * An object of selected medias by usage (connector)\n   * @type {Object.<string,Object>}\n   */\n  selected: window[process.env.VUE_APP_NAME].STORE.medias.selected || {},\n  /**\n   * An object of configs\n   * @type {Object.<string,Object>}\n   */\n  config: window[process.env.VUE_APP_NAME].STORE.medias.config || { useWysiwyg: false, wysiwygOptions: {} },\n  /**\n   * An array of current uploading medias. When upload is ended, array is reset\n   * @type {Array}\n   */\n  loading: [],\n  /**\n   * The progress value of an upload. When upload is ended, this value is reset to 0.\n   * @type {number}\n   */\n  uploadProgress: 0,\n  /**\n   * An index used when mediaLibrary is open to replace a file\n   * @type {number}\n   */\n  indexToReplace: -1,\n\n  showModal: window[process.env.VUE_APP_NAME].STORE.medias.openModal || false\n}\n\n// getters\nconst getters = {\n  mediasByBlockId: (state) => (id) => {\n    const ids = Object.keys(state.selected).filter(key => key.startsWith(`blocks[${id}]`))\n    const medias = {}\n    ids.forEach(id => (medias[id] = state.selected[id]))\n    return medias\n  }\n}\n\nconst mutations = {\n  [MEDIA_LIBRARY.UPDATE_MEDIA_TYPE_TOTAL] (state, type) {\n    state.types = state.types.map(t => {\n      if (t.value === type.type) t.total = type.total\n      return t\n    })\n  },\n  [MEDIA_LIBRARY.UPDATE_REPLACE_INDEX] (state, index) {\n    state.indexToReplace = index\n  },\n  [MEDIA_LIBRARY.INCREMENT_MEDIA_TYPE_TOTAL] (state, type) {\n    state.types = state.types.map(t => {\n      if (t.value === type) t.total = t.total + 1\n      return t\n    })\n  },\n  [MEDIA_LIBRARY.DECREMENT_MEDIA_TYPE_TOTAL] (state, type) {\n    state.types = state.types.map(t => {\n      if (t.value === type) t.total = t.total - 1\n      return t\n    })\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIAS] (state, { mediaRole, index, media }) {\n    Vue.set(\n      state.selected[mediaRole],\n      index,\n      media\n    )\n  },\n  [MEDIA_LIBRARY.SAVE_MEDIAS] (state, medias) {\n    if (state.connector) {\n      const key = state.connector\n      const existedSelectedConnector = state.selected[key] && state.selected[key].length\n      if (existedSelectedConnector && state.indexToReplace > -1) {\n        // Replace mode\n        state.selected[key].splice(state.indexToReplace, 1, cloneDeep(medias[0]))\n      } else if (existedSelectedConnector) {\n        // Add mode\n        medias.forEach(function (media) {\n          state.selected[key].push(cloneDeep(media))\n        })\n      } else {\n        // Create mode\n        const newMedias = {}\n        newMedias[key] = medias\n        state.selected = Object.assign({}, state.selected, newMedias)\n      }\n\n      state.indexToReplace = -1\n    }\n  },\n  [MEDIA_LIBRARY.DESTROY_SPECIFIC_MEDIA] (state, media) {\n    if (state.selected[media.name]) {\n      state.selected[media.name].splice(media.index, 1)\n      if (state.selected[media.name].length === 0) Vue.delete(state.selected, media.name)\n    }\n\n    state.connector = null\n  },\n  [MEDIA_LIBRARY.DESTROY_MEDIAS] (state, connector) {\n    if (state.selected[connector]) Vue.delete(state.selected, connector)\n\n    state.connector = null\n  },\n  [MEDIA_LIBRARY.REORDER_MEDIAS] (state, newValues) {\n    const newMedias = {}\n    newMedias[newValues.name] = newValues.medias\n    state.selected = Object.assign({}, state.selected, newMedias)\n  },\n  [MEDIA_LIBRARY.PROGRESS_UPLOAD_MEDIA] (state, media) {\n    const mediaToUpdate = state.loading.filter((m) => m.id === media.id)\n    // Update existing form field\n    if (mediaToUpdate.length) {\n      mediaToUpdate[0].error = false\n      mediaToUpdate[0].progress = media.progress\n    } else {\n      state.loading.unshift({\n        id: media.id,\n        name: media.name,\n        progress: media.progress,\n        replacementId: media.replacementId,\n        isReplacement: media.isReplacement\n      })\n    }\n  },\n  [MEDIA_LIBRARY.PROGRESS_UPLOAD] (state, uploadProgress) {\n    state.uploadProgress = uploadProgress\n  },\n  [MEDIA_LIBRARY.DONE_UPLOAD_MEDIA] (state, media) {\n    state.loading.forEach(function (m, index) {\n      if (m.id === media.id) state.loading.splice(index, 1)\n    })\n  },\n  [MEDIA_LIBRARY.ERROR_UPLOAD_MEDIA] (state, media) {\n    state.loading.forEach(function (m, index) {\n      if (m.id === media.id) {\n        Vue.set(state.loading[index], 'progress', 0)\n        Vue.set(state.loading[index], 'error', true)\n        Vue.set(state.loading[index], 'errorMessage', media.errorMessage)\n      }\n    })\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_CONNECTOR] (state, newValue) {\n    if (newValue && newValue !== '') state.connector = newValue\n    else state.connector = null\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_MODE] (state, newValue) {\n    state.strict = newValue\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_TYPE] (state, newValue) {\n    if (newValue && newValue !== '') state.type = newValue\n  },\n  [MEDIA_LIBRARY.RESET_MEDIA_TYPE] (state) {\n    // __log(state)\n    state.type = state.types[0].value\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_MAX] (state, newValue) {\n    state.max = Math.max(0, newValue)\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_FILESIZE_MAX] (state, newValue) {\n    state.filesizeMax = Math.max(0, newValue)\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_WIDTH_MIN] (state, newValue) {\n    state.widthMin = Math.max(0, newValue)\n  },\n  [MEDIA_LIBRARY.UPDATE_MEDIA_HEIGHT_MIN] (state, newValue) {\n    state.heightMin = Math.max(0, newValue)\n  },\n  [MEDIA_LIBRARY.SET_MEDIA_METADATAS] (state, metadatas) {\n    const connector = metadatas.media.context\n    const medias = state.selected[connector]\n    const newValue = metadatas.value\n\n    // Save all the custom metadatas here (with or wthout localization)\n    function setMetatadas (mediaToModify) {\n      if (newValue.locale) {\n        // if multi language we will fill an object\n        if (!mediaToModify.metadatas.custom[newValue.id]) {\n          mediaToModify.metadatas.custom[newValue.id] = {}\n        }\n\n        mediaToModify.metadatas.custom[newValue.id][newValue.locale] = newValue.value\n      } else {\n        mediaToModify.metadatas.custom[newValue.id] = newValue.value\n      }\n\n      return mediaToModify\n    }\n\n    if (metadatas.media.hasOwnProperty('index')) {\n      const media = setMetatadas(cloneDeep(medias[metadatas.media.index]))\n      Vue.set(medias, metadatas.media.index, media)\n    }\n  },\n  [MEDIA_LIBRARY.DESTROY_MEDIA_CONNECTOR] (state) {\n    state.connector = null\n  },\n  [MEDIA_LIBRARY.SET_MEDIA_CROP] (state, crop) {\n    const key = crop.key\n    const index = crop.index\n    const media = state.selected[key][index]\n\n    function addCrop (mediaToModify) {\n      if (!mediaToModify.crops) mediaToModify.crops = {}\n\n      // save all the crop variants to the media\n      for (const variant in crop.values) {\n        const newValues = {}\n        newValues.name = crop.values[variant].name || variant\n        newValues.x = crop.values[variant].x\n        newValues.y = crop.values[variant].y\n        newValues.width = crop.values[variant].width\n        newValues.height = crop.values[variant].height\n\n        mediaToModify.crops[variant] = newValues\n      }\n\n      return mediaToModify\n    }\n\n    const newMedia = addCrop(cloneDeep(media))\n    Vue.set(state.selected[key], index, newMedia)\n  },\n  [MEDIA_LIBRARY.ADD_MEDIAS] (state, { medias }) {\n    state.selected = Object.assign({}, state.selected, medias)\n  }\n}\n\nconst actions = {\n  async [ACTIONS.DUPLICATE_BLOCK] ({ commit, getters }, { block, id }) {\n    // copy medias and update with the provided id\n    const medias = { ...getters.mediasByBlockId(block.id) }\n    const mediaIds = Object.keys(medias)\n    const duplicates = {}\n    mediaIds.forEach(mediaId => (duplicates[mediaId.replace(block.id, id)] = [...medias[mediaId]]))\n\n    commit(MEDIA_LIBRARY.ADD_MEDIAS, { medias: duplicates })\n  },\n\n}\n\nexport default {\n  state,\n  getters,\n  mutations,\n  actions\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
