{"ast":null,"code":"import htmlClasses from '@/utils/htmlClasses';\nexport default {\n  props: {\n    value: {\n      type: Boolean\n    },\n    name: {\n      type: String,\n      default: \"Item\"\n    },\n    transition: {\n      type: String,\n      default: \"bottom\"\n    },\n    widthType: {\n      type: String\n    },\n    systembar: {\n      type: Boolean,\n      default: false\n    },\n    fullscreen: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      // dialog: this.value,\n      widths: {\n        sm: \"300px\",\n        md: \"500px\",\n        lg: \"750px\"\n      },\n      width: this.widthType,\n      modalClass: htmlClasses.modal,\n      firstFocusableEl: null,\n      lastFocusableEl: null,\n      full: this.fullscreen\n    };\n  },\n  computed: {\n    dialog: {\n      get() {\n        return this.value;\n      },\n      set(value) {\n        __log('modal->dialog->setter', value);\n        this.$emit('input', value);\n      }\n    },\n    // full: {\n    //     get () {\n    //         return this.fullscreen\n    //         return this.fullScreen\n    //     },\n    //     set (value) {\n    //         // this.$emit('screenListener', this.full)\n    //     }\n    // },\n    togglePersistent() {\n      return this.persistent;\n    },\n    toggleScrollable() {\n      return this.scrollable;\n    },\n    modalWidth() {\n      return !!this.width ? this.widths[this.width] : null;\n    }\n  },\n  watch: {},\n  methods: {\n    toggle() {\n      this.dialog = !this.dialog;\n    },\n    close() {\n      this.dialog = false;\n    },\n    open() {\n      this.dialog = true;\n    },\n    confirm() {\n      this.dialog = false;\n    },\n    attrs(attrs) {\n      __log(attrs);\n      return attrs;\n    },\n    toggleFullScreen() {\n      __log(this.full);\n      return this.full = !this.full;\n    },\n    screenListener(e) {\n      // __log(e.target);\n      this.full = e.target.fullScreen;\n    }\n  },\n  beforeDestroy: function () {},\n  created() {\n    // setInterval((self) => {\n    //     __log(self.dialog)\n    // }, 1000, this)\n  }\n};","map":{"version":3,"names":["htmlClasses","props","value","type","Boolean","name","String","default","transition","widthType","systembar","fullscreen","data","widths","sm","md","lg","width","modalClass","modal","firstFocusableEl","lastFocusableEl","full","computed","dialog","get","set","__log","$emit","togglePersistent","persistent","toggleScrollable","scrollable","modalWidth","watch","methods","toggle","close","open","confirm","attrs","toggleFullScreen","screenListener","e","target","fullScreen","beforeDestroy","created"],"sources":["/Users/oguzhanbukcuoglu/Desktop/Projects/crm_template/packages/oobook/crm-base/vue/src/js/components/modals/Modal.vue"],"sourcesContent":["<template>\n\n    <v-dialog\n        v-model=\"dialog\"\n        v-on=\"{\n            toggleFullScreen: toggleFullScreen\n        }\"\n\n        v-bind=\"bindProps()\"\n        :fullscreen=\"full\"\n        :width=\"modalWidth\"\n    >\n\n        <template v-slot:activator=\"{ on, attrs }\">\n            <slot \n                name=\"activator\"\n                :attrs=\"{\n                    ...attrs\n                }\"\n                :on=\"{\n                    ...on\n                }\"\n                >\n                <!-- <v-btn\n                    color=\"primary\"\n                    dark\n                    class=\"mb-2\"\n                    v-bind=\"{attrs}\"\n                    v-on=\"on\"\n                    >\n                    {{ $tc('show') }}\n                </v-btn> -->\n            </slot>\n        </template>\n\n        <v-card>\n            <slot\n                v-if=\"systembar\"\n                name=\"systembar\"\n    \n                >\n                <v-system-bar\n                        window\n                        dark\n                    >\n                        <v-spacer></v-spacer>\n                        \n                        <v-icon \n                            @click=\"toggleFullScreen()\" \n                            :x-small=\"full\"\n                            >\n                            mdi-checkbox-blank-outline\n                        </v-icon>\n                        <!-- <v-icon @click=\"cancelModal(on.closeDialog)\" >mdi-close</v-icon> -->\n                        <v-icon @click=\"close()\" >mdi-close</v-icon>\n                </v-system-bar>\n            </slot>\n            \n            <slot \n                name=\"body\"\n                :attrs=\"{\n                }\"\n                :on=\"{\n                    openDialog: this.open,\n                    closeDialog: this.close,\n                    confirmDialog: this.confirm\n                }\"\n                :closeDialog=\"close\"\n                >\n            \n            </slot>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\nimport htmlClasses from '@/utils/htmlClasses'\n\nexport default {\n    props: {\n        value: {\n            type: Boolean\n        },\n        name: {\n            type: String,\n            default: \"Item\"\n        },\n        transition: {\n            type: String,\n            default: \"bottom\"\n        },\n\n        widthType: {\n            type: String,\n        },\n        systembar: {\n            type: Boolean,\n            default: false\n        },\n        fullscreen: {\n            type: Boolean,\n            default: false\n        }\n\n    },\n    data() {\n        return {\n            // dialog: this.value,\n            widths: {\n                sm: \"300px\",\n                md: \"500px\",\n                lg: \"750px\",\n            },\n            width: this.widthType,\n\n            modalClass: htmlClasses.modal,\n            firstFocusableEl: null,\n            lastFocusableEl: null,\n            \n            full: this.fullscreen,\n        }\n    },\n\n    computed: {\n        dialog: {\n            get () {\n                return this.value\n            },\n            set (value) {\n                __log('modal->dialog->setter', value)\n                this.$emit('input', value)\n            }\n        },\n        // full: {\n        //     get () {\n        //         return this.fullscreen\n        //         return this.fullScreen\n        //     },\n        //     set (value) {\n        //         // this.$emit('screenListener', this.full)\n        //     }\n        // },\n        togglePersistent() {\n            return this.persistent;\n        },\n\n        toggleScrollable() {\n            return this.scrollable;\n        },\n        modalWidth() {\n            return !!this.width ? this.widths[this.width] : null;\n        },\n    },\n\n    watch: {\n\n    },\n\n    methods: {\n        toggle() {\n            this.dialog = !this.dialog\n        },\n        close() {\n            this.dialog = false\n        },\n        open() {\n            this.dialog = true\n        },\n        confirm() {\n            this.dialog = false\n        },\n\n        attrs(attrs) {\n            __log(attrs)\n            return attrs;\n        },\n\n        toggleFullScreen() {\n            __log(this.full)\n            return this.full = !this.full;\n        },\n\n        screenListener(e){\n            // __log(e.target);\n            this.full = e.target.fullScreen\n        },\n    },\n    beforeDestroy: function () {\n\n    },\n    created() {\n        // setInterval((self) => {\n        //     __log(self.dialog)\n        // }, 1000, this)\n    }\n}\n</script>\n\n<style>\n\n</style>"],"mappings":"AA4EA,OAAOA,WAAU,MAAO,qBAAoB;AAE5C,eAAe;EACXC,KAAK,EAAE;IACHC,KAAK,EAAE;MACHC,IAAI,EAAEC;IACV,CAAC;IACDC,IAAI,EAAE;MACFF,IAAI,EAAEG,MAAM;MACZC,OAAO,EAAE;IACb,CAAC;IACDC,UAAU,EAAE;MACRL,IAAI,EAAEG,MAAM;MACZC,OAAO,EAAE;IACb,CAAC;IAEDE,SAAS,EAAE;MACPN,IAAI,EAAEG;IACV,CAAC;IACDI,SAAS,EAAE;MACPP,IAAI,EAAEC,OAAO;MACbG,OAAO,EAAE;IACb,CAAC;IACDI,UAAU,EAAE;MACRR,IAAI,EAAEC,OAAO;MACbG,OAAO,EAAE;IACb;EAEJ,CAAC;EACDK,IAAIA,CAAA,EAAG;IACH,OAAO;MACH;MACAC,MAAM,EAAE;QACJC,EAAE,EAAE,OAAO;QACXC,EAAE,EAAE,OAAO;QACXC,EAAE,EAAE;MACR,CAAC;MACDC,KAAK,EAAE,IAAI,CAACR,SAAS;MAErBS,UAAU,EAAElB,WAAW,CAACmB,KAAK;MAC7BC,gBAAgB,EAAE,IAAI;MACtBC,eAAe,EAAE,IAAI;MAErBC,IAAI,EAAE,IAAI,CAACX;IACf;EACJ,CAAC;EAEDY,QAAQ,EAAE;IACNC,MAAM,EAAE;MACJC,GAAEA,CAAA,EAAK;QACH,OAAO,IAAI,CAACvB,KAAI;MACpB,CAAC;MACDwB,GAAEA,CAAGxB,KAAK,EAAE;QACRyB,KAAK,CAAC,uBAAuB,EAAEzB,KAAK;QACpC,IAAI,CAAC0B,KAAK,CAAC,OAAO,EAAE1B,KAAK;MAC7B;IACJ,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA2B,gBAAgBA,CAAA,EAAG;MACf,OAAO,IAAI,CAACC,UAAU;IAC1B,CAAC;IAEDC,gBAAgBA,CAAA,EAAG;MACf,OAAO,IAAI,CAACC,UAAU;IAC1B,CAAC;IACDC,UAAUA,CAAA,EAAG;MACT,OAAO,CAAC,CAAC,IAAI,CAAChB,KAAI,GAAI,IAAI,CAACJ,MAAM,CAAC,IAAI,CAACI,KAAK,IAAI,IAAI;IACxD;EACJ,CAAC;EAEDiB,KAAK,EAAE,CAEP,CAAC;EAEDC,OAAO,EAAE;IACLC,MAAMA,CAAA,EAAG;MACL,IAAI,CAACZ,MAAK,GAAI,CAAC,IAAI,CAACA,MAAK;IAC7B,CAAC;IACDa,KAAKA,CAAA,EAAG;MACJ,IAAI,CAACb,MAAK,GAAI,KAAI;IACtB,CAAC;IACDc,IAAIA,CAAA,EAAG;MACH,IAAI,CAACd,MAAK,GAAI,IAAG;IACrB,CAAC;IACDe,OAAOA,CAAA,EAAG;MACN,IAAI,CAACf,MAAK,GAAI,KAAI;IACtB,CAAC;IAEDgB,KAAKA,CAACA,KAAK,EAAE;MACTb,KAAK,CAACa,KAAK;MACX,OAAOA,KAAK;IAChB,CAAC;IAEDC,gBAAgBA,CAAA,EAAG;MACfd,KAAK,CAAC,IAAI,CAACL,IAAI;MACf,OAAO,IAAI,CAACA,IAAG,GAAI,CAAC,IAAI,CAACA,IAAI;IACjC,CAAC;IAEDoB,cAAcA,CAACC,CAAC,EAAC;MACb;MACA,IAAI,CAACrB,IAAG,GAAIqB,CAAC,CAACC,MAAM,CAACC,UAAS;IAClC;EACJ,CAAC;EACDC,aAAa,EAAE,SAAAA,CAAA,EAAY,CAE3B,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN;IACA;IACA;EAAA;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}