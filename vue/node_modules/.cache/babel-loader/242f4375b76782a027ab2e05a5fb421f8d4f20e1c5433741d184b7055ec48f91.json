{"ast":null,"code":"import { mapGetters, mapState } from 'vuex';\nimport { FORM } from '@/store/mutations/index';\nimport ACTIONS from '@/store/actions';\nexport default {\n  // name: \"ue-form\",\n  props: {\n    value: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n    inputs: {\n      type: Array\n    },\n    async: {\n      type: Boolean,\n      default: true\n    },\n    hasSubmit: {\n      type: Boolean,\n      default: false\n    },\n    buttonFloat: {\n      type: String,\n      default: 'right'\n    },\n    buttonPosition: {\n      type: String,\n      default: 'bottom'\n    },\n    stickyButton: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      id: Math.ceil(Math.random() * 1000000) + \"-form\",\n      valid: false\n    };\n  },\n  created() {\n    // Object.fromEntries(this.inputs[1].extras.map(v => ([v,true])))\n    // console.log(this.inputs[2])\n  },\n  computed: {\n    issetModel() {\n      return Object.keys(this.value).length > 0;\n    },\n    model: {\n      get() {\n        return this.issetModel ? this.value : this.$store.state.form.editedItem;\n      },\n      set(value) {\n        // __log('Form.vue->model set', value)\n        // this.$store.commit(FORM.SET_EDITED_ITEM, value);\n      }\n    },\n    formInputs: {\n      get() {\n        // __log(this.inputs ?? this.$store.state.form.inputs ?? [])\n        return this.inputs ?? this.$store.state.form.inputs ?? [];\n      },\n      set(value) {\n        __log('form->inputs set', value);\n        // this.$store.commit(FORM.SET_EDITED_ITEM, value);\n      }\n    },\n\n    ...mapState({\n      loading: state => state.form.loading,\n      errors: state => state.form.errors\n    }),\n    ...mapGetters(['defaultItem'])\n  },\n  methods: {\n    // update(key, value) {\n    //     __log('form->update', key, value);\n    //     // this.$emit('input', { ...this.value, [key]: value })\n    // },\n\n    saveForm(callback = null, errorCallback = null) {\n      __log(this.model);\n      return;\n      let fields = {};\n      Object.keys(this.defaultItem).forEach((key, i) => {\n        fields[key] = this.$store.state.form.editedItem[key] == null || this.defaultItem[key] != '' ? this.defaultItem[key] : this.$store.state.form.editedItem[key];\n      });\n      if (!!this.$store.state.form.editedItem.id) fields.id = this.$store.state.form.editedItem.id;\n      this.$store.commit(FORM.SET_EDITED_ITEM, fields);\n      this.$store.dispatch(ACTIONS.SAVE_FORM, {\n        item: null,\n        callback: callback,\n        errorCallback: errorCallback\n      });\n    },\n    submit() {\n      if (this.async) {\n        this.saveForm();\n      }\n\n      // this.$v.$touch()\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","mapState","FORM","ACTIONS","props","value","type","Object","default","inputs","Array","async","Boolean","hasSubmit","buttonFloat","String","buttonPosition","stickyButton","data","id","Math","ceil","random","valid","created","computed","issetModel","keys","length","model","get","$store","state","form","editedItem","set","formInputs","__log","loading","errors","methods","saveForm","callback","errorCallback","fields","defaultItem","forEach","key","i","commit","SET_EDITED_ITEM","dispatch","SAVE_FORM","item","submit"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/Form.vue"],"sourcesContent":["<template>\n\n    <v-form v-model=\"valid\" @submit.prevent=\"submit\" :id=\"id\" >\n\n        <v-container>\n\n            <v-row>\n                <v-col\n                    :cols=\"12\"\n                    :sm=\"12\"\n                    :md=\"12\"\n                    :lg=\"4\"\n                    :xl=\"6\"\n\n                    :order-lg=\"1\"\n                    :order-xl=\"1\"\n                    class=\"d-flex flex-column\"\n                    style=\"position:sticky;\"\n                    \n                    >\n                        <div class=\"d-flex flex-column align-items-center\" style=\"position:sticky;top:100px;\">\n                            <slot \n                                v-if=\"stickyButton && hasSubmit\"\n                                name=\"submitButton\"\n                                :attrs=\"{\n                                    \n                                }\"\n                                :on=\"{\n                                    \n                                }\"\n                                >\n                                <ue-btn\n                                    :form=\"id\"\n                                    type=\"submit\"\n                                    width=\"60%\"\n                                    class=\"mb-6\"\n                                    >\n                                    {{ $tc('submit') }}\n                                </ue-btn>\n                            </slot>\n    \n                            <!-- <v-card class=\"mt-6\" height=\"\">\n                                    <div>\n                                        <v-icon>mdi-camera</v-icon>\n                                        <h3>Upload</h3>\n                                    </div>\n                            </v-card> -->\n                        </div>\n                        <!-- <v-spacer></v-spacer> -->\n\n                </v-col>\n\n                <v-col\n                    :cols=\"12\"\n                    :sm=\"12\"\n                    :md=\"12\"\n                    :lg=\"8\"\n                    :xl=\"6\"\n\n                    :order-lg=\"0\"\n                    :order-xl=\"0\"\n                    >\n    \n                    <slot \n                        name=\"body\"\n                        :attrs=\"{\n                            // inputs: this.formInputs,\n                            // item: this.editedItem\n                        }\"\n                        >\n                        <v-row>\n                            <v-col\n                                v-for=\"(input, i) in formInputs\"\n                                :key =\"i\"\n                                :index=\"i\"\n                                :cols='input.cols'\n                                :sm='input.sm'\n                                :md='input.md'\n                                :lg='input.lg'\n                                :xl='input.xl'\n                            >\n                                <component \n                                    :is=\"`ue-input-${input.type}`\" \n                                    v-model=\"model[input.name]\"    \n                                    :attributes=\"input\"\n                                    />                    \n                \n                            </v-col>\n                        </v-row>\n                    </slot>\n                </v-col>\n                \n            </v-row>\n\n\n        </v-container>\n\n        <!-- <v-divider></v-divider> -->\n\n        <v-container v-if=\"!stickyButton && hasSubmit\">\n                <!-- <v-spacer></v-spacer> -->\n                <slot \n                    name=\"submitButton\"\n                    :attrs=\"{\n                        \n                    }\"\n                    :on=\"{\n                        \n                    }\"\n                    >\n                    <ue-btn\n                        :form=\"id\"\n                        type=\"submit\"\n                        right\n                        >\n                        {{ $tc('submit') }}\n                    </ue-btn>\n                </slot>\n        </v-container>\n\n        <v-container>\n            <v-text-field\n                v-if=\"loading\"\n                color=\"success\"\n                loading\n                disabled\n            />\n        </v-container>\n\n    </v-form>\n\n</template>\n\n<script>\nimport { mapGetters, mapState } from 'vuex'\nimport { FORM } from '@/store/mutations/index'\nimport ACTIONS from '@/store/actions'\n\nexport default {\n    // name: \"ue-form\",\n    props: {\n        value: {\n            type: Object,\n            default() {\n                return {}\n            }\n        },\n        inputs: {\n            type: Array\n        },\n        async: {\n            type: Boolean,\n            default: true\n        },\n        hasSubmit: {\n            type: Boolean,\n            default: false\n        },\n        buttonFloat: {\n            type: String,\n            default: 'right'\n        },\n        buttonPosition: {\n            type: String,\n            default: 'bottom'\n        },\n        stickyButton: {\n            type: Boolean,\n            default: false\n        },\n    },\n    data() {\n        return {\n            id: Math.ceil(Math.random()*1000000) + \"-form\",\n            valid: false,\n        }\n    },\n\n    created() {\n        // Object.fromEntries(this.inputs[1].extras.map(v => ([v,true])))\n        // console.log(this.inputs[2])\n    },\n\n    computed: {\n        issetModel() {\n            return Object.keys(this.value).length > 0;\n        },\n        model: {\n            get () {\n                return this.issetModel ? this.value : this.$store.state.form.editedItem;\n            },\n            set (value) {\n                // __log('Form.vue->model set', value)\n                // this.$store.commit(FORM.SET_EDITED_ITEM, value);\n\n            }\n        },\n        formInputs: {\n            get () {\n                // __log(this.inputs ?? this.$store.state.form.inputs ?? [])\n                return this.inputs ?? this.$store.state.form.inputs ?? [];\n            },\n            set (value) {\n                __log('form->inputs set', value)\n                // this.$store.commit(FORM.SET_EDITED_ITEM, value);\n\n            }\n        },\n        ...mapState({\n            loading: state => state.form.loading,\n            errors: state => state.form.errors,\n        }),\n\n        ...mapGetters([\n            'defaultItem'\n        ])\n    },\n    \n    methods: {\n        // update(key, value) {\n        //     __log('form->update', key, value);\n        //     // this.$emit('input', { ...this.value, [key]: value })\n        // },\n\n        saveForm(callback=null, errorCallback=null){\n            __log(\n                this.model,\n            );\n            return;\n            let fields = {};\n\n            Object.keys(this.defaultItem).forEach( (key,i) => {\n                fields[key] = (this.$store.state.form.editedItem[key]==null || this.defaultItem[key] != '') \n                    ? this.defaultItem[key]\n                    : this.$store.state.form.editedItem[key]\n            });\n\n            if(!!this.$store.state.form.editedItem.id)\n                fields.id = this.$store.state.form.editedItem.id;\n\n            this.$store.commit(FORM.SET_EDITED_ITEM, fields);\n\n            this.$store.dispatch(ACTIONS.SAVE_FORM, {item:null, callback:callback, errorCallback:errorCallback})\n        },\n\n        submit () {\n            if(this.async){\n                this.saveForm();\n            }\n\n            // this.$v.$touch()\n        },\n    }\n\n\n}\n</script>\n\n<style>\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}