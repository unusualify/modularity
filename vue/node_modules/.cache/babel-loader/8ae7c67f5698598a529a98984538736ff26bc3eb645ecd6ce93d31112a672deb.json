{"ast":null,"code":"import _slicedToArray from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\";\n// Styles\nimport \"./VCheckbox.css\";\n\n// Components\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { filterCheckboxBtnProps, makeVCheckboxBtnProps, VCheckboxBtn } from \"./VCheckboxBtn.mjs\"; // Composables\nimport { useFocus } from \"../../composables/focus.mjs\"; // Utilities\nimport { computed } from 'vue';\nimport { filterInputAttrs, genericComponent, getUid, useRender } from \"../../util/index.mjs\"; // Types\nexport var VCheckbox = genericComponent()({\n  name: 'VCheckbox',\n  inheritAttrs: false,\n  props: _objectSpread(_objectSpread({}, makeVInputProps()), makeVCheckboxBtnProps()),\n  emits: {\n    'update:focused': function updateFocused(focused) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n      slots = _ref.slots;\n    var _useFocus = useFocus(props),\n      isFocused = _useFocus.isFocused,\n      focus = _useFocus.focus,\n      blur = _useFocus.blur;\n    var uid = getUid();\n    var id = computed(function () {\n      return props.id || \"checkbox-\".concat(uid);\n    });\n    useRender(function () {\n      var _filterInputAttrs = filterInputAttrs(attrs),\n        _filterInputAttrs2 = _slicedToArray(_filterInputAttrs, 2),\n        inputAttrs = _filterInputAttrs2[0],\n        controlAttrs = _filterInputAttrs2[1];\n      var _filterInputProps = filterInputProps(props),\n        _filterInputProps2 = _slicedToArray(_filterInputProps, 2),\n        inputProps = _filterInputProps2[0],\n        _1 = _filterInputProps2[1];\n      var _filterCheckboxBtnPro = filterCheckboxBtnProps(props),\n        _filterCheckboxBtnPro2 = _slicedToArray(_filterCheckboxBtnPro, 2),\n        checkboxProps = _filterCheckboxBtnPro2[0],\n        _2 = _filterCheckboxBtnPro2[1];\n      return _createVNode(VInput, _mergeProps({\n        \"class\": \"v-checkbox\"\n      }, inputAttrs, inputProps, {\n        \"id\": id.value,\n        \"focused\": isFocused.value\n      }), _objectSpread(_objectSpread({}, slots), {}, {\n        \"default\": function _default(_ref2) {\n          var id = _ref2.id,\n            messagesId = _ref2.messagesId,\n            isDisabled = _ref2.isDisabled,\n            isReadonly = _ref2.isReadonly;\n          return _createVNode(VCheckboxBtn, _mergeProps(checkboxProps, {\n            \"id\": id.value,\n            \"aria-describedby\": messagesId.value,\n            \"disabled\": isDisabled.value,\n            \"readonly\": isReadonly.value\n          }, controlAttrs, {\n            \"onFocus\": focus,\n            \"onBlur\": blur\n          }), slots);\n        }\n      }));\n    });\n    return {};\n  }\n});","map":{"version":3,"names":["filterInputProps","makeVInputProps","VInput","filterCheckboxBtnProps","makeVCheckboxBtnProps","VCheckboxBtn","useFocus","computed","filterInputAttrs","genericComponent","getUid","useRender","VCheckbox","name","inheritAttrs","props","_objectSpread","emits","updateFocused","focused","setup","_ref","attrs","slots","_useFocus","isFocused","focus","blur","uid","id","concat","_filterInputAttrs","_filterInputAttrs2","_slicedToArray","inputAttrs","controlAttrs","_filterInputProps","_filterInputProps2","inputProps","_1","_filterCheckboxBtnPro","_filterCheckboxBtnPro2","checkboxProps","_2","_createVNode","_mergeProps","value","_default","_ref2","messagesId","isDisabled","isReadonly"],"sources":["../../../src/components/VCheckbox/VCheckbox.tsx"],"sourcesContent":["// Styles\nimport './VCheckbox.sass'\n\n// Components\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { filterCheckboxBtnProps, makeVCheckboxBtnProps, VCheckboxBtn } from './VCheckboxBtn'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\n\n// Utilities\nimport { computed } from 'vue'\nimport { filterInputAttrs, genericComponent, getUid, useRender } from '@/util'\n\n// Types\nimport type { VSelectionControlSlots } from '../VSelectionControl/VSelectionControl'\n\nexport type VCheckboxSlots = VInputSlots & VSelectionControlSlots\n\nexport const VCheckbox = genericComponent<VCheckboxSlots>()({\n  name: 'VCheckbox',\n\n  inheritAttrs: false,\n\n  props: {\n    ...makeVInputProps(),\n    ...makeVCheckboxBtnProps(),\n  },\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const { isFocused, focus, blur } = useFocus(props)\n\n    const uid = getUid()\n    const id = computed(() => props.id || `checkbox-${uid}`)\n\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = filterInputProps(props)\n      const [checkboxProps, _2] = filterCheckboxBtnProps(props)\n\n      return (\n        <VInput\n          class=\"v-checkbox\"\n          { ...inputAttrs }\n          { ...inputProps }\n          id={ id.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n            }) => (\n              <VCheckboxBtn\n                { ...checkboxProps }\n                id={ id.value }\n                aria-describedby={ messagesId.value }\n                disabled={ isDisabled.value }\n                readonly={ isReadonly.value }\n                { ...controlAttrs }\n                onFocus={ focus }\n                onBlur={ blur }\n                v-slots={ slots }\n              />\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCheckbox = InstanceType<typeof VCheckbox>\n"],"mappings":";;;AAAA;AACA;;AAEA;AAAA,SAESA,gBAAgB,EAAEC,eAAe,EAAEC,MAAM;AAAA,SACzCC,sBAAsB,EAAEC,qBAAqB,EAAEC,YAAY,8BAEpE;AAAA,SACSC,QAAQ,uCAEjB;AACA,SAASC,QAAQ,QAAQ,KAAK;AAAA,SACrBC,gBAAgB,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,SAAS,gCAE9D;AAKA,OAAO,IAAMC,SAAS,GAAGH,gBAAgB,EAAkB,CAAC;EAC1DI,IAAI,EAAE,WAAW;EAEjBC,YAAY,EAAE,KAAK;EAEnBC,KAAK,EAAAC,aAAA,CAAAA,aAAA,KACAf,eAAe,EAAE,GACjBG,qBAAqB,GACzB;EAEDa,KAAK,EAAE;IACL,gBAAgB,EAAG,SAAAC,cAAAC,OAAgB;MAAA,OAAK;IAAA;EAC1C,CAAC;EAEDC,KAAK,WAAAA,MAAEL,KAAK,EAAAM,IAAA,EAAoB;IAAA,IAAhBC,KAAK,GAASD,IAAA,CAAdC,KAAK;MAAEC,KAAA,GAAOF,IAAA,CAAPE,KAAA;IACrB,IAAAC,SAAA,GAAmClB,QAAQ,CAACS,KAAK,CAAC;MAA1CU,SAAS,GAAAD,SAAA,CAATC,SAAS;MAAEC,KAAK,GAAAF,SAAA,CAALE,KAAK;MAAEC,IAAA,GAAAH,SAAA,CAAAG,IAAA;IAE1B,IAAMC,GAAG,GAAGlB,MAAM,EAAE;IACpB,IAAMmB,EAAE,GAAGtB,QAAQ,CAAC;MAAA,OAAMQ,KAAK,CAACc,EAAE,gBAAAC,MAAA,CAAgBF,GAAI,CAAC;IAAA,EAAC;IAExDjB,SAAS,CAAC,YAAM;MACd,IAAAoB,iBAAA,GAAmCvB,gBAAgB,CAACc,KAAK,CAAC;QAAAU,kBAAA,GAAAC,cAAA,CAAAF,iBAAA;QAAnDG,UAAU,GAAAF,kBAAA;QAAEG,YAAY,GAAAH,kBAAA;MAC/B,IAAAI,iBAAA,GAAyBpC,gBAAgB,CAACe,KAAK,CAAC;QAAAsB,kBAAA,GAAAJ,cAAA,CAAAG,iBAAA;QAAzCE,UAAU,GAAAD,kBAAA;QAAEE,EAAE,GAAAF,kBAAA;MACrB,IAAAG,qBAAA,GAA4BrC,sBAAsB,CAACY,KAAK,CAAC;QAAA0B,sBAAA,GAAAR,cAAA,CAAAO,qBAAA;QAAlDE,aAAa,GAAAD,sBAAA;QAAEE,EAAE,GAAAF,sBAAA;MAExB,OAAAG,YAAA,CAAA1C,MAAA,EAAA2C,WAAA;QAAA,SAEU;MAAY,GACbX,UAAU,EACVI,UAAU;QAAA,MACVT,EAAE,CAACiB,KAAK;QAAA,WACHrB,SAAS,CAACqB;MAAK,IAAA9B,aAAA,CAAAA,aAAA,KAGpBO,KAAK;QACR,WAAS,SAAAwB,SAAAC,KAAA;UAAA,IACPnB,EAAE,GAIHmB,KAAA,CAJCnB,EAAE;YACFoB,UAAU,GAGXD,KAAA,CAHCC,UAAU;YACVC,UAAU,GAEXF,KAAA,CAFCE,UAAU;YACVC,UAAA,GACDH,KAAA,CADCG,UAAA;UACD,OAAAP,YAAA,CAAAvC,YAAA,EAAAwC,WAAA,CAEQH,aAAa;YAAA,MACbb,EAAE,CAACiB,KAAK;YAAA,oBACMG,UAAU,CAACH,KAAK;YAAA,YACxBI,UAAU,CAACJ,KAAK;YAAA,YAChBK,UAAU,CAACL;UAAK,GACtBX,YAAY;YAAA,WACPT,KAAK;YAAA,UACNC;UAAI,IACHJ,KAAK;QAAA;MAAA,GAElB;IAIT,CAAC,CAAC;IAEF,OAAO,CAAC,CAAC;EACX;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}