{"ast":null,"code":"import _defineProperty from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nvar _mutations, _actions;\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport api from '@/store/api/form';\nimport { FORM, ALERT } from '@/store/mutations';\nimport ACTIONS from '@/store/actions';\nimport { getFormData, getFormFields, getModalFormFields, getSchemaModel } from '@/utils/getFormData.js';\nvar getFieldIndex = function getFieldIndex(stateKey, field) {\n  return stateKey.findIndex(function (f) {\n    return f.name === field.name;\n  });\n};\nvar state = {\n  baseUrl: window[process.env.VUE_APP_NAME].STORE.form.baseUrl || '',\n  inputs: window[process.env.VUE_APP_NAME].STORE.form.inputs,\n  saveUrl: window[process.env.VUE_APP_NAME].STORE.form.saveUrl || '',\n  /**\n   * Form errors after submitting\n   * @type {Object}\n   */\n  errors: {},\n  // fields: window[process.env.VUE_APP_NAME].STORE.form.inputs.forEach(function(el ){\n  //     return {\n  //       name: el.name,\n  //       value: null\n  //     };\n  // }),\n\n  // editedItem: window[process.env.VUE_APP_NAME].STORE.form.inputs.reduce( (a,c) => (a[c.name] = c.default ?? '', a), {}),\n  // editedItem: Object.keys(window[process.env.VUE_APP_NAME].STORE.form.inputs).reduce( (a,c) => (a[window[process.env.VUE_APP_NAME].STORE.form.inputs[c].name] = window[process.env.VUE_APP_NAME].STORE.form.inputs[c].hasOwnProperty('default') ? window[process.env.VUE_APP_NAME].STORE.form.inputs[c].default : '', a), {}),\n  editedItem: getSchemaModel(window[process.env.VUE_APP_NAME].STORE.form.inputs),\n  /**\n   * Force reload on successful submit\n   * @type {Boolean}\n   */\n  reloadOnSuccess: window[process.env.VUE_APP_NAME].STORE.form.reloadOnSuccess || false,\n  /**\n   * Determines if the form should prevent submitting before an input value is pushed into the store\n   * @type {Boolean}\n   */\n  isSubmitPrevented: false,\n  loading: false\n};\n\n// getters\nvar getters = {\n  defaultItem: function defaultItem(state) {\n    // __log(state.editedItem)\n    return state.editedItem;\n    // return state.inputs.reduce( (a,c) => (a[c.name] = c.hasOwnProperty('default') ? c.default : '', a), {})\n  }\n};\n\nvar mutations = (_mutations = {}, _defineProperty(_mutations, FORM.SET_EDITED_ITEM, function (state, item) {\n  state.editedItem = Object.assign({}, item);\n}), _defineProperty(_mutations, FORM.PREVENT_SUBMIT, function (state) {\n  state.isSubmitPrevented = true;\n}), _defineProperty(_mutations, FORM.ALLOW_SUBMIT, function (state) {\n  state.isSubmitPrevented = false;\n}), _defineProperty(_mutations, FORM.EMPTY_FORM_FIELDS, function (state, status) {\n  state.fields = [];\n}), _defineProperty(_mutations, FORM.ADD_FORM_FIELDS, function (state, fields) {\n  state.fields = [].concat(_toConsumableArray(state.fields), _toConsumableArray(fields));\n}), _defineProperty(_mutations, FORM.REPLACE_FORM_FIELDS, function (state, fields) {\n  state.fields = fields;\n}), _defineProperty(_mutations, FORM.UPDATE_FORM_FIELD, function (state, field) {\n  var fieldValue = field.locale ? {} : null;\n  var fieldIndex = getFieldIndex(state.fields, field);\n  // Update existing form field\n  if (fieldIndex !== -1) {\n    if (field.locale) fieldValue = state.fields[fieldIndex].value || {};\n    // remove existing field\n    state.fields.splice(fieldIndex, 1);\n  }\n  if (field.locale) fieldValue[field.locale] = field.value;else fieldValue = field.value;\n  state.fields.push({\n    name: field.name,\n    value: fieldValue\n  });\n}), _defineProperty(_mutations, FORM.REMOVE_FORM_FIELD, function (state, fieldName) {\n  state.fields.forEach(function (field, index) {\n    if (field.name === fieldName) state.fields.splice(index, 1);\n  });\n}), _defineProperty(_mutations, FORM.EMPTY_MODAL_FIELDS, function (state, status) {\n  state.modalFields = [];\n}), _defineProperty(_mutations, FORM.REPLACE_MODAL_FIELDS, function (state, fields) {\n  state.modalFields = fields;\n}), _defineProperty(_mutations, FORM.UPDATE_MODAL_FIELD, function (state, field) {\n  var fieldValue = field.locale ? {} : null;\n  var fieldIndex = getFieldIndex(state.modalFields, field);\n\n  // Update existing form field\n  if (fieldIndex !== -1) {\n    if (field.locale) fieldValue = state.modalFields[fieldIndex].value;\n    // remove existing field\n    state.modalFields.splice(fieldIndex, 1);\n  }\n  if (field.locale) fieldValue[field.locale] = field.value;else fieldValue = field.value;\n  state.modalFields.push({\n    name: field.name,\n    value: fieldValue\n  });\n}), _defineProperty(_mutations, FORM.REMOVE_MODAL_FIELD, function (state, fieldName) {\n  state.modalFields.forEach(function (field, index) {\n    if (field.name === fieldName) state.modalFields.splice(index, 1);\n  });\n}), _defineProperty(_mutations, FORM.UPDATE_FORM_LOADING, function (state, loading) {\n  state.loading = loading || !state.loading;\n}), _defineProperty(_mutations, FORM.SET_FORM_ERRORS, function (state, errors) {\n  state.errors = errors;\n}), _defineProperty(_mutations, FORM.CLEAR_FORM_ERRORS, function (state) {\n  state.errors = [];\n}), _defineProperty(_mutations, FORM.UPDATE_FORM_SAVE_TYPE, function (state, type) {\n  state.type = type;\n}), _mutations);\nvar actions = (_actions = {}, _defineProperty(_actions, ACTIONS.SAVE_FORM, function (_ref, _ref2) {\n  var commit = _ref.commit,\n    state = _ref.state,\n    getters = _ref.getters,\n    rootState = _ref.rootState,\n    dispatch = _ref.dispatch;\n  var _ref2$item = _ref2.item,\n    item = _ref2$item === void 0 ? null : _ref2$item,\n    _ref2$callback = _ref2.callback,\n    callback = _ref2$callback === void 0 ? null : _ref2$callback,\n    _ref2$errorCallback = _ref2.errorCallback,\n    errorCallback = _ref2$errorCallback === void 0 ? null : _ref2$errorCallback;\n  commit(FORM.CLEAR_FORM_ERRORS);\n  commit(FORM.UPDATE_FORM_LOADING, true);\n\n  // commit(NOTIFICATION.CLEAR_NOTIF, 'error')\n\n  // update or create etc...\n  // commit(FORM.UPDATE_FORM_SAVE_TYPE, saveType)\n\n  // we can now create our submitted data object out of:\n  // - our just created fields object,\n  // - publication properties\n  // - selected medias and browsers\n  // - created blocks and repeaters\n\n  // const data = getFormData(rootState)\n  var data = item !== null && item !== void 0 ? item : state.editedItem;\n\n  // const method = rootState.publication.createWithoutModal ? 'post' : 'put'\n  var method = 'post';\n  var url = window[process.env.VUE_APP_NAME].ENDPOINTS.store;\n  if (data.hasOwnProperty('id')) {\n    method = 'put';\n    url = window[process.env.VUE_APP_NAME].ENDPOINTS.update.replace(':id', data.id);\n  }\n  api[method](url, data, function (response) {\n    commit(FORM.UPDATE_FORM_LOADING, false);\n    // __log(\n    //   response\n    // )\n    // if (successResponse.data.hasOwnProperty('redirect')) {\n    //   window.location.replace(successResponse.data.redirect)\n    // }\n\n    // if (state.reloadOnSuccess) {\n    //   window.location.reload()\n    // }\n\n    // commit(PUBLICATION.UPDATE_PUBLISH_SUBMIT)\n    // if (successResponse.data.hasOwnProperty('revisions')) {\n    //   commit(REVISION.UPDATE_REV_ALL, successResponse.data.revisions)\n    // }\n    // __log(reload)\n    if (response.data.hasOwnProperty('errors')) {\n      commit(FORM.SET_FORM_ERRORS, response.data.errors);\n    } else if (response.data.hasOwnProperty('variant') && response.data.variant == 'success') {\n      commit(ALERT.SET_ALERT, {\n        message: response.data.message,\n        variant: response.data.variant\n      });\n      if (!data.hasOwnProperty('reload') || data.reload) {\n        dispatch(ACTIONS.GET_DATATABLE);\n      }\n    }\n    if (callback && typeof callback === 'function') callback(response.data);\n  }, function (errorResponse) {\n    commit(FORM.UPDATE_FORM_LOADING, false);\n    if (errorResponse.response.data.hasOwnProperty('exception')) {\n      commit(ALERT.SET_ALERT, {\n        message: 'Your submission could not be processed.',\n        variant: 'error'\n      });\n    } else {\n      dispatch(ACTIONS.HANDLE_ERRORS, errorResponse.response.data);\n      commit(ALERT.SET_ALERT, {\n        message: 'Your submission could not be validated, please fix and retry',\n        variant: 'error'\n      });\n    }\n    if (errorCallback && typeof errorCallback === 'function') errorCallback(errorResponse.data);\n  });\n}), _defineProperty(_actions, ACTIONS.HANDLE_ERRORS, function (_ref3, errors) {\n  var commit = _ref3.commit,\n    state = _ref3.state,\n    getters = _ref3.getters,\n    rootState = _ref3.rootState;\n  var repeaters = rootState.repeaters;\n  // Translate the errors to their respective fields.\n  Object.keys(errors).forEach(function (errorKey) {\n    var splitted = errorKey.split('.');\n    if (splitted.length >= 4) {\n      var type = splitted[0];\n      var subType = splitted[1];\n      var index = splitted[2];\n      var field = splitted[3];\n      if (type === 'repeaters') {\n        var id = repeaters[subType][index].id;\n        var newErrorKey = \"blocks[\".concat(id, \"][\").concat(field, \"]\");\n        errors[newErrorKey] = errors[errorKey];\n      }\n    }\n  });\n  commit(FORM.SET_FORM_ERRORS, errors);\n}), _actions);\nexport default {\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}