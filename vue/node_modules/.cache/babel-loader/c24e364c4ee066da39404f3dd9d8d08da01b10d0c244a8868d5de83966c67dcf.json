{"ast":null,"code":"import _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport { mapState, mapGetters } from 'vuex';\nimport { DATATABLE, FORM } from '@/store/mutations/index';\nimport ACTIONS from '@/store/actions';\nexport default {\n  props: {\n    name: {\n      type: String,\n      \"default\": 'Item'\n    },\n    titleKey: {\n      type: String,\n      \"default\": 'name'\n    },\n    hideDefaultHeader: Boolean,\n    hideDefaultFooter: Boolean,\n    isRowEditing: Boolean,\n    createOnModal: Boolean,\n    editOnModal: Boolean\n    // tableOptions: {\n    //   type: Object,\n    //   default() {\n    //     return {\n    //       page: 1,\n    //       itemsPerPage: 5,\n    //       sortBy: [],\n    //       sortDesc: [],\n    //       groupBy: [],\n    //       groupDesc: [],\n    //       multiSort: false,\n    //       mustSort: false\n    //     }\n    //   }\n    // },\n  },\n\n  data: function data() {\n    return {\n      editedIndex: -1,\n      createUrl: window[process.env.VUE_APP_NAME].ENDPOINTS.create,\n      editUrl: window[process.env.VUE_APP_NAME].ENDPOINTS.edit\n    };\n  },\n  watch: {\n    editedItem: function editedItem(val) {\n      this.editedIndex = this.elements.findIndex(function (o) {\n        return o.id === val.id;\n      });\n      // __log('editedIndex', this.editedIndex)\n    }\n  },\n\n  computed: _objectSpread(_objectSpread({\n    formTitle: function formTitle() {\n      return this.$t(this.editedIndex === -1 ? 'new-item' : 'edit-item', {\n        item: this.name\n      });\n      return this.editedIndex === -1 ? \"New \".concat(this.name) : \"Edit \".concat(this.name);\n    },\n    options: {\n      get: function get() {\n        return this.$store.state.datatable.options;\n      },\n      set: function set(value) {\n        // __log('options set', value)\n        this.$store.dispatch(ACTIONS.GET_DATATABLE, {\n          payload: {\n            options: value\n          }\n        });\n        // this.$store.commit(DATATABLE.UPDATE_DATATABLE_OPTIONS, value)\n      }\n    },\n\n    search: {\n      get: function get() {\n        return this.$store.state.datatable.search;\n      },\n      set: function set(val) {\n        this.$store.commit(DATATABLE.UPDATE_DATATABLE_SEARCH, val);\n        this.$store.dispatch(ACTIONS.GET_DATATABLE);\n      }\n    }\n  }, mapState({\n    // datatable module\n    headers: function headers(state) {\n      return state.datatable.headers;\n    },\n    loading: function loading(state) {\n      return state.datatable.loading;\n    },\n    elements: function elements(state) {\n      return state.datatable.data;\n    },\n    // form module\n    inputs: function inputs(state) {\n      return state.form.inputs;\n    },\n    editedItem: function editedItem(state) {\n      return state.form.editedItem;\n    },\n    formLoading: function formLoading(state) {\n      return state.form.loading;\n    },\n    formErrors: function formErrors(state) {\n      return state.form.errors;\n    }\n  })), mapGetters([\n  // datatable module\n  'totalElements', 'formatterColumns', 'editableColumns', 'rowEditables', 'rowActionsType', 'rowActions', 'mainFilters',\n  // form module\n  'defaultItem'])),\n  methods: {\n    handleFunctionCall: function handleFunctionCall(functionName) {\n      for (var _len = arguments.length, val = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        val[_key - 1] = arguments[_key];\n      }\n      // __log(functionName)\n      return this[functionName].apply(this, val);\n    },\n    initialize: function initialize() {\n      this.$store.commit(DATATABLE.UPDATE_DATATABLE_SEARCH, '');\n      this.$store.commit(DATATABLE.UPDATE_DATATABLE_OPTIONS, window[process.env.VUE_APP_NAME].STORE.datatable.options);\n      this.$store.dispatch(ACTIONS.GET_DATATABLE);\n    },\n    editItem: function editItem(item) {\n      if (this.editOnModal) {\n        this.setEditedItem(item);\n        this.$refs.formModal.openModal();\n      } else {\n        var route = this.editUrl.replace(':id', item.id);\n        window.open(route);\n      }\n    },\n    deleteItem: function deleteItem(item) {\n      this.setEditedItem(item);\n      this.$refs.dialog.openModal();\n    },\n    formatDate: function formatDate(value) {\n      // __log(value)\n      return this.$d(new Date(value), 'long');\n      return new Date(value).toLocaleString();\n    },\n    setEditedItem: function setEditedItem(item) {\n      // this.editedIndex = this.elements.indexOf(item)\n      // this.editedItem = Object.assign({}, item)\n      this.$store.commit(FORM.SET_EDITED_ITEM, item);\n    },\n    resetEditedItem: function resetEditedItem() {\n      var _this = this;\n      this.$nextTick(function () {\n        // this.editedItem = Object.assign({}, this.defaultItem)\n        _this.$store.commit(FORM.SET_EDITED_ITEM, _this.defaultItem);\n        // this.editedIndex = -1\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}