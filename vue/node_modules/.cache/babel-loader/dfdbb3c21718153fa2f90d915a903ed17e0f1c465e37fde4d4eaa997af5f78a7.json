{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  slot: \"\\\\\\\"slot-bottom-type-[propertyName]\\\\\\\"\"\n};\nvar _hoisted_2 = {\n  slot: \"\\\\\\\"slot-item-key-[propertyName]\\\\\\\"\"\n};\nvar _hoisted_3 = {\n  \"class\": \"\\\\\\\"caption\\\\\\\"\"\n};\nvar _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nvar _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nvar _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nvar _hoisted_7 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nvar _hoisted_8 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nvar _hoisted_9 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nvar _hoisted_10 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nvar _hoisted_11 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nvar _hoisted_12 = /*#__PURE__*/_createElementVNode(\"div\", {\n  slot: \"\\\\\\\"slot-bottom-key-[deep-nested-key-name]\\\\\\\"\"\n}, \" \\\"), _renderSlot(_ctx.$slots, $options.getTypeBottomSlot(obj), _normalizeProps(_guardReactiveProps({ obj, index, id: $props.id }))), _renderSlot(_ctx.$slots, $options.getKeyBottomSlot(obj), _normalizeProps(_guardReactiveProps({ obj, index, id: $props.id }))) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"class\\\", \\\"draggable\\\", \\\"onMouseenter\\\", \\\"onMouseleave\\\", \\\"onDragstart\\\", \\\"onDragover\\\", \\\"onDrop\\\"])), [ [_vShow, !obj.schema.hidden], [_directive_intersect, (entries, observer) => $options.onIntersect(entries, observer, obj)], [_directive_touch, { left: () => $options.onSwipe('left', obj), right: () => $options.onSwipe('right', obj), up: () => $options.onSwipe('up', obj), down: () => $options.onSwipe('down', obj) }], [_directive_click_outside, (event) => $options.onClickOutside(event, obj)] ]), _createCommentVNode(\\\" schema.spacer:true - push next item to the right and fill space between items \\\"), (obj.schema.spacer) ? (_openBlock(), _createBlock(_component_v_spacer, { key: `s-${index}` })) : _createCommentVNode(\\\"v-if\\\", true) ]), default: _withCtx(() => [ _renderSlot(_ctx.$slots, $options.getTooltipSlot(obj), _normalizeProps(_guardReactiveProps({ obj, index, id: $props.id })), () => [ _createElementVNode(\\\"span\\\", null, _toDisplayString($options.getShorthandTooltipLabel(obj.schema.tooltip)), 1 /* TEXT */) ]), _renderSlot(_ctx.$slots, $options.getKeyTooltipSlot(obj), _normalizeProps(_guardReactiveProps({ obj, index, id: $props.id }))) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"disabled\\\"]) ], 64 /* STABLE_FRAGMENT */)) }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\\\" FORM-BASE BOTTOM SLOT \\\"), _renderSlot(_ctx.$slots, $options.getFormBottomSlot(), { id: $props.id }) ]), _: 3 /* FORWARDED */ }, 16 /* FULL_PROPS */, [\\\"id\\\"])), [ [ _directive_resize, $options.onResize, void 0, { quiet: true } ] ]) }\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_v_btn = _resolveComponent(\"v-btn\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(\"import { createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, resolveComponent as _resolveComponent, mergeProps as _mergeProps, withCtx as _withCtx, createSlots as _createSlots, createBlock as _createBlock, toHandlers as _toHandlers, toHandlerKey as _toHandlerKey, createVNode as _createVNode, resolveDynamicComponent as _resolveDynamicComponent, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveDirective as _resolveDirective, withDirectives as _withDirectives, vShow as _vShow, createElementVNode as _createElementVNode } from \\\"vue\\\" const _hoisted_1 = [\\\"value\\\"] export function render(_ctx, _cache, $props, $setup, $data, $options) { const _component_v_radio = _resolveComponent(\\\"v-radio\\\") const _component_v_radio_group = _resolveComponent(\\\"v-radio-group\\\") const _component_v_text_field = _resolveComponent(\\\"v-text-field\\\") const _component_v_menu = _resolveComponent(\\\"v-menu\\\") const _component_v_custom_form_base = _resolveComponent(\\\"v-custom-form-base\\\") const _component_v_card_title = _resolveComponent(\\\"v-card-title\\\") const _component_v_card_subtitle = _resolveComponent(\\\"v-card-subtitle\\\") const _component_v_form_base = _resolveComponent(\\\"v-form-base\\\") const _component_v_treeview = _resolveComponent(\\\"v-treeview\\\") const _component_v_toolbar_title = _resolveComponent(\\\"v-toolbar-title\\\") const _component_v_toolbar = _resolveComponent(\\\"v-toolbar\\\") const _component_v_icon = _resolveComponent(\\\"v-icon\\\") const _component_v_list_item_icon = _resolveComponent(\\\"v-list-item-icon\\\") const _component_v_list_item_title = _resolveComponent(\\\"v-list-item-title\\\") const _component_v_list_item_content = _resolveComponent(\\\"v-list-item-content\\\") const _component_v_list_item = _resolveComponent(\\\"v-list-item\\\") const _component_v_list_item_group = _resolveComponent(\\\"v-list-item-group\\\") const _component_v_list = _resolveComponent(\\\"v-list\\\") const _component_v_file_input = _resolveComponent(\\\"v-file-input\\\") const _component_v_slider = _resolveComponent(\\\"v-slider\\\") const _component_v_img = _resolveComponent(\\\"v-img\\\") const _component_v_btn = _resolveComponent(\\\"v-btn\\\") const _component_v_btn_toggle = _resolveComponent(\\\"v-btn-toggle\\\") const _component_v_col = _resolveComponent(\\\"v-col\\\") const _component_v_spacer = _resolveComponent(\\\"v-spacer\\\") const _component_v_tooltip = _resolveComponent(\\\"v-tooltip\\\") const _component_v_row = _resolveComponent(\\\"v-row\\\") const _directive_mask = _resolveDirective(\\\"mask\\\") const _directive_intersect = _resolveDirective(\\\"intersect\\\") const _directive_touch = _resolveDirective(\\\"touch\\\") const _directive_click_outside = _resolveDirective(\\\"click-outside\\\") const _directive_resize = _resolveDirective(\\\"resize\\\") return _withDirectives((_openBlock(), _createBlock(_component_v_row, _mergeProps({ id: $props.id }, $options.getRow), { default: _withCtx(() => [ _createCommentVNode(\\\" FORM-BASE TOP SLOT \\\"), _renderSlot(_ctx.$slots, $options.getFormTopSlot(), { id: $props.id }), _createCommentVNode(\\\" main loop over components/controls \\\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.flatCombinedArraySorted, (obj, index) => { return (_openBlock(), _createElementBlock(_Fragment, { key: index }, [ _createCommentVNode(\\\" Tooltip Wrapper \\\"), _createVNode(_component_v_tooltip, _mergeProps({ disabled: !obj.schema.tooltip }, $options.getShorthandTooltip(obj.schema.tooltip)), { activator: _withCtx(({ on }) => [ _withDirectives((_openBlock(), _createBlock(_component_v_col, _mergeProps({ key: index }, $options.getGridAttributes(obj), { class: $options.getClassName(obj), draggable: obj.schema.drag, onMouseenter: $event => ($options.onEvent($event, obj)), onMouseleave: $event => ($options.onEvent($event, obj)) }, _toHandlers(on), { onDragstart: $event => ($options.dragstart($event, obj)), onDragover: $event => ($options.dragover($event, obj)), onDrop: $event => ($options.drop($event, obj)) }), { default: _withCtx(() => [ _createCommentVNode(\\\" slot on top of type -> \"), _createElementVNode(\"div\", _hoisted_1, [_createTextVNode(\" \\\"), _renderSlot(_ctx.$slots, $options.getTypeTopSlot(obj), _normalizeProps(_guardReactiveProps({ obj, index, id: $props.id }))), _createCommentVNode(\\\" slot on top of key -> \"), _createVNode(_component_v_btn, {\n    slot: \"\\\\\\\"slot-bottom-key-[propertyName]\\\\\\\"\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createTextVNode(\" \\\"), _renderSlot(_ctx.$slots, $options.getKeyTopSlot(obj), _normalizeProps(_guardReactiveProps({ obj, index, id: $props.id }))), _createCommentVNode(\\\" slot replaces complete item of defined TYPE -> \"), _createVNode(_component_v_btn, {\n        slot: \"\\\\\\\"slot-item-type-[propertyName]\\\\\\\"\"\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createTextVNode(\"\\\"), _renderSlot(_ctx.$slots, $options.getTypeItemSlot(obj), _normalizeProps(_guardReactiveProps({ obj, index, id: $props.id })), () => [ _createCommentVNode(\\\" slot replaces complete item of defined KEY -> \"), _createElementVNode(\"div\", _hoisted_2, [_createTextVNode(\"\\\"), _renderSlot(_ctx.$slots, $options.getKeyItemSlot(obj), _normalizeProps(_guardReactiveProps({ obj, index, id: $props.id })), () => [ _createCommentVNode(\\\" \"), _createElementVNode(\"div\", _hoisted_3, [_createTextVNode(\"\\\\n OBJ:\" + _toDisplayString(_ctx.obj) + \"\\\\n \", 1 /* TEXT */), _hoisted_4, _createTextVNode(\"\\\\n FORM:\" + _toDisplayString($options.getFormTopSlot()) + \"\\\\n \", 1 /* TEXT */), _hoisted_5, _createTextVNode(\"\\\\n INJECT:\" + _toDisplayString($options.getKeyInjectSlot(_ctx.obj)) + \"\\\\n \", 1 /* TEXT */), _hoisted_6, _createTextVNode(\"\\\\n ARRAY:\" + _toDisplayString($options.getArrayItemSlot(_ctx.obj)) + \"\\\\n \", 1 /* TEXT */), _hoisted_7, _createTextVNode(\"\\\\n TYPE:\" + _toDisplayString($options.getTypeItemSlot(_ctx.obj)) + \"\\\\n \", 1 /* TEXT */), _hoisted_8, _createTextVNode(\"\\\\n KEY:\" + _toDisplayString($options.getKeyItemSlot(_ctx.obj)) + \"\\\\n \", 1 /* TEXT */), _hoisted_9, _createTextVNode(\"\\\\n CLASS:\" + _toDisplayString($options.getClassName(_ctx.obj)) + \"\\\\n \", 1 /* TEXT */), _hoisted_10, _createTextVNode(\"\\\\n Slots: \" + _toDisplayString($options.getInjectedScopedSlots($props.id, _ctx.obj)) + \"\\\\n \", 1 /* TEXT */), _hoisted_11, _createTextVNode(\"\\\\n VAL:\" + _toDisplayString($options.setValue(_ctx.obj)) + \"\\\\n \", 1 /* TEXT */)]), _createTextVNode(\" \\\"), _createCommentVNode(\\\" RADIO \\\"), (obj.schema.type === 'radio') ? (_openBlock(), _createBlock(_component_v_radio_group, _mergeProps({ key: 0 }, $options.bindSchema(obj), { value: $options.setValue(obj), onChange: $event => ($options.onInput($event, obj)) }), { default: _withCtx(() => [ (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(obj.schema.options, (option, idx) => { return (_openBlock(), _createBlock(_component_v_radio, _mergeProps({ key: idx }, $options.bindOptions(option)), _createSlots({ _: 2 /* DYNAMIC */ }, [ _renderList($options.getInjectedScopedSlots($props.id, obj), (s) => { return { name: s, fn: _withCtx(() => [ _renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({ id: $props.id, obj, index, idx, option }))) ]) } }) ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */)) }), 128 /* KEYED_FRAGMENT */)) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"value\\\", \\\"onChange\\\"])) : ($options.isDateTimeColorTypeAndExtensionText(obj)) ? (_openBlock(), _createElementBlock(_Fragment, { key: 1 }, [ _createCommentVNode(\\\" END RADIO \\\"), _createCommentVNode(\\\" DATE, TIME, COLOR TEXT-MENU \\\"), _createVNode(_component_v_menu, _normalizeProps(_guardReactiveProps($options.bindSchemaMenu(obj))), { activator: _withCtx(({ on }) => [ _createVNode(_component_v_text_field, _mergeProps(_toHandlers(on), $options.bindSchemaText(obj), { value: $options.setValue(obj) }, { [_toHandlerKey($options.suspendClickAppend(obj))]: $event => ($options.onEvent($event, obj, $data.append)) }, { \\\"onClick:appendOuter\\\": $event => ($options.onEvent($event, obj, $data.appendOuter)), \\\"onClick:prepend\\\": $event => ($options.onEvent($event, obj, $data.prepend)), \\\"onClick:prependInner\\\": $event => ($options.onEvent($event, obj, $data.prependInner)) }), null, 16 /* FULL_PROPS */, [\\\"value\\\", \\\"onClick:appendOuter\\\", \\\"onClick:prepend\\\", \\\"onClick:prependInner\\\"]), _createCommentVNode(\\\" SLOTS append|prepend|message for picker not avilable, try custom component \\\") ]), default: _withCtx(() => [ (_openBlock(), _createBlock(_resolveDynamicComponent($options.mapTypeToComponent( obj.schema.type )), _mergeProps($options.bindSchema(obj), { type: $options.checkInternType(obj), value: $options.setValue(obj), onInput: $event => ($options.onInput($event, obj)), \\\"onClick:hour\\\": $event => ($options.onEvent({type:'click'}, obj, $data.hour)), \\\"onClick:minute\\\": $event => ($options.onEvent({type:'click'}, obj, $data.minute)), \\\"onClick:second\\\": $event => ($options.onEvent({type:'click'}, obj, $data.second)) }), null, 16 /* FULL_PROPS */, [\\\"type\\\", \\\"value\\\", \\\"onInput\\\", \\\"onClick:hour\\\", \\\"onClick:minute\\\", \\\"onClick:second\\\"])) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */) ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (obj.schema.type === 'array') ? (_openBlock(), _createElementBlock(_Fragment, { key: 2 }, [ _createCommentVNode(\\\" END DATE, TIME, COLOR TEXT-MENU \\\"), _createCommentVNode(\\\" ARRAY \\\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.setValue(obj), (item, idx) => { return (_openBlock(), _createElementBlock(\\\"div\\\", _mergeProps({ key: $options.getKeyForArray($props.id, obj, item, idx) }, $options.bindSchema(obj), { value: $options.setValue(obj) }), [ _renderSlot(_ctx.$slots, $options.getArrayTopSlot(obj), _normalizeProps(_guardReactiveProps({ obj, id: $props.id, index, idx, item}))), _renderSlot(_ctx.$slots, $options.getArrayItemSlot(obj), _normalizeProps(_guardReactiveProps({ obj, id: $props.id, index, idx, item})), () => [ _createVNode(_component_v_custom_form_base, _mergeProps({ id: `${$props.id}-${obj.key}-${idx}`, model: item, schema: obj.schema.schema, row: $options.getRowGroupOrArray(obj), col: $options.getColGroupOrArray(obj), class: `${$props.id}-${obj.key}` }, _toHandlers(_ctx.$listeners)), _createSlots({ _: 2 /* DYNAMIC */ }, [ _renderList(_ctx.$scopedSlots, (_, name) => { return { name: name, fn: _withCtx((slotData) => [ _renderSlot(_ctx.$slots, name, _normalizeProps(_guardReactiveProps({ id: $props.id, obj, index, idx, item, ...slotData}))) ]) } }) ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"id\\\", \\\"model\\\", \\\"schema\\\", \\\"row\\\", \\\"col\\\", \\\"class\\\"]) ]), _renderSlot(_ctx.$slots, $options.getArrayBottomSlot(obj), _normalizeProps(_guardReactiveProps({ obj, id: $props.id, index, idx, item}))) ], 16 /* FULL_PROPS */, _hoisted_1)) }), 128 /* KEYED_FRAGMENT */)) ], 64 /* STABLE_FRAGMENT */)) : (/(wrap|group)/.test(obj.schema.type)) ? (_openBlock(), _createElementBlock(_Fragment, { key: 3 }, [ _createCommentVNode(\\\" END ARRAY \\\"), _createCommentVNode(\\\" GROUP | WRAP\\\"), (_openBlock(), _createBlock(_resolveDynamicComponent($options.checkInternGroupType(obj)), _mergeProps($options.bindSchema(obj), { onClick: $event => ($options.onEvent($event, obj)) }), { default: _withCtx(() => [ (obj.schema.title) ? (_openBlock(), _createBlock(_component_v_card_title, { key: 0 }, { default: _withCtx(() => [ _createTextVNode(_toDisplayString(obj.schema.title), 1 /* TEXT */) ]), _: 2 /* DYNAMIC */ }, 1024 /* DYNAMIC_SLOTS */)) : _createCommentVNode(\\\"v-if\\\", true), (obj.schema.subtitle) ? (_openBlock(), _createBlock(_component_v_card_subtitle, { key: 1 }, { default: _withCtx(() => [ _createTextVNode(_toDisplayString(obj.schema.subtitle), 1 /* TEXT */) ]), _: 2 /* DYNAMIC */ }, 1024 /* DYNAMIC_SLOTS */)) : _createCommentVNode(\\\"v-if\\\", true), _createVNode(_component_v_form_base, _mergeProps({ id: `${$props.id}-${obj.key}`, model: $options.setValue(obj), schema: obj.schema.schema, row: $options.getRowGroupOrArray(obj), col: $options.getColGroupOrArray(obj), class: `${$props.id}-${obj.key}` }, _toHandlers(_ctx.$listeners)), _createSlots({ _: 2 /* DYNAMIC */ }, [ _renderList(_ctx.$scopedSlots, (_, name) => { return { name: name, fn: _withCtx((slotData) => [ _renderSlot(_ctx.$slots, name, _normalizeProps(_guardReactiveProps({ id: $props.id, obj, index, ...slotData}))) ]) } }) ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"id\\\", \\\"model\\\", \\\"schema\\\", \\\"row\\\", \\\"col\\\", \\\"class\\\"]) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"onClick\\\"])) ], 64 /* STABLE_FRAGMENT */)) : (obj.schema.type === $data.treeview) ? (_openBlock(), _createElementBlock(_Fragment, { key: 4 }, [ _createCommentVNode(\\\" END GROUP | WRAP \\\"), _createCommentVNode(\\\" TREEVIEW \\\"), _createVNode(_component_v_treeview, _mergeProps({ open: obj.schema.open }, $options.bindSchema(obj), { \\\"onUpdate:open\\\": $event => ($options.onEvent({type:'click'}, obj, 'open' )), \\\"onUpdate:active\\\": $event => ($options.onEvent({type:'click'}, obj, 'selected' )), items: obj.schema.items, value: $options.setValue(obj), onInput: $event => ($options.onInput($event, obj)) }), _createSlots({ _: 2 /* DYNAMIC */ }, [ _renderList($options.getInjectedScopedSlots($props.id, obj), (s) => { return { name: s, fn: _withCtx((slotData) => [ _renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({ id: $props.id, obj, index, ...slotData}))) ]) } }) ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"open\\\", \\\"onUpdate:open\\\", \\\"onUpdate:active\\\", \\\"items\\\", \\\"value\\\", \\\"onInput\\\"]) ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (obj.schema.type === $data.list) ? (_openBlock(), _createElementBlock(_Fragment, { key: 5 }, [ _createCommentVNode(\\\" END TREEVIEW \\\"), _createCommentVNode(\\\" LIST \\\"), _createVNode(_component_v_list, null, { default: _withCtx(() => [ _renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, 'label'), _normalizeProps(_guardReactiveProps({ id: $props.id, obj, index })), () => [ (obj.schema.label) ? (_openBlock(), _createBlock(_component_v_toolbar, _mergeProps({ key: 0 }, $options.bindSchema(obj), { dark: \\\"\\\" }), { default: _withCtx(() => [ _createVNode(_component_v_toolbar_title, null, { default: _withCtx(() => [ _createTextVNode(_toDisplayString(obj.schema.label), 1 /* TEXT */) ]), _: 2 /* DYNAMIC */ }, 1024 /* DYNAMIC_SLOTS */) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */)) : _createCommentVNode(\\\"v-if\\\", true) ]), _createVNode(_component_v_list_item_group, _mergeProps({ modelValue: obj.schema.model, \\\"onUpdate:modelValue\\\": $event => ((obj.schema.model) = $event) }, $options.bindSchema(obj), { light: \\\"\\\" }), { default: _withCtx(() => [ (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.setValue(obj), (item, idx) => { return (_openBlock(), _createBlock(_component_v_list_item, { key: idx, onClick: $event => ($options.onEvent($event, obj, $data.list )) }, { default: _withCtx(() => [ _renderSlot(_ctx.$slots, $options.getArrayItemSlot(obj), _normalizeProps(_guardReactiveProps({ obj, id: $props.id, index, idx, item})), () => [ _createVNode(_component_v_list_item_icon, null, { default: _withCtx(() => [ _createVNode(_component_v_icon, { textContent: _toDisplayString(obj.schema.icon) }, null, 8 /* PROPS */, [\\\"textContent\\\"]) ]), _: 2 /* DYNAMIC */ }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_content, null, { default: _withCtx(() => [ _createVNode(_component_v_list_item_title, { textContent: _toDisplayString(obj.schema.item ? item[obj.schema.item] : item) }, null, 8 /* PROPS */, [\\\"textContent\\\"]) ]), _: 2 /* DYNAMIC */ }, 1024 /* DYNAMIC_SLOTS */) ]) ]), _: 2 /* DYNAMIC */ }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\\\"onClick\\\"])) }), 128 /* KEYED_FRAGMENT */)) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"modelValue\\\", \\\"onUpdate:modelValue\\\"]) ]), _: 2 /* DYNAMIC */ }, 1024 /* DYNAMIC_SLOTS */) ], 64 /* STABLE_FRAGMENT */)) : (/(switch|checkbox)/.test(obj.schema.type)) ? (_openBlock(), _createElementBlock(_Fragment, { key: 6 }, [ _createCommentVNode(\\\" END LIST \\\"), _createCommentVNode(\\\" CHECKBOX | SWITCH \\\"), (_openBlock(), _createBlock(_resolveDynamicComponent($options.mapTypeToComponent(obj.schema.type)), _mergeProps({ \\\"input-value\\\": $options.setValue(obj) }, $options.bindSchema(obj), { onChange: $event => ($options.onInput($event, obj)) }), _createSlots({ _: 2 /* DYNAMIC */ }, [ _renderList($options.getInjectedScopedSlots($props.id, obj), (s) => { return { name: s, fn: _withCtx(() => [ _renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({ id: $props.id, obj, index }))) ]) } }) ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"input-value\\\", \\\"onChange\\\"])) ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (obj.schema.type === 'file' ) ? (_openBlock(), _createElementBlock(_Fragment, { key: 7 }, [ _createCommentVNode(\\\" END CHECKBOX | SWITCH \\\"), _createCommentVNode(\\\" FILE \\\"), _createVNode(_component_v_file_input, _mergeProps($options.bindSchema(obj), { value: $options.setValue(obj), onFocus: $event => ($options.onEvent($event, obj)), onBlur: $event => ($options.onEvent($event, obj)), onChange: $event => ($options.onInput($event, obj)) }), _createSlots({ _: 2 /* DYNAMIC */ }, [ _renderList($options.getInjectedScopedSlots($props.id, obj), (s) => { return { name: s, fn: _withCtx((scopeData) => [ _renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({ id: $props.id, obj, index, ...scopeData}))) ]) } }) ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"value\\\", \\\"onFocus\\\", \\\"onBlur\\\", \\\"onChange\\\"]) ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (obj.schema.type === 'icon') ? (_openBlock(), _createElementBlock(_Fragment, { key: 8 }, [ _createCommentVNode(\\\" END FILE \\\"), _createCommentVNode(\\\" ICON \\\"), _createVNode(_component_v_icon, _mergeProps($options.bindSchema(obj), { textContent: _toDisplayString($options.getIconValue(obj)), onClick: $event => ($options.onEvent($event, obj)) }), null, 16 /* FULL_PROPS */, [\\\"textContent\\\", \\\"onClick\\\"]) ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (obj.schema.type === 'slider') ? (_openBlock(), _createElementBlock(_Fragment, { key: 9 }, [ _createCommentVNode(\\\" END ICON \\\"), _createCommentVNode(\\\" SLIDER \\\"), _createVNode(_component_v_slider, _mergeProps($options.bindSchema(obj), { onInput: $event => ($options.onInput($event, obj)) }), _createSlots({ _: 2 /* DYNAMIC */ }, [ _renderList($options.getInjectedScopedSlots($props.id, obj), (s) => { return { name: s, fn: _withCtx(() => [ _renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({ id: $props.id, obj, index }))) ]) } }) ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"onInput\\\"]) ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (obj.schema.type === 'img') ? (_openBlock(), _createElementBlock(_Fragment, { key: 10 }, [ _createCommentVNode(\\\" END SLIDER \\\"), _createCommentVNode(\\\" IMG \\\"), _createVNode(_component_v_img, _mergeProps({ src: $options.getImageSource(obj) }, $options.bindSchema(obj), { onClick: $event => ($options.onEvent($event, obj)) }), _createSlots({ _: 2 /* DYNAMIC */ }, [ _renderList($options.getInjectedScopedSlots($props.id, obj), (s) => { return { name: s, fn: _withCtx(() => [ _renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({ id: $props.id, obj, index }))) ]) } }) ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"src\\\", \\\"onClick\\\"]) ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (obj.schema.type === 'btn-toggle') ? (_openBlock(), _createElementBlock(_Fragment, { key: 11 }, [ _createCommentVNode(\\\" END IMG \\\"), _createCommentVNode(\\\" BTN-TOGGLE \\\"), _createVNode(_component_v_btn_toggle, _mergeProps($options.bindSchema(obj), { value: $options.setValue(obj), onChange: $event => ($options.onInput($event, obj)) }), { default: _withCtx(() => [ (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(obj.schema.options, (option, idx) => { return (_openBlock(), _createBlock(_component_v_btn, _mergeProps({ key: idx }, $options.bindOptions(option), { icon: option.icon ? true :false }), { default: _withCtx(() => [ _createVNode(_component_v_icon, { dark: obj.schema.dark }, { default: _withCtx(() => [ _createTextVNode(_toDisplayString($options.bindOptions(option).icon), 1 /* TEXT */) ]), _: 2 /* DYNAMIC */ }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\\\"dark\\\"]), _createTextVNode(\\\" \\\" + _toDisplayString($options.bindOptions(option).label), 1 /* TEXT */) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"icon\\\"])) }), 128 /* KEYED_FRAGMENT */)) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"value\\\", \\\"onChange\\\"]) ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (obj.schema.type === 'btn') ? (_openBlock(), _createElementBlock(_Fragment, { key: 12 }, [ _createCommentVNode(\\\" END BTN-TOGGLE \\\"), _createCommentVNode(\\\" BTN \\\"), _createVNode(_component_v_btn, _mergeProps($options.bindSchema(obj), { onClick: $event => ($options.onEvent($event, obj, $data.button)) }), { default: _withCtx(() => [ (obj.schema.iconLeft) ? (_openBlock(), _createBlock(_component_v_icon, { key: 0, left: \\\"\\\", dark: obj.schema.dark }, { default: _withCtx(() => [ _createTextVNode(_toDisplayString(obj.schema.iconLeft), 1 /* TEXT */) ]), _: 2 /* DYNAMIC */ }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\\\"dark\\\"])) : _createCommentVNode(\\\"v-if\\\", true), _createTextVNode(\\\" \\\" + _toDisplayString($options.setValue(obj)) + \\\" \\\", 1 /* TEXT */), (obj.schema.iconCenter) ? (_openBlock(), _createBlock(_component_v_icon, { key: 1, dark: obj.schema.dark }, { default: _withCtx(() => [ _createTextVNode(_toDisplayString(obj.schema.iconCenter), 1 /* TEXT */) ]), _: 2 /* DYNAMIC */ }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\\\"dark\\\"])) : _createCommentVNode(\\\"v-if\\\", true), _createTextVNode(\\\" \\\" + _toDisplayString(obj.schema.label) + \\\" \\\", 1 /* TEXT */), (obj.schema.iconRight) ? (_openBlock(), _createBlock(_component_v_icon, { key: 2, right: \\\"\\\", dark: obj.schema.dark }, { default: _withCtx(() => [ _createTextVNode(_toDisplayString(obj.schema.iconRight), 1 /* TEXT */) ]), _: 2 /* DYNAMIC */ }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\\\"dark\\\"])) : _createCommentVNode(\\\"v-if\\\", true) ]), _: 2 /* DYNAMIC */ }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"onClick\\\"]) ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (obj.schema.mask) ? (_openBlock(), _createElementBlock(_Fragment, { key: 13 }, [ _createCommentVNode(\\\" END BTN \\\"), _createCommentVNode(\\\" MASK \\\"), _withDirectives((_openBlock(), _createBlock(_resolveDynamicComponent($options.mapTypeToComponent(obj.schema.type)), _mergeProps($options.bindSchema(obj), { type: $options.checkExtensionType(obj), value: $options.setValue(obj), obj: obj, [($options.searchInputSync(obj)) || \\\"\\\"]: obj.schema.searchInput, onFocus: $event => ($options.onEvent($event, obj)), onBlur: $event => ($options.onEvent($event, obj)) }, { [_toHandlerKey($options.suspendClickAppend(obj))]: $event => ($options.onEvent($event, obj, $data.append)) }, { \\\"onClick:appendOuter\\\": $event => ($options.onEvent($event, obj, $data.appendOuter)), \\\"onClick:prepend\\\": $event => ($options.onEvent($event, obj, $data.prepend )), \\\"onClick:prependInner\\\": $event => ($options.onEvent($event, obj, $data.prependInner)), \\\"onClick:clear\\\": $event => ($options.onEvent($event, obj, $data.clear )), \\\"onClick:hour\\\": $event => ($options.onEvent({type:'click'}, obj, $data.hour)), \\\"onClick:minute\\\": $event => ($options.onEvent({type:'click'}, obj, $data.minute)), \\\"onClick:second\\\": $event => ($options.onEvent({type:'click'}, obj, $data.second)), onInput: $event => ($options.onInput($event, obj)) }), _createSlots({ _: 2 /* DYNAMIC */ }, [ _renderList($options.getInjectedScopedSlots($props.id, obj), (s) => { return { name: s, fn: _withCtx(() => [ _renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({ id: $props.id, obj, index }))) ]) } }) ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"type\\\", \\\"value\\\", \\\"obj\\\", \\\"onFocus\\\", \\\"onBlur\\\", \\\"onClick:appendOuter\\\", \\\"onClick:prepend\\\", \\\"onClick:prependInner\\\", \\\"onClick:clear\\\", \\\"onClick:hour\\\", \\\"onClick:minute\\\", \\\"onClick:second\\\", \\\"onInput\\\"])), [ [_directive_mask, obj.schema.mask] ]) ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, { key: 14 }, [ _createCommentVNode(\\\" END MASK \\\"), _createCommentVNode(\\\" DEFAULT all other Types -> typeToComponent \\\"), (_openBlock(), _createBlock(_resolveDynamicComponent($options.mapTypeToComponent(obj.schema.type)), _mergeProps($options.bindSchema(obj), { type: $options.checkExtensionType(obj), value: $options.setValue(obj), obj: obj, [($options.searchInputSync(obj)) || \\\"\\\"]: obj.schema.searchInput, onFocus: $event => ($options.onEvent($event, obj)), onBlur: $event => ($options.onEvent($event, obj)) }, { [_toHandlerKey($options.suspendClickAppend(obj))]: $event => ($options.onEvent($event, obj, $data.append)) }, { \\\"onClick:appendOuter\\\": $event => ($options.onEvent($event, obj, $data.appendOuter)), \\\"onClick:prepend\\\": $event => ($options.onEvent($event, obj, $data.prepend )), \\\"onClick:prependInner\\\": $event => ($options.onEvent($event, obj, $data.prependInner)), \\\"onClick:clear\\\": $event => ($options.onEvent($event, obj, $data.clear )), \\\"onClick:hour\\\": $event => ($options.onEvent({type:'click'}, obj, $data.hour)), \\\"onClick:minute\\\": $event => ($options.onEvent({type:'click'}, obj, $data.minute)), \\\"onClick:second\\\": $event => ($options.onEvent({type:'click'}, obj, $data.second)), onInput: $event => ($options.onInput($event, obj)) }), _createSlots({ _: 2 /* DYNAMIC */ }, [ _renderList($options.getInjectedScopedSlots($props.id, obj), (s) => { return { name: s, fn: _withCtx(() => [ _renderSlot(_ctx.$slots, $options.getKeyInjectSlot(obj, s), _normalizeProps(_guardReactiveProps({ id: $props.id, obj, index }))) ]) } }) ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, [\\\"type\\\", \\\"value\\\", \\\"obj\\\", \\\"onFocus\\\", \\\"onBlur\\\", \\\"onClick:appendOuter\\\", \\\"onClick:prepend\\\", \\\"onClick:prependInner\\\", \\\"onClick:clear\\\", \\\"onClick:hour\\\", \\\"onClick:minute\\\", \\\"onClick:second\\\", \\\"onInput\\\"])) ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\\\" END DEFAULT \\\") ]) ]), _createCommentVNode(\\\" slot at bottom of item -> \"), _hoisted_12])];\n        }),\n        _: 1 /* STABLE */\n      })];\n    }),\n\n    _: 1 /* STABLE */\n  })])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["slot","_createElementVNode","_hoisted_1","_createVNode","_component_v_btn","_hoisted_2","_hoisted_3","_toDisplayString","_ctx","obj","_hoisted_4","$options","getFormTopSlot","_hoisted_5","getKeyInjectSlot","_hoisted_6","getArrayItemSlot","_hoisted_7","getTypeItemSlot","_hoisted_8","getKeyItemSlot","_hoisted_9","getClassName","_hoisted_10","getInjectedScopedSlots","$props","id","_hoisted_11","setValue","_hoisted_12"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/others/CustomFormBase.vue"],"sourcesContent":["<template>\n    <v-row\n      :id=\"id\"\n      v-bind=\"getRow\"\n      v-resize.quiet=\"onResize\"\n    >\n      <!-- FORM-BASE TOP SLOT -->\n      <slot :name=\"getFormTopSlot()\" :id= \"id\"/>\n      <!-- main loop over components/controls -->\n      <template v-for=\"(obj, index) in flatCombinedArraySorted\" :key=\"index\">\n        <!-- Tooltip Wrapper -->\n        <v-tooltip\n          :disabled=\"!obj.schema.tooltip\"\n          v-bind=\"getShorthandTooltip(obj.schema.tooltip)\"\n        >\n          <template v-slot:activator=\"{ on }\">\n            <v-col\n              v-show=\"!obj.schema.hidden\"\n              :key=\"index\"\n              v-bind= \"getGridAttributes(obj)\"\n              v-intersect= \"(entries, observer) => onIntersect(entries, observer, obj)\"\n              v-touch= \"{ left: () => onSwipe('left', obj), right: () => onSwipe('right', obj), up: () => onSwipe('up', obj), down: () => onSwipe('down', obj) }\"\n              v-click-outside= \"(event) => onClickOutside(event, obj)\"\n              :class =\"getClassName(obj)\"\n              :draggable =\"obj.schema.drag\"\n              @mouseenter =\"onEvent($event, obj)\"\n              @mouseleave =\"onEvent($event, obj)\"\n\n              v-on=\"on\"\n              @dragstart=\"dragstart($event, obj)\"\n              @dragover=\"dragover($event, obj)\"\n              @drop=\"drop($event, obj)\"\n            >\n              <!-- slot on top of type  -> <div slot=\"slot-bottom-type-[propertyName]\"> -->\n              <slot :name=\"getTypeTopSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n              <!-- slot on top of key  -> <v-btn slot=\"slot-bottom-key-[propertyName]\"> -->\n              <slot :name=\"getKeyTopSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n              <!-- slot replaces complete item of defined TYPE -> <v-btn slot=\"slot-item-type-[propertyName]\">-->\n              <slot :name=\"getTypeItemSlot(obj)\" v-bind= \"{ obj, index, id }\">\n                <!-- slot replaces complete item of defined KEY -> <div slot=\"slot-item-key-[propertyName]\">-->\n                <slot :name=\"getKeyItemSlot(obj)\" v-bind= \"{ obj, index, id }\">\n\n                    <!-- <div class=\"caption\">\n                      OBJ:{{obj}}\n                      <br>\n                      FORM:{{getFormTopSlot()}}\n                      <br>\n                      INJECT:{{getKeyInjectSlot(obj)}}\n                      <br>\n                      ARRAY:{{getArrayItemSlot(obj)}}\n                      <br>\n                      TYPE:{{getTypeItemSlot(obj)}}\n                      <br>\n                      KEY:{{getKeyItemSlot(obj)}}\n                      <br>\n                      CLASS:{{getClassName(obj)}}\n                      <br>\n                      Slots: {{getInjectedScopedSlots(id, obj)}}\n                      <br>\n                      VAL:{{setValue(obj)}}\n                    </div> -->\n\n                <!-- RADIO -->\n                  <v-radio-group\n                    v-if=\"obj.schema.type === 'radio'\"\n                    v-bind=\"bindSchema(obj)\"\n                    :value=\"setValue(obj)\"\n                    @change=\"onInput($event, obj)\"\n                  >\n                    <v-radio\n                      v-for=\"(option, idx) in obj.schema.options\"\n                      :key=\"idx\"\n                      v-bind=\"bindOptions(option)\"\n                    >\n                      <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                      <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name= \"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index, idx, option }\"/></template>\n                    </v-radio>\n                  </v-radio-group>\n                <!-- END RADIO -->\n\n                <!-- DATE, TIME, COLOR TEXT-MENU -->\n                  <v-menu\n                    v-else-if=\"isDateTimeColorTypeAndExtensionText(obj)\"\n                    v-bind=\"bindSchemaMenu(obj)\"\n                  >\n                    <template v-slot:activator=\"{ on }\">\n                      <v-text-field\n                        v-on=\"on\"\n                        v-bind=\"bindSchemaText(obj)\"\n                        :value=\"setValue(obj)\"\n                        @[suspendClickAppend(obj)]=\"onEvent($event, obj, append)\"\n                        @click:append-outer=\"onEvent($event, obj, appendOuter)\"\n                        @click:prepend=\"onEvent($event, obj, prepend)\"\n                        @click:prepend-inner=\"onEvent($event, obj, prependInner)\"\n                      />\n                      <!-- SLOTS append|prepend|message for picker not avilable, try custom component -->\n                    </template>\n                    <component\n                      :is=\"mapTypeToComponent( obj.schema.type )\"\n                      v-bind=\"bindSchema(obj)\"\n                      :type=\"checkInternType(obj)\"\n                      :value=\"setValue(obj)\"\n                      @input=\"onInput($event, obj)\"\n                      @click:hour=\"onEvent({type:'click'}, obj, hour)\"\n                      @click:minute=\"onEvent({type:'click'}, obj, minute)\"\n                      @click:second=\"onEvent({type:'click'}, obj, second)\"\n                    />\n                  </v-menu>\n                <!-- END DATE, TIME, COLOR TEXT-MENU -->\n\n                <!-- ARRAY -->\n                  <template\n                    v-else-if=\"obj.schema.type === 'array'\"\n                  >\n                    <div\n                      v-for=\"(item, idx) in setValue(obj)\"\n                      :key=\"getKeyForArray(id, obj, item, idx)\"\n                      v-bind=\"bindSchema(obj)\"\n                      :value=\"setValue(obj)\"\n                    >\n                      <slot :name=\"getArrayTopSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\"/>\n                      <slot :name=\"getArrayItemSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\">\n                        <v-custom-form-base\n                          :id=\"`${id}-${obj.key}-${idx}`\"\n                          :model=\"item\"\n                          :schema=\"obj.schema.schema\"\n                          :row=\"getRowGroupOrArray(obj)\"\n                          :col=\"getColGroupOrArray(obj)\"\n                          :class=\"`${id}-${obj.key}`\"\n                          v-on=\"$listeners\"\n                        >\n                          <!-- Based on https://gist.github.com/loilo/73c55ed04917ecf5d682ec70a2a1b8e2 -->\n                          <template v-for=\"(_, name) in $scopedSlots\" #[name]=\"slotData\"><slot :name=\"name\" v-bind= \"{ id, obj, index, idx, item, ...slotData}\" /></template>\n                        </v-custom-form-base>\n                      </slot>\n                      <slot :name=\"getArrayBottomSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\"/>\n                    </div>\n                  </template>\n                <!-- END ARRAY -->\n\n                <!-- GROUP | WRAP-->\n                  <template v-else-if=\"/(wrap|group)/.test(obj.schema.type)\">\n                    <component\n                      :is=\"checkInternGroupType(obj)\"\n                      v-bind=\"bindSchema(obj)\"\n                      @click=\"onEvent($event, obj)\"\n                    >\n                      <v-card-title v-if=\"obj.schema.title\">{{obj.schema.title}}</v-card-title>\n                      <v-card-subtitle v-if=\"obj.schema.subtitle\">{{obj.schema.subtitle}}</v-card-subtitle>\n\n                      <v-form-base\n                        :id=\"`${id}-${obj.key}`\"\n                        :model=\"setValue(obj)\"\n                        :schema=\"obj.schema.schema\"\n                        :row=\"getRowGroupOrArray(obj)\"\n                        :col=\"getColGroupOrArray(obj)\"\n                        :class=\"`${id}-${obj.key}`\"\n                        v-on=\"$listeners\"\n                      >\n                        <!-- Based on https://gist.github.com/loilo/73c55ed04917ecf5d682ec70a2a1b8e2 -->\n                        <template v-for=\"(_, name) in $scopedSlots\" #[name]=\"slotData\"><slot :name=\"name\" v-bind= \"{ id, obj, index,  ...slotData}\" /></template>\n\n                      </v-form-base>\n                    </component>\n                  </template>\n                <!-- END GROUP | WRAP -->\n\n                <!-- TREEVIEW -->\n                  <v-treeview\n                    v-else-if=\"obj.schema.type === treeview\"\n                    :open.sync=\"obj.schema.open\"\n                    v-bind=\"bindSchema(obj)\"\n                    @update:open=\"onEvent({type:'click'}, obj, 'open' )\"\n                    @update:active=\"onEvent({type:'click'}, obj, 'selected' )\"\n\n                    :items=\"obj.schema.items\"\n                    :value=\"setValue(obj)\"\n                    @input= \"onInput($event, obj)\"\n\n                  >\n                    <!-- works with #[s]=\"slotData\" \" -->\n                    <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]=\"slotData\"><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index,  ...slotData}\" /></template>\n                  </v-treeview>\n                <!-- END TREEVIEW -->\n\n                <!-- LIST -->\n                  <template\n                    v-else-if=\"obj.schema.type === list\"\n                  >\n                    <v-list>\n                      <slot :name=\"getKeyInjectSlot(obj, 'label')\" v-bind= \"{ id, obj, index }\" >\n                        <v-toolbar\n                          v-if=\"obj.schema.label\"\n                          v-bind=\"bindSchema(obj)\"\n                          dark\n                        >\n                          <v-toolbar-title>{{ obj.schema.label }}</v-toolbar-title>\n                        </v-toolbar>\n                      </slot>\n                      <v-list-item-group\n                        v-model=\"obj.schema.model\"\n                        v-bind=\"bindSchema(obj)\"\n                        light\n                      >\n                        <template v-for=\"(item, idx) in setValue(obj)\" :key=\"idx\">\n                          <v-list-item\n\n                            @click=\"onEvent($event, obj, list )\"\n                          >\n                          <slot :name=\"getArrayItemSlot(obj)\" v-bind= \"{ obj, id, index, idx, item}\">\n                              <v-list-item-icon>\n                                <v-icon v-text=\"obj.schema.icon\" />\n                              </v-list-item-icon>\n                              <v-list-item-content>\n                                <v-list-item-title v-text=\"obj.schema.item ? item[obj.schema.item] : item\" />\n                              </v-list-item-content>\n                          </slot>\n                          </v-list-item>\n                        </template>\n                      </v-list-item-group>\n                    </v-list>\n                  </template>\n                <!-- END LIST -->\n\n                <!-- CHECKBOX | SWITCH -->\n                  <component\n                    v-else-if=\"/(switch|checkbox)/.test(obj.schema.type)\"\n                    :is=\"mapTypeToComponent(obj.schema.type)\"\n                    :input-value=\"setValue(obj)\"\n                    v-bind=\"bindSchema(obj)\"\n                    @change=\"onInput($event, obj)\"\n                  >\n                    <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                    <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                  </component>\n                <!-- END CHECKBOX | SWITCH -->\n\n                <!-- FILE -->\n                  <v-file-input\n                    v-else-if=\"obj.schema.type === 'file' \"\n                    v-bind=\"bindSchema(obj)\"\n                    :value=\"setValue(obj)\"\n                    @focus=\"onEvent($event, obj)\"\n                    @blur=\"onEvent($event, obj)\"\n                    @change=\"onInput($event, obj)\"\n                  >\n                    <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]=\"scopeData\"><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index, ...scopeData}\" /></template>\n                  </v-file-input>\n                <!-- END FILE -->\n\n                <!-- ICON -->\n                  <v-icon\n                    v-else-if=\"obj.schema.type === 'icon'\"\n                    v-bind=\"bindSchema(obj)\"\n                    v-text=\"getIconValue(obj)\"\n                    @click=\"onEvent($event, obj)\"\n                  />\n                <!-- END ICON -->\n\n                <!-- SLIDER -->\n                  <v-slider\n                    v-else-if=\"obj.schema.type === 'slider'\"\n                    v-bind=\"bindSchema(obj)\"\n                    @input=\"onInput($event, obj)\"\n                  >\n                    <!-- some component works with #[s]=\"slotData\"  some doesn't work with slot data ie: 'label'  / but 'thumb-label' works only with scopeData -->\n                    <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\" /></template>\n                    <!-- <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]=\"scopeData\"><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index, ...scopeData}\" /></template> -->\n                  </v-slider>\n                <!-- END SLIDER -->\n\n                <!-- IMG -->\n                  <v-img\n                    v-else-if=\"obj.schema.type === 'img'\"\n                    :src=\"getImageSource(obj)\"\n                    v-bind=\"bindSchema(obj)\"\n                    @click=\"onEvent($event, obj)\"\n                  >\n                    <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                    <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                  </v-img>\n                <!-- END IMG -->\n\n                <!-- BTN-TOGGLE -->\n                  <v-btn-toggle\n                    v-else-if=\"obj.schema.type === 'btn-toggle'\"\n                    v-bind=\"bindSchema(obj)\"\n                    :value=\"setValue(obj)\"\n                    @change=\"onInput($event, obj)\"\n                  >\n                    <v-btn\n                      v-for=\"(option,idx) in obj.schema.options\"\n                      :key=\"idx\"\n                      v-bind=\"bindOptions(option)\"\n                      :icon=\"option.icon ? true :false\"\n                    >\n                      <v-icon :dark=\"obj.schema.dark\">\n                        {{ bindOptions(option).icon }}\n                      </v-icon>\n                      {{ bindOptions(option).label }}\n                    </v-btn>\n                  </v-btn-toggle>\n                <!-- END BTN-TOGGLE -->\n\n                <!-- BTN -->\n                  <v-btn\n                    v-else-if=\"obj.schema.type === 'btn'\"\n                    v-bind=\"bindSchema(obj)\"\n                    @click=\"onEvent($event, obj, button)\"\n                  >\n                    <v-icon\n                      v-if=\"obj.schema.iconLeft\"\n                      left\n                      :dark=\"obj.schema.dark\"\n                    >\n                      {{ obj.schema.iconLeft }}\n                    </v-icon>\n                    {{ setValue(obj) }}\n                    <v-icon\n                      v-if=\"obj.schema.iconCenter\"\n                      :dark=\"obj.schema.dark\"\n                    >\n                      {{ obj.schema.iconCenter }}\n                    </v-icon>\n                    {{ obj.schema.label }}\n                    <v-icon\n                      v-if=\"obj.schema.iconRight\"\n                      right\n                      :dark=\"obj.schema.dark\"\n                    >\n                      {{ obj.schema.iconRight }}\n                    </v-icon>\n                  </v-btn>\n                <!-- END BTN -->\n\n                <!-- MASK  -->\n                  <component\n                    :is=\"mapTypeToComponent(obj.schema.type)\"\n                    v-else-if=\"obj.schema.mask\"\n                    v-bind=\"bindSchema(obj)\"\n                    v-mask=\"obj.schema.mask\"\n                    :type=\"checkExtensionType(obj)\"\n                    :value=\"setValue(obj)\"\n                    :obj=\"obj\"\n                    :[searchInputSync(obj)].sync=\"obj.schema.searchInput\"\n                    @focus= \"onEvent($event, obj)\"\n                    @blur= \"onEvent($event, obj)\"\n                    @[suspendClickAppend(obj)]=\"onEvent($event, obj, append)\"\n                    @click:append-outer=\"onEvent($event, obj, appendOuter)\"\n                    @click:prepend=\"onEvent($event, obj, prepend )\"\n                    @click:prepend-inner=\"onEvent($event, obj, prependInner)\"\n                    @click:clear=\"onEvent($event, obj, clear )\"\n                    @click:hour=\"onEvent({type:'click'}, obj, hour)\"\n                    @click:minute=\"onEvent({type:'click'}, obj, minute)\"\n                    @click:second=\"onEvent({type:'click'}, obj, second)\"\n                    @input=\"onInput($event, obj)\"\n                  >\n                    <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                    <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name=\"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                  </component>\n                <!-- END MASK -->\n\n                <!-- DEFAULT all other Types -> typeToComponent -->\n                  <component\n                    v-else\n                    :is=\"mapTypeToComponent(obj.schema.type)\"\n                    v-bind=\"bindSchema(obj)\"\n                    :type=\"checkExtensionType(obj)\"\n                    :value=\"setValue(obj)\"\n                    :obj=\"obj\"\n                    :[searchInputSync(obj)].sync=\"obj.schema.searchInput\"\n                    @focus= \"onEvent($event, obj)\"\n                    @blur= \"onEvent($event, obj)\"\n                    @[suspendClickAppend(obj)]=\"onEvent($event, obj, append)\"\n                    @click:append-outer= \"onEvent($event, obj, appendOuter)\"\n                    @click:prepend= \"onEvent($event, obj, prepend )\"\n                    @click:prepend-inner= \"onEvent($event, obj, prependInner)\"\n                    @click:clear= \"onEvent($event, obj, clear )\"\n                    @click:hour= \"onEvent({type:'click'}, obj, hour)\"\n                    @click:minute= \"onEvent({type:'click'}, obj, minute)\"\n                    @click:second= \"onEvent({type:'click'}, obj, second)\"\n                    @input= \"onInput($event, obj)\"\n                  >\n                    <!-- component doesn't work with #[s]=\"slotData\" \" -->\n                    <template v-for=\"s in getInjectedScopedSlots(id, obj)\" #[s]><slot :name= \"getKeyInjectSlot(obj, s)\" v-bind= \"{ id, obj, index }\"/></template>\n                  </component>\n                <!-- END DEFAULT -->\n                </slot>\n              </slot>\n\n              <!-- slot at bottom of item  -> <div slot=\"slot-bottom-key-[deep-nested-key-name]\"> -->\n              <slot :name=\"getTypeBottomSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n              <slot :name=\"getKeyBottomSlot(obj)\" v-bind= \"{ obj, index, id }\"/>\n            </v-col>\n\n            <!-- schema.spacer:true - push next item to the right and fill space between items -->\n            <v-spacer\n              v-if=\"obj.schema.spacer\"\n              :key=\"`s-${index}`\"\n            />\n          </template>\n          <!-- slot for Tooltip or use shorthand schema.tooltip:'myTooltip' | any tooltip activated by schema:{ key:{ tooltip:'myTooltip', ...} -->\n          <slot :name=\"getTooltipSlot(obj)\" v-bind= \"{ obj, index, id }\" >\n            <span>{{getShorthandTooltipLabel(obj.schema.tooltip)}}</span>\n          </slot>\n          <slot :name=\"getKeyTooltipSlot(obj)\" v-bind= \"{ obj, index, id }\" />\n        </v-tooltip>\n      </template>\n      <!-- FORM-BASE BOTTOM SLOT -->\n      <slot :name=\"getFormBottomSlot()\" :id= \"id\"/>\n    </v-row>\n  </template>\n\n<script>\n// Import\nimport Vue from 'vue'\nimport { get, isPlainObject, isFunction, isString, isNumber, isEmpty, orderBy, delay } from 'lodash'\n\n// import VueMask from 'v-mask'\n// Vue.use(VueMask, {\n//   placeholders: {\n//     // Info Mask https://github.com/probil/v-mask\n//     // '#': null,       // passing `null` removes default placeholder, so `#` is treated as character\n//     // D: /\\d/,         // define new placeholder\n//   }\n// })\n//\n// Declaration\nconst typeToComponent = {\n  // maps schema.type to prop 'type' in v-text-field  - https://www.wufoo.com/html5/\n  text: 'v-text-field',\n  password: 'v-text-field',\n  email: 'v-text-field',\n  tel: 'v-text-field',\n  url: 'v-text-field',\n  search: 'v-text-field',\n  number: 'v-text-field',\n  /*\n        { type:'text, ext:'typeOfTextField', ...}\n        For native <INPUT> type use alternative schema prop ext  -> schema:{ type:'text, ext:'date', ...}\n        correspond to <input type=\"number\" >\n        number: 'v-text-field',   //  { type:'text, ext:'number', ...}\n        range: 'v-text-field',   //  { type:'text, ext:'range', ...}\n        date: 'v-text-field',    //  { type:'text, ext:'date', ...}\n        time: 'v-text-field',    //  { type:'text, ext:'time', ...}\n        color: 'v-text-field',   //  { type:'text, ext:'color', ...}\n      */\n\n  date: 'v-date-picker',\n  time: 'v-time-picker',\n  color: 'v-color-picker',\n  /*\n        INFO: 3 Types of PICKER DATE / TIME / COLOR\n        Date-Native Input    - schema:{ type:'text, ext:'date', ...}\n        Date-Picker          - schema:{ type:'date', ...}\n        Date-Picker-Textmenu     - schema:{ type:'date', ext:'text'...}\n      */\n\n  // map schema.type to vuetify-control (vuetify 2.0)\n  img: 'v-img',\n  textarea: 'v-textarea',\n  range: 'v-slider',\n  file: 'v-file-input',\n  switch: 'v-switch',\n  checkbox: 'v-checkbox',\n  card: 'v-card'\n  /*\n        HOW TO USE CUSTOM Components\n        1)\n          Name and Register your Custom-Control Component globally in 'main.js'\n          but avoid collision with registered names of Vuetify - Controls\n          See: https://vuejs.org/v2/guide/components-registration.html\n\n          Vue.component('custom-component', () => import('@/components/custom-component.vue') )\n\n        2)\n          use it in Schema\n\n          mySchema: { myCustom: { type: 'custom-component' }\n\n        3) // custom-component.vue\n          <template>\n            <v-text-field v-model=\"inp\"  label=\"Basic\"></v-text-field>\n          </template>\n          <script>\n            export default {\n              props: ['type','value', 'obj'],\n              computed:{\n                inp:{\n                  get(){  return this.value},\n                  set(v){ this.$emit('input', v)}\n                }\n              }\n            }\n          < /script>\n      */\n\n}\nconst orderDirection = 'ASC'\nconst pathDelimiter = '.'\nconst classKeyDelimiter = '-'\nconst defaultID = 'form-base'\nconst isPicker = 'date|time|color'\nconst onEventDelay = 1 // ms\n\nconst mouse = 'mouseenter|mouseleave'\nconst change = 'input|click' // event change collects events 'input|click'\nconst watch = 'focus|input|click|blur' // event watch collects events 'focus|input|click|blur'\nconst display = 'resize|swipe|intersect' // event watch collects events 'resize|swipe|intersect'\n\nconst topAppendix = 'top'\nconst bottomAppendix = 'bottom'\nconst slotAppendix = 'slot'\nconst tooltipAppendix = 'tooltip'\nconst injectAppendix = 'inject'\nconst itemClassAppendix = 'item'\nconst typeClassAppendix = 'type'\nconst keyClassAppendix = 'key'\nconst arrayClassAppendix = 'array'\nconst propertyClassAppendix = 'prop'\n\nconst injectSlotAppendix = `${slotAppendix}-${injectAppendix}`\nconst arraySlotAppendix = `${slotAppendix}-${arrayClassAppendix}`\nconst topSlotAppendix = `${slotAppendix}-${topAppendix}`\nconst itemSlotAppendix = `${slotAppendix}-${itemClassAppendix}`\nconst bottomSlotAppendix = `${slotAppendix}-${bottomAppendix}`\nconst tooltipSlotAppendix = `${slotAppendix}-${tooltipAppendix}`\n\nconst clear = 'clear'\nconst button = 'button'\nconst treeview = 'treeview'\nconst list = 'list'\nconst focus = 'focus'\nconst blur = 'blur'\nconst append = 'append'\nconst appendOuter = 'append-outer'\nconst prepend = 'prepend'\nconst prependInner = 'prepend-inner'\n\nconst hour = 'hour'\nconst minute = 'minute'\nconst second = 'second'\n\n// symbol on drop\nconst dropEffect = 'move' // 'copy, link, move\n// Default row setting if no row-attribute defined\nconst rowDefault = { noGutters: true } // { noGutters:true, justify:'center', align:'center' }\n\n// Default col setting, overrideable by prop col or by schema.col definition\n// Default col setting, overrideable by prop flex or by schema.flex definition (flex is DEPRECATED use col instead)\nconst colDefault = { cols: 'auto' } // { cols:12, sm: 6, md:4, lg:3, xl:2}\n\n// Mapper for Autogeneration of Schema from Value\nconst defaultSchemaIfValueIsNullOrUndefined = key => ({ type: 'text', label: key })\nconst defaultSchemaIfValueIsString = key => ({ type: 'text', label: key })\nconst defaultSchemaIfValueIsNumber = key => ({ type: 'number', label: key })\nconst defaultSchemaIfValueIsBoolean = key => ({ type: 'checkbox', label: key })\n// Menu triggered DateTimePicker Default\nconst defaultPickerSchemaText = { type: 'text', readonly: true }\nconst defaultPickerSchemaMenu = { closeOnContentClick: false, transition: 'scale-transition', nudgeRight: 32, maxWidth: '290px', minWidth: '290px' }\n// type wrap or group - if no typeInt defined take default\nconst defaultInternGroupType = 'v-card'\n//\nexport default {\n  name: 'VFormBase',\n  props: {\n    id: {\n      type: String,\n      default: defaultID\n    },\n    rootId: {\n      type: String,\n      default: defaultID\n    },\n    row: {\n      type: [Object]\n    },\n    col: {\n      type: [Object, Number, String]\n    },\n    flex: {\n      type: [Object, Number, String]\n    },\n    value: {\n      type: [Object, Array],\n      default: () => null\n    },\n    model: {\n      type: [Object, Array],\n      default: () => ({})\n    },\n    schema: {\n      type: [Object, Array],\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      flatCombinedArray: [],\n      clear,\n      button,\n      treeview,\n      list,\n      focus,\n      blur,\n      append,\n      appendOuter,\n      prepend,\n      prependInner,\n      hour,\n      minute,\n      second\n    }\n  },\n  computed: {\n    valueIntern () {\n      // use <formbase :model=\"myData\" />  ->  legacy code <formbase :value=\"myData\" />\n      const model = this.model || this.value\n      this.updateArrayFromState(model, this.schema)\n      return model\n    },\n    parent () {\n      let p = this\n      if (p.$parent && p.$parent.$parent) {\n        while (p.id.startsWith(p.$parent.$parent.id + '-')) {\n          p = p.$parent.$parent\n        }\n      }\n      return p\n    },\n    index () {\n      const m = this.id && this.id.match(/\\d+/g)\n      return m ? m.map(Number) : null\n    },\n    getRow () {\n      return this.row || rowDefault\n    },\n    flatCombinedArraySorted () {\n      return orderBy(this.flatCombinedArray, ['schema.sort'], [orderDirection])\n    },\n    storeStateData () {\n      this.updateArrayFromState(this.valueIntern, this.schema)\n      return this.valueIntern\n    },\n    storeStateSchema () {\n      this.updateArrayFromState(this.valueIntern, this.schema)\n      return this.schema\n    }\n  },\n  watch: {\n    schema: function (newSchema) {\n      this.rebuildArrays(this.valueIntern, newSchema)\n      this.schema = newSchema\n    }\n  },\n  methods: {\n    // MAP TYPE\n    mapTypeToComponent (type) {\n      // merge global registered components into typeToComponent Object\n      const allTypeComponents = { ...typeToComponent, ...Vue.options.components }\n      // const typeToComponent -> maps type to according v-component\n      // ie. schema:{ type:'password', ... } to specific vuetify-control or default to v-text-field'\n      return allTypeComponents[type] ? allTypeComponents[type] : `v-${type}`\n    },\n    // CHECK FOR TYPE: DATE, TIME OR COLOR and EXT: TEXT\n    isDateTimeColorTypeAndExtensionText (obj) {\n      return isPicker.includes(obj.schema.type) && obj.schema.ext === 'text'\n    },\n    // CHECK FOR EXT: DATE, TIME OR COLOR\n    isDateTimeColorExtension (obj) {\n      return isPicker.includes(obj.schema.ext)\n    },\n    // BIND SCHEMA TEXT OPTIONS\n    bindOptions (b) {\n      // schema.options in RADIO/BUTTON\n      return isString(b) ? { value: b, label: b } : b\n    },\n    bindSchemaText (obj) {\n      return { ...defaultPickerSchemaText, ...obj.schema.text }\n    },\n    bindSchemaMenu (obj) {\n      return { ...defaultPickerSchemaMenu, ...obj.schema.menu }\n    },\n    bindSchema (obj) {\n      return obj.schema\n    },\n    suspendClickAppend (obj) {\n      // select|combobox|autocomplete -> suspend 'click:append' for working down arrow\n      return /(select|combobox|autocomplete)/.test(obj.schema.type) ? '' : 'click:append'\n    },\n    searchInputSync (obj) {\n      // schema.searchInput ->   bind 'search-input'\n      return (typeof obj.schema.searchInput !== 'undefined') ? 'search-input' : ''\n    },\n\n    // EXT TYPE\n    checkExtensionType (obj) {\n      // For native <INPUT> type use prop 'ext'\n      // { type:'text', ext:'range', ... } -> use native Input Type 'range' instead of slider\n      // { type:'text', ext:'number', ...} -> use native Input Type 'number'\n      return obj.schema.ext || obj.schema.type\n    },\n    // V-INTERN TYPE\n    checkInternType (obj) {\n      // If vuetify component needs a 'type' prop for working  - ie. datepicker uses type:'month'\n      // { type:'date', ext:'text', typeInt:'month' ...} -> use v-date-picker menu with intern Type 'month'\n      return obj.schema.typeInt || obj.schema.type\n    },\n    checkInternGroupType (obj) {\n      //  in type 'wrap|group' you can define with typeInt: a component as group - schema: { group1: { type:'wrap', typeInt:'v-card', ... } ...}\n      const typeInt = obj.schema.typeInt || defaultInternGroupType\n      return typeInt.startsWith('v-') ? typeInt : `v-${typeInt}`\n    },\n    // GET ITERATION KEY FOR TYPE ARRAY\n    getKeyForArray (id, obj, item, index) {\n      // IMPORTANT if you want to add or remove items in type:'array'\n      // more Info ->\n      // https://forum.vuejs.org/t/after-splicing-an-object-wrong-item-disappears-from-view/9247/4\n      // https://stackoverflow.com/questions/45655090/vue-array-splice-removing-wrong-item-from-list\n\n      // create for iteration v-for an uniqe key from each object in array using index and time.hash\n      // or define your key index by defining a key property\n      // MODEL\n      // arrayTasks: [{ trace:'100', label:'A'}, ...  ]\n      // SCHEMA\n      // arrayTasks: { type:'array', schema:{ ... } }                                                      DEFAULT KEY -> KEY id-key-index   'arrayTasks-0'\n      // arrayTasks: { type:'array', key:'trace', schema:{ trace: { type:'text'}, ... } }                              -> KEY trace            100\n      // arrayTasks: { type:'array', key:['trace','label'], schema:{ trace: { type:'text'}, label: { type:'text'} } }  -> KEY trace_label      100_A\n\n      // IMPORTANT! Key should not contain an EDITABLE prop, because of re-iteration on any change\n\n      const k = obj.schema.key\n      return k ? Array.isArray(k) ? k.map(i => item[i]).join('_') : item[k] : (!isNaN(index)) ? `${id}-${obj.key}-${index}` : index\n    },\n    //\n    // GET IMG SOURCE\n    getImageSource (obj) {\n      // if exist get source from src otherwise join schema.base & value & schema.tail\n      return obj.schema.src ? obj.schema.src : `${obj.schema.base}${obj.value}${obj.schema.tail}`\n    },\n    //\n    // ICON\n    getIconValue (obj) {\n      // icon: try schema.label or if undefined use value\n      return obj.schema.label ? obj.schema.label : this.setValue(obj)\n    },\n    //\n    // TOOLTIP\n    getShorthandTooltip (schemaTooltip) {\n      // check if tooltip is typeof string ->  shorthand { bottom:true, label: obj.schema.tooltip} otherwise take original object\n      return isString(schemaTooltip) ? { bottom: true, label: schemaTooltip } : schemaTooltip\n    },\n    getShorthandTooltipLabel (schemaTooltip) {\n      // check if tooltip is typeof string ->  return Label\n      return isString(schemaTooltip) ? schemaTooltip : schemaTooltip && schemaTooltip.label\n    },\n    //\n    // FORM SLOTS\n    getFormTopSlot () {\n      // Slot for Top Line in Formbase -> 'slot-formbase-top'\n      return `${topSlotAppendix}-${this.id}`\n    },\n    getFormBottomSlot () {\n      // Slot for Bottom Line in Formbase -> 'slot-formbase-bottom'\n      return `${bottomSlotAppendix}-${this.id}`\n    },\n    //\n    // KEY SLOTS\n    getKeyInjectSlot (obj, inject) {\n      // get slot starting with 'slot-inject' and inject verb 'thumb-label'   -> 'slot-inject-thumb-label-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${injectSlotAppendix}-${inject}-${keyClassAppendix}`)\n    },\n    getKeyTopSlot (obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-top'  -> 'slot-top-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${topSlotAppendix}-${keyClassAppendix}`)\n    },\n    getKeyItemSlot (obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-item'  -> 'slot-item-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${itemSlotAppendix}-${keyClassAppendix}`)\n    },\n    getKeyBottomSlot (obj) {\n      // get Key specific name by replacing '.' with '-' and prepending 'slot-bottom'  -> 'slot-bottom-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${bottomSlotAppendix}-${keyClassAppendix}`)\n    },\n    getKeyTooltipSlot (obj) {\n      // matches Key specific Tooltip | name by replacing '.' with '-' and prepending 'slot-bottom'  -> 'slot-tooltip-key-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${tooltipSlotAppendix}-${keyClassAppendix}`)\n    },\n    getTooltipSlot (obj) {\n      // default tooltip slot matches all keys\n      return `${tooltipSlotAppendix}`\n    },\n    //\n    // ARRAY SLOTS\n    getArrayTopSlot (obj) {\n      // slot each item from array  -> 'slot-top-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${topSlotAppendix}-${arrayClassAppendix}`)\n    },\n    getArrayItemSlot (obj) {\n      // slot each item from array  -> 'slot-top-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${itemSlotAppendix}-${arrayClassAppendix}`)\n    },\n    getArrayBottomSlot (obj) {\n      // slot each item from array   -> 'slot-bottom-array-formbase-address-city'\n      return this.getKeyClassNameWithAppendix(obj, `${bottomSlotAppendix}-${arrayClassAppendix}`)\n    },\n    //\n    // TYPE SLOTS\n    getTypeTopSlot (obj) {\n      // get Type specific slot name  -> 'slot-top-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, `${topSlotAppendix}-${typeClassAppendix}`)\n    },\n    getTypeItemSlot (obj) {\n      // get Type specific slot name  -> 'slot-item-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, `${itemSlotAppendix}-${typeClassAppendix}`)\n    },\n    getTypeBottomSlot (obj) {\n      // get Type specific slot name  -> 'slot-bottom-type-radio'\n      return this.getTypeClassNameWithAppendix(obj, `${bottomSlotAppendix}-${typeClassAppendix}`)\n    },\n    //\n    // CLASS Names\n    getPropertyClassNameWithAppendix (obj, appendix) {\n      // get PROP specific name by app-/prepending 'appendix-' and replacing '.' with '-' in nested key path  -> 'controls switch'\n      return obj.key ? obj.key.split(pathDelimiter).map(s => `${appendix ? appendix + classKeyDelimiter : ''}${s}`).join(' ') : ''\n    },\n    getPropertyClassName (obj) {\n      return this.getPropertyClassNameWithAppendix(obj, propertyClassAppendix)\n    },\n    getKeyClassNameWithAppendix (obj, appendix) {\n      // get KEY specific name by app-/prepending 'appendix-' and replacing '.' with '-' in nested key path  -> 'top-slot-address-city'\n      return `${appendix ? appendix + classKeyDelimiter : ''}${this.id ? this.id + classKeyDelimiter : ''}${obj.key.replace(/\\./g, '-')}`\n      // return `${appendix ? appendix + classKeyDelimiter : ''}${obj.key.replace(/\\./g, '-')}`\n    },\n    getKeyClassName (obj) {\n      return this.getKeyClassNameWithAppendix(obj, keyClassAppendix)\n    },\n    getTypeClassNameWithAppendix (obj, appendix) {\n      // get TYPE specific class name by prepending '-type' -> 'type-checkbox'\n      return `${appendix ? appendix + classKeyDelimiter : ''}${this.id ? this.id + classKeyDelimiter : ''}${obj.schema.type}`\n      // return `${appendix + classKeyDelimiter}${obj.schema.type}`\n    },\n    getTypeClassName (obj) {\n      return this.getTypeClassNameWithAppendix(obj, typeClassAppendix)\n    },\n    getClassName (obj) {\n      // combines all into a single classname\n      // class => ie. 'item type-checkbox key-address-zip prop-adress prop-zip'\n      return `${itemClassAppendix} ${this.getTypeClassName(obj)} ${this.getKeyClassName(obj)} ${this.getPropertyClassName(obj)}`\n    },\n    //\n    // GRID\n    gridMapper (obj, prepender) {\n      if (obj) {\n        ['sm', 'md', 'lg', 'xl'].map(k => {\n          if (obj[k]) { obj[prepender + k] = obj[k]; delete obj[k] }\n        })\n      }\n    },\n    gridReplaceXS (obj, replacer) {\n      // see vuetify Grid - replace Prop XS -V1.5 with COLS, ORDER, OFFSET - V2.0\n      // xs must be replaced in new Vuetify 2.0 Grid with cols, offset, order\n      if (obj && obj.xs) { obj[replacer] = obj.xs; delete obj.xs }\n    },\n    getGridAttributes (obj) {\n      // FLEX DEPRECATED use COL instead of FLEX\n      // flex:{ xs|sm|md|lg } - value:number|string\n\n      // col:{ cols|sm|md|lg|xl } - value:number|string\n      // order:{ order|sm|md|lg|xl|order-sm|order-md|order-lg|order-xl } - value:number|string\n      // offset:{ offset|sm|md|lg|xl|offset-sm|offset-md|offset-lg|offset-xl } - value:number|string\n\n      const colSchema = obj.schema.col || obj.schema.flex\n\n      const colAttr = this.col || this.flex || colDefault\n\n      const colObject = colSchema\n        // if available use schema definition of cols\n        ? (isPlainObject(colSchema) ? colSchema : isNumber(colSchema) || isString(colSchema) ? { cols: colSchema } : { cols: 'auto' })\n        // else use formbase attribute definition of cols\n        : colAttr ? (isPlainObject(colAttr) ? colAttr : isNumber(colAttr) || isString(colAttr) ? { cols: colAttr } : { cols: 'auto' })\n        // if no definition set cols to 'auto'\n          : { cols: 'auto' }\n\n      this.gridReplaceXS(colObject, 'cols')\n\n      // schema definition of offset\n      const offset = obj.schema.offset\n      const offsetObject = offset ? (isPlainObject(offset) ? offset : { offset }) : offset\n      this.gridMapper(offsetObject, 'offset-')\n      this.gridReplaceXS(offsetObject, 'offset')\n\n      // schema definition of offset\n      const order = obj.schema.order\n      const orderObject = order ? (isPlainObject(order) ? order : { order }) : order\n      this.gridMapper(orderObject, 'order-')\n      this.gridReplaceXS(orderObject, 'order')\n\n      return { ...colObject, ...offsetObject, ...orderObject }\n    },\n    getRowGroupOrArray (obj) {\n      return obj.schema.row || this.row || rowDefault\n    },\n    getColGroupOrArray (obj) {\n      return obj.schema.col || this.col || colDefault\n    },\n    //\n    // SANITIZE SLOTS\n    getInjectedScopedSlots (id, obj) {\n      // <template #slot-inject-thumb-label-key-formbase-path-to-mykey />\n      // extract the verb 'thumb-label' from Slots starting with 'slot-inject' and matching [component-id] and [key]\n      const rx = new RegExp(`${injectSlotAppendix}-(.*?)-${keyClassAppendix}`)\n      return Object.keys(this.$scopedSlots)\n        .filter(s => (s.includes(`${id}${classKeyDelimiter}${obj.key.replace(/\\./g, '-')}`) && s.includes(injectSlotAppendix)))\n        .map(i => i.match(rx)[1])\n    },\n    //\n    // Map Values coming FROM Control, TO Control or DROP on Control\n    toCtrl (params) {\n      // signature params { value, obj, data, schema }\n      //\n      // manipulate value going to control, function must return a (modified) value\n      // schema:{ name: { type:'text', toCtrl: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      // return isFunction(params.obj.schema && params.obj.schema.toCtrl) ? params.obj.schema.toCtrl(params) : params.value\n      return params.obj.schema && isFunction(params.obj.schema.toCtrl) ? params.obj.schema.toCtrl(params) : params.value\n    },\n    fromCtrl (params) {\n      // signature params { value, obj, data, schema }\n      //\n      // manipulate updated value from control, function must return a (modified) value\n      // schema:{ name: { type:'text', fromCtrl: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      return params.obj.schema && isFunction(params.obj.schema.fromCtrl) ? params.obj.schema.fromCtrl(params) : params.value\n    },\n    dropCtrl (params) {\n      // signature params { value, obj, dragObject, dragEvent, event,data, schema }\n      //\n      // manipulate dropped value from control, function must return a (modified) value\n      // schema:{ name: { type:'text', drop: ( {value} ) => value && value.toUpperCase, ... }, ... }\n      return params.obj.schema && isFunction(params.obj.schema.drop) ? params.obj.schema.drop(params) : params.value\n    },\n    //\n    // Drag / Drop / DropValue\n    dragstart (event, obj) {\n      if (!obj.schema.drag) return\n\n      event.dataTransfer.dropEffect = dropEffect\n      event.dataTransfer.effectAllowed = dropEffect\n\n      const dragEvent = this.onEvent(event, obj)\n      event.dataTransfer.setData('text', JSON.stringify(dragEvent))\n    },\n\n    dragover (event, obj) { return obj.schema.drop ? event.preventDefault() : null },\n\n    drop (event, obj) {\n      if (!obj.schema.drop) return event.preventDefault()\n      // get dragEvent and dragEvent.obj\n      obj.dragEvent = JSON.parse(event.dataTransfer.getData('text'))\n\n      // no drop on drag object\n      if (obj.key === obj.dragEvent.obj.key && obj.id === obj.dragEvent.id) return event.preventDefault()\n      // handle schema.drop function\n      if (isFunction(obj.schema.drop)) obj.value = this.dropValue(obj, event)\n\n      this.onEvent(event, obj)\n\n      event.preventDefault()\n    },\n\n    dropValue (obj, event) {\n      return this.dropCtrl({ value: obj.dragEvent.value, obj, event, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    //\n    // Set Value\n    setValue (obj, type) {\n      // Use 'schema.toCtrl' Function for setting a modified Value\n      // __log(\n      //     obj.schema.name,\n      //     this.storeStateData,\n      //     // obj.value\n      // )\n      return obj.schema.type === 'wrap'\n        ? this.toCtrl({ value: this.storeStateData, obj, data: this.storeStateData, schema: this.storeStateSchema })\n        : this.toCtrl({ value: obj.value, obj, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    //\n    // EVENTS Get Value from Input & other Events\n    onInput (value, obj, type = 'input') {\n      // Value after change in Control\n      value = this.fromCtrl({ value, obj, data: this.storeStateData, schema: this.storeStateSchema })\n      // harmonize undefined or empty strings => null, because 'clearable' in vuetify controls resets to null and not to empty string!\n      value = !value || value === '' ? null : value\n      // if schema type is number convert to number\n      value = obj.schema.type === 'number' ? Number(value) : value\n      // update deep nested prop(key) with value\n      this.setObjectByPath(this.storeStateData, obj.key, value)\n\n      const emitObj = {\n        on: type,\n        id: this.id,\n        index: this.index,\n        params: { index: this.index, lastValue: obj.value },\n        key: obj.key,\n        value,\n        obj,\n        data: this.storeStateData,\n        schema: this.storeStateSchema,\n        parent: this.parent\n      }\n      this.emitValue(type, emitObj)\n      return emitObj\n    },\n    onEvent (event = {}, obj, tag) {\n      const text = event && event.srcElement && event.srcElement.innerText\n      const model = obj.schema.model\n      const open = obj.schema.open\n      const index = this.index\n      // avoid circular JSON in dragstart\n      const parent = event.type !== 'dragstart' ? this.parent : undefined\n\n      const emitObj = {\n        on: event.type,\n        id: this.id,\n        index,\n        params: { text, tag, model, open, index },\n        key: obj.key,\n        value: obj.value,\n        obj,\n        event,\n        data: this.storeStateData,\n        schema: this.storeStateSchema,\n        parent\n      }\n\n      delay(() => { this.emitValue(event.type, emitObj), onEventDelay })\n\n      return emitObj\n    },\n    onClickOutside (event, obj) {\n      if (!obj.schema || !obj.schema.clickOutside) return\n      if (isFunction(obj.schema.clickOutside)) return obj.schema.clickOutside(obj, event)\n      this.emitValue('clickOutside', { on: 'clickOutside', id: this.id, key: obj.key, value: obj.value, obj, params: { x: event.clientX, y: event.clientY }, event, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    onIntersect (entries, observer, obj) {\n      const isIntersecting = entries[0].isIntersecting\n      const index = this.index\n      this.emitValue('intersect', { on: 'intersect', id: this.id, index, key: obj.key, value: obj.value, obj, params: { isIntersecting, entries, observer }, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    onSwipe (tag, obj) {\n      this.emitValue('swipe', { on: 'swipe', id: this.id, key: obj.key, value: obj.value, obj, params: { tag }, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    onResize (event) {\n      this.emitValue('resize', { on: 'resize', id: this.id, params: { x: window.innerWidth, y: window.innerHeight }, event, data: this.storeStateData, schema: this.storeStateSchema })\n    },\n    //\n    // EMIT EVENT\n    emitValue (event, val) {\n      const emitEvent = change.includes(event) ? 'change' : watch.includes(event) ? 'watch' : mouse.includes(event) ? 'mouse' : display.includes(event) ? 'display' : event\n\n      if (this.$listeners[`${emitEvent}:${this.id}`]) {\n        this.deprecateEventCustomID(emitEvent)\n        this.deprecateCombinedEvents(emitEvent, event)\n        this.$emit(`${emitEvent}:${this.id}`, val) // listen to specific event only\n      } else if (this.$listeners[`${emitEvent}`]) {\n        this.deprecateCombinedEvents(emitEvent, event)\n        this.$emit(emitEvent, val) // listen to specific event only\n      } else if (this.$listeners[`${event}:${this.id}`]) {\n        this.deprecateEventCustomID(event)\n        this.$emit(`${event}:${this.id}`, val) // listen to specific event only\n      } else if (this.$listeners[`${event}`]) {\n        this.$emit(event, val) // listen to specific event only\n      }\n    },\n    deprecateEventCustomID (ev) {\n      console.warn(`--- DEPRECATION ${ev}:${this.id}: ----------------------------------------------------------------------------`)\n      console.warn(`<v-form-base  @${ev}:${this.id}=\"handler\" /> is deprecated use simplified version <v-form-base  @${ev}=\"handler\" />`)\n      console.warn('---------------------------------------------------------------------------------------------')\n    },\n    deprecateCombinedEvents (emitEvent, event) {\n      if (emitEvent !== event) {\n        console.warn('--- DEPRECATION Combined Listener:  --------------------------------------------------------------------------')\n        console.warn(`Combined Event-Listener '${emitEvent}' have been removed for better comprehensibility and simplification`)\n        console.warn('Please use separate listener for each event like <v-form-base  @focus=\"handler\" @input=\"handler\" @blur=\"handler\"/>')\n        console.warn('---------------------------------------------------------------------------------------------')\n      }\n    },\n    //\n    // PREPARE ARRAYS DATA & SCHEMA\n    setObjectByPath (object, path, value) {\n      // resolves chained keys (like 'user.address.street') on an object and set the value\n      const pathArray = path.split(pathDelimiter)\n      pathArray.forEach((p, ix) => {\n        if (ix === pathArray.length - 1) this.$set(object, p, value)\n        object = object[p]\n      })\n    },\n    updateArrayFromState (data, schema) {\n      this.flatCombinedArray.forEach(obj => {\n        obj.value = get(data, obj.key, null) // get - lodash\n        obj.schema = get(schema, obj.key, null) // get - lodash\n      })\n    },\n    sanitizeShorthandType (key, schema) {\n      // if key in schema is string only, then handle shorthand definition\n      // schema:{ name:'text' }  => schema:{ name: { type:'text', label: 'name' }\n      return isString(schema) ? { type: schema, label: key } : schema\n    },\n    flattenObjects (dat = {}, sch) {\n      const data = {}\n      const schema = {}\n      // Organize Formular using Schema not Data\n      Object.keys(sch).forEach(key => {\n        // convert string definition of name:'text' into object name:{type:'text'}\n        sch[key] = this.sanitizeShorthandType(key, sch[key])\n\n        const bothArray = Array.isArray(dat[key]) && Array.isArray(sch[key])\n        const datObjectWithoutSchemaType = isPlainObject(dat[key]) && !sch[key].type\n        const datObjectContainsTypeKey = (dat[key] && dat[key].type && (sch[key] && sch[key].type))\n        const notInstanceOfFileObject = !(dat[key] instanceof File)\n\n        if (bothArray || datObjectWithoutSchemaType || (datObjectContainsTypeKey && notInstanceOfFileObject)) {\n          const { data: flatData, schema: flatSchema } = this.flattenObjects(dat[key], sch[key])\n          Object.keys(flatData).forEach(ii => {\n            data[key + pathDelimiter + ii] = flatData[ii]\n            schema[key + pathDelimiter + ii] = flatSchema[ii]\n          })\n        } else {\n          data[key] = dat[key]\n          schema[key] = sch[key]\n        }\n      })\n      return { data, schema }\n    },\n    combineObjectsToArray ({ data, schema }) {\n      const arr = []\n      Object.keys(schema).forEach(key => {\n        if (!isPlainObject(schema[key])) {\n          console.warn(`Schema '${JSON.stringify(schema)}' of Prop '${key}' must be a string with value of type key:'text' or a plainobject with at least key:{ type:'text'} definition.  Prop '${key}' will be ignored!`)\n          return\n        }\n        arr.push({ key, value: data[key], schema: schema[key] })\n      })\n      return arr\n    },\n    flattenAndCombineToArray (data, schema) {\n      // flatten nested structure of both objects 'data' & 'schema' ...\n      const flattenedObjects = this.flattenObjects(data, schema)\n      // ... and combine them to an array\n      return this.combineObjectsToArray(flattenedObjects)\n    },\n    autogenerateSchema (value) {\n      // generate a minimal default schema from value\n      let schema = JSON.stringify(value, (key, val) => val === undefined ? null : val)\n      schema = JSON.parse(schema, (key, val) => {\n        if (val === null || val === undefined) return defaultSchemaIfValueIsNullOrUndefined(key)\n        if (typeof val === 'string') return defaultSchemaIfValueIsString(key)\n        if (typeof val === 'number') return defaultSchemaIfValueIsNumber(key)\n        if (typeof val === 'boolean') return defaultSchemaIfValueIsBoolean(key)\n        return val\n      })\n      // assign root props to avoid manipulating prop: schema\n      Object.keys(schema).forEach(key => this.schema[key] = schema[key])\n    },\n\n    tryAutogenerateModelStructure (model, schema) {\n      // generate or complete an empty model based on schema structure\n\n      Object.keys(schema).forEach(key => {\n        // model must be at least an empty Object. It doesn't work with 'null', 'undefined' or any 'primitive value'\n        // Autogeneration from Schema works only if model is an empty Object\n        // if model is NOT an empty Object, no action is applied, otherwise data in model could be changed or modified\n        if (!isEmpty(model[key])) return\n\n        const val = schema[key]\n        if (val.type === 'group') {\n          this.$set(model, key, {})\n          this.tryAutogenerateModelStructure(model[key], val.schema)\n        } else\n        if (val.type === 'array') {\n          this.$set(model, key, [])\n          this.tryAutogenerateModelStructure(model[key], val.schema)\n        } else\n        if (val.type === 'list') {\n          this.$set(model, key, [])\n        } else\n        if (isPlainObject(val) && !val.type) {\n          this.$set(model, key, {})\n          this.tryAutogenerateModelStructure(model[key], val)\n        }\n        if (Array.isArray(val) && !val.type) {\n          this.$set(model, key, [])\n          this.tryAutogenerateModelStructure(model[key], val)\n        }\n      })\n    },\n    rebuildArrays (model, schema) {\n      // undefined, null or primitive value for model can't work because you need reference to object for working on\n      if (!model) throw 'Property \\'model\\' is null or undefined. Use \\'<v-form-base :model=\"myModel\" :schema=\"mySchema\" />\\'. myModel must be at least an empty Object.'\n\n      // noise if async loading\n      if (isEmpty(schema) && isEmpty(model)) {\n        console.warn('At least one of the properties \\'model\\' or \\'schema\\' in <v-form-base /> must be at least an empty Object. Ignore this Warning on async loading \\'model\\' or \\'schema\\' ')\n        // return\n      }\n      // generate/complete structure of model\n      this.tryAutogenerateModelStructure(model, schema)\n\n      // no schema defined or empty -> autogenerate basic schema\n      if (isEmpty(schema)) this.autogenerateSchema(model)\n\n      // create flatted working array from schema and value\n      this.flatCombinedArray = this.flattenAndCombineToArray(this.storeStateData, this.storeStateSchema)\n    }\n    //\n  },\n  created () {\n    this.rebuildArrays(this.valueIntern, this.schema)\n  }\n}\n</script>\n"],"mappings":";;EAiCqEA,IAAI,EAAC;AAAmC;;EAMhBA,IAAI,EAAC;AAAgC;;EAGjF,SAAM;AAAW;8BAA4DC,mBAAA,CAAI;8BAAyEA,mBAAA,CAAI;8BAAgFA,mBAAA,CAAI;8BAA+EA,mBAAA,CAAI;8BAA6EA,mBAAA,CAAI;8BAA2EA,mBAAA,CAAI;+BAA2EA,mBAAA,CAAI;+BAA0FA,mBAAA,CAAI;+BA4VhoBA,mBAAA;EAAKD,IAAI,EAAC;AAA0C,GAAC;;;;+tIArWxD,GAAAC,mBAAA,QAAAC,UAAA,G,iBAA8C,kLAE/C,GAAAC,YAAA,CAAAC,gBAAA;IAAOJ,IAAI,EAAC;EAAkC;wBAAC;MAAA,OAEvB,C,iBAFuB,0MAEvB,GAAAG,YAAA,CAAAC,gBAAA;QAAOJ,IAAI,EAAC;MAAiC;4BAAC;UAAA,OAE7C,C,iBAF6C,iNAE7C,GAAAC,mBAAA,QAAAI,UAAA,G,iBAA2C,kKAGvF,GAAAJ,mBAAA,CAAguB,OAAhuBK,UAAguB,G,iBAAzsB,UAA4B,GAAAC,gBAAA,CAAEC,IAAA,CAAAC,GAAG,IAAE,MAAwB,iBAAAC,UAAI,E,iBAAA,WAA6B,GAAAH,gBAAA,CAAEI,QAAA,CAAAC,cAAc,MAAI,MAAwB,iBAAAC,UAAI,E,iBAAA,aAA+B,GAAAN,gBAAA,CAAEI,QAAA,CAAAG,gBAAgB,CAACN,IAAA,CAAAC,GAAG,KAAG,MAAwB,iBAAAM,UAAI,E,iBAAA,YAA8B,GAAAR,gBAAA,CAAEI,QAAA,CAAAK,gBAAgB,CAACR,IAAA,CAAAC,GAAG,KAAG,MAAwB,iBAAAQ,UAAI,E,iBAAA,WAA6B,GAAAV,gBAAA,CAAEI,QAAA,CAAAO,eAAe,CAACV,IAAA,CAAAC,GAAG,KAAG,MAAwB,iBAAAU,UAAI,E,iBAAA,UAA4B,GAAAZ,gBAAA,CAAEI,QAAA,CAAAS,cAAc,CAACZ,IAAA,CAAAC,GAAG,KAAG,MAAwB,iBAAAY,UAAI,E,iBAAA,YAA8B,GAAAd,gBAAA,CAAEI,QAAA,CAAAW,YAAY,CAACd,IAAA,CAAAC,GAAG,KAAG,MAAwB,iBAAAc,WAAI,E,iBAAA,aAA+B,GAAAhB,gBAAA,CAAEI,QAAA,CAAAa,sBAAsB,CAACC,MAAA,CAAAC,EAAE,EAAElB,IAAA,CAAAC,GAAG,KAAG,MAAwB,iBAAAkB,WAAI,E,iBAAA,UAA4B,GAAApB,gBAAA,CAAEI,QAAA,CAAAiB,QAAQ,CAACpB,IAAA,CAAAC,GAAG,KAAG,MAAsB,gB,oBAAM,qinBA4VzsB,GAAAoB,WAAA,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}