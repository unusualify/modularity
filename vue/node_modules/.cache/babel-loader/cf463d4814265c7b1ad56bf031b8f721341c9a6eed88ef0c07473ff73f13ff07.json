{"ast":null,"code":"import _defineProperty from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport { mapState } from 'vuex';\nimport { DATATABLE, FORM, ALERT } from '@/store/mutations';\nimport ACTIONS from '@/store/actions';\nimport { DatatableMixin } from '@/mixins';\nexport default {\n  mixins: [DatatableMixin],\n  data: function data() {\n    return {\n      formModalActive: false,\n      dialogActive: false,\n      langs: ['tr', 'en'],\n      cellInput: ''\n    };\n  },\n  computed: {\n    dialogDescription: function dialogDescription() {\n      return this.$t('confirm-deletion', {\n        route: this.transName.toLowerCase(),\n        name: this.editedItem[this.titleKey]\n      });\n    },\n    transName: function transName() {\n      return this.$t('modules.' + this.name.toLowerCase());\n    }\n  },\n  created: function created() {\n    // __log(this.props)\n    // __log(this.createOnModal, this.editOnModal)\n    // __log(\n    //   window[process.env.VUE_APP_NAME].ENDPOINTS.create\n\n    // )\n  },\n  watch: {\n    formModalActive: function formModalActive(val) {\n      val || this.resetEditedItem();\n    },\n    dialogActive: function dialogActive(val) {\n      val || this.resetEditedItem();\n    }\n  },\n  methods: {\n    deleteRow: function deleteRow() {\n      var _this = this;\n      var self = this;\n      this.$store.dispatch(ACTIONS.DELETE_ITEM, {\n        id: this.editedItem.id,\n        callback: function callback() {\n          _this.$refs.dialog.closeModal();\n        },\n        errorCallback: function errorCallback() {}\n      });\n    },\n    columnChanged: function columnChanged(value) {\n      this.cellInput = value;\n    },\n    /**\n       * @param {string} key - related key of object\n       */\n    updateCell: function updateCell(key) {\n      this.$store.commit(ALERT.CLEAR_ALERT);\n      if (this.editedItem[key] !== this.cellInput) {\n        var data = _defineProperty({\n          id: this.editedItem.id\n        }, key, this.cellInput);\n        this.$store.dispatch(ACTIONS.SAVE_FORM, {\n          item: data\n        });\n      }\n    },\n    changeSort: function changeSort(column) {\n      if (this.pagination.sortBy === column) {\n        this.pagination.descending = !this.pagination.descending;\n      } else {\n        this.pagination.sortBy = column;\n        this.pagination.descending = false;\n      }\n    },\n    columnValueList: function columnValueList(val) {\n      return this.elements.map(function (d) {\n        return d[val];\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}