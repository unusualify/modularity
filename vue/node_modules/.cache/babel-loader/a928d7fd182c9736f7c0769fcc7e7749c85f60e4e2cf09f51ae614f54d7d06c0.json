{"ast":null,"code":"import htmlClasses from '@/utils/htmlClasses';\nimport { h } from 'vue';\nexport default {\n  render() {\n    return h('v-dialog', {\n      modelValue: this.dialog,\n      'onUpdate:modelValue': value => this.$emit('update:modelValue', value)\n    }, {\n      activator: (on, attrs) => {\n        h('slot', {\n          name: 'activator',\n          attrs: this.$attrs\n        });\n      }\n    });\n  },\n  props: {\n    value: {\n      type: Boolean\n    },\n    name: {\n      type: String,\n      default: \"Item\"\n    },\n    transition: {\n      type: String,\n      default: \"bottom\"\n    },\n    fullScreen: {\n      type: Boolean,\n      default: false\n    },\n    persistent: {\n      type: Boolean,\n      default: false\n    },\n    scrollable: {\n      type: Boolean,\n      default: false\n    },\n    widthType: {\n      type: String,\n      default: \"md\"\n    }\n  },\n  data() {\n    return {\n      // dialog: this.value,\n      widths: {\n        sm: \"300px\",\n        md: \"500px\",\n        lg: \"750px\"\n      },\n      width: this.widthType,\n      modalClass: htmlClasses.modal,\n      firstFocusableEl: null,\n      lastFocusableEl: null\n    };\n  },\n  computed: {\n    dialog: {\n      get() {\n        return this.value;\n      },\n      set(value) {\n        __log('modal->dialog->setter', value);\n        this.$emit('input', value);\n      }\n    },\n    full: {\n      get() {\n        return this.fullScreen;\n      },\n      set(value) {\n        this.$emit('screenListener', this.fullScreen);\n      }\n    },\n    togglePersistent() {\n      return this.persistent;\n    },\n    toggleFullScreen() {\n      return this.full;\n    },\n    toggleScrollable() {\n      return this.scrollable;\n    },\n    modalWidth() {\n      return this.widths[this.width];\n    }\n  },\n  watch: {},\n  methods: {\n    toggle() {\n      this.dialog = !this.dialog;\n    },\n    close() {\n      this.dialog = false;\n    },\n    open() {\n      this.dialog = true;\n    },\n    confirm() {\n      this.dialog = false;\n    },\n    attrs(attrs) {\n      __log(attrs);\n      return attrs;\n    }\n  },\n  beforeDestroy: function () {},\n  created() {\n    // setInterval((self) => {\n    //     __log(self.dialog)\n    // }, 1000, this)\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}