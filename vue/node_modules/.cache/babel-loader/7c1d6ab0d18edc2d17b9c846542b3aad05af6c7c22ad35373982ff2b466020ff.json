{"ast":null,"code":"import _defineProperty from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _methods;\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport { getCurrentInstance } from 'vue';\nimport { mapState } from 'vuex';\nimport { MEDIA_LIBRARY } from '@/store/mutations';\nimport api from '../../store/api/media-library';\nimport ACTIONS from '@/store/actions';\nimport UEModal from './Modal.vue';\nimport scrollToY from '@/utils/scrollToY.js';\nimport FormDataAsObj from '@/utils/formDataAsObj.js';\nimport { ModalMixin } from '@/mixins';\nexport default {\n  mixins: [ModalMixin],\n  components: {\n    'ue-modal': UEModal\n  },\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n      slots = _ref.slots,\n      emit = _ref.emit;\n  } // __log(props, attrs, slots, emit)\n  ,\n\n  props: {\n    modalTitlePrefix: {\n      type: String,\n      \"default\": function _default(props) {\n        return getCurrentInstance().appContext.config.globalProperties.$trans('media-library.title', 'Media Library');\n      }\n    },\n    btnLabelSingle: {\n      type: String,\n      \"default\": function _default() {\n        return getCurrentInstance().appContext.config.globalProperties.$trans('media-library.insert', 'Insert');\n      }\n    },\n    btnLabelUpdate: {\n      type: String,\n      \"default\": function _default() {\n        return getCurrentInstance().appContext.config.globalProperties.$trans('media-library.update', 'Update');\n      }\n    },\n    btnLabelMulti: {\n      type: String,\n      \"default\": function _default() {\n        return getCurrentInstance().appContext.config.globalProperties.$trans('media-library.insert', 'Insert');\n      }\n    },\n    initialPage: {\n      type: Number,\n      \"default\": 1\n    },\n    authorized: {\n      type: Boolean,\n      \"default\": true\n    },\n    showInsert: {\n      type: Boolean,\n      \"default\": true\n    },\n    extraMetadatas: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    translatableMetadatas: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      loading: false,\n      maxPage: 20,\n      mediaItems: [],\n      selectedMedias: [],\n      gridHeight: 0,\n      page: this.initialPage,\n      tags: [],\n      lastScrollTop: 0,\n      gridLoaded: false,\n      full: true,\n      show: false\n    };\n  },\n  computed: _objectSpread({\n    renderedMediaItems: function renderedMediaItems() {\n      var _this = this;\n      return this.mediaItems.map(function (item) {\n        item.disabled = _this.filesizeMax > 0 && item.filesizeInMb > _this.filesizeMax || _this.widthMin > 0 && item.width < _this.widthMin || _this.heightMin > 0 && item.height < _this.heightMin;\n        return item;\n      });\n    },\n    currentTypeObject: function currentTypeObject() {\n      var _this2 = this;\n      return this.types.find(function (type) {\n        return type.value === _this2.type;\n      });\n    },\n    endpoint: function endpoint() {\n      return this.currentTypeObject.endpoint;\n    },\n    modalTitle: function modalTitle() {\n      if (this.connector) {\n        if (this.indexToReplace > -1) return this.modalTitlePrefix + ' – ' + this.btnLabelUpdate;\n        return this.selectedMedias.length > 1 ? this.modalTitlePrefix + ' – ' + this.btnLabelMulti : this.modalTitlePrefix + ' – ' + this.btnLabelSingle;\n      }\n      return this.modalTitlePrefix;\n    },\n    btnLabel: function btnLabel() {\n      var type = getCurrentInstance().appContext.config.globalProperties.$trans('media-library.types.single.' + this.type, this.type);\n      if (this.indexToReplace > -1) {\n        return this.btnLabelUpdate + ' ' + type;\n      } else {\n        if (this.selectedMedias.length > 1) {\n          type = getCurrentInstance().appContext.config.globalProperties.$trans('media-library.types.multiple.' + this.type, this.type);\n        }\n        return this.btnLabelSingle + ' ' + type;\n      }\n    },\n    usedMedias: function usedMedias() {\n      return this.selected[this.connector] || [];\n    },\n    selectedType: function selectedType() {\n      var self = this;\n      var navItem = self.types.filter(function (t) {\n        return t.value === self.type;\n      });\n      return navItem[0];\n    },\n    canInsert: function canInsert() {\n      var _this3 = this;\n      return !this.selectedMedias.some(function (sMedia) {\n        return !!_this3.usedMedias.find(function (uMedia) {\n          return uMedia.id === sMedia.id;\n        });\n      });\n    }\n  }, mapState({\n    connector: function connector(state) {\n      return state.mediaLibrary.connector;\n    },\n    max: function max(state) {\n      return state.mediaLibrary.max;\n    },\n    filesizeMax: function filesizeMax(state) {\n      return state.mediaLibrary.filesizeMax;\n    },\n    widthMin: function widthMin(state) {\n      return state.mediaLibrary.widthMin;\n    },\n    heightMin: function heightMin(state) {\n      return state.mediaLibrary.heightMin;\n    },\n    type: function type(state) {\n      return state.mediaLibrary.type;\n    },\n    // image, video, file\n    types: function types(state) {\n      return state.mediaLibrary.types;\n    },\n    strict: function strict(state) {\n      return state.mediaLibrary.strict;\n    },\n    selected: function selected(state) {\n      return state.mediaLibrary.selected;\n    },\n    indexToReplace: function indexToReplace(state) {\n      return state.mediaLibrary.indexToReplace;\n    }\n\n    // showModal: state => state.mediaLibrary.showModal,\n\n    // show: state => state.mediaLibrary.showModal,\n  })),\n\n  watch: {\n    type: function type() {\n      this.clearMediaItems();\n      this.gridLoaded = false;\n    }\n  },\n  methods: (_methods = {\n    // for ue-uploader\n    addMedia: function addMedia(media) {\n      var _this4 = this;\n      var index = this.mediaItems.findIndex(function (item) {\n        return item.id === media.id;\n      });\n\n      // Check of the media item exists i.e replacement\n      if (index > -1) {\n        var _loop = function _loop(mediaRole) {\n          _this4.selected[mediaRole].forEach(function (mediaCrop, index) {\n            if (media.id === mediaCrop.id) {\n              var crops = [];\n              for (var crop in mediaCrop.crops) {\n                crops[crop] = {\n                  height: media.height === mediaCrop.height ? mediaCrop.crops[crop].height : media.height,\n                  name: crop,\n                  width: media.width === mediaCrop.width ? mediaCrop.crops[crop].width : media.width,\n                  x: media.width === mediaCrop.width ? mediaCrop.crops[crop].x : 0,\n                  y: media.height === mediaCrop.height ? mediaCrop.crops[crop].y : 0\n                };\n              }\n              _this4.$store.commit(MEDIA_LIBRARY.UPDATE_MEDIAS, {\n                index: index,\n                media: _objectSpread(_objectSpread({}, media), {}, {\n                  width: media.width === mediaCrop.width ? mediaCrop.width : media.width,\n                  height: media.height === mediaCrop.height ? mediaCrop.height : media.height,\n                  crops: crops\n                }),\n                mediaRole: mediaRole\n              });\n            }\n          });\n        };\n        for (var mediaRole in this.selected) {\n          _loop(mediaRole);\n        }\n        this.$set(this.mediaItems, index, media);\n        this.selectedMedias.unshift(media);\n      } else {\n        // add media in first position of the available media\n        this.mediaItems.unshift(media);\n        this.$store.commit(MEDIA_LIBRARY.INCREMENT_MEDIA_TYPE_TOTAL, this.type);\n        // select it\n        this.updateSelectedMedias(media.id);\n      }\n    },\n    updateSelectedMedias: function updateSelectedMedias(item) {\n      var _this5 = this;\n      var shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var id = item.id;\n      var alreadySelectedMedia = this.selectedMedias.filter(function (media) {\n        return media.id === id;\n      });\n\n      // not already selected\n      if (alreadySelectedMedia.length === 0) {\n        if (this.max === 1) this.clearSelectedMedias();\n        if (this.selectedMedias.length >= this.max && this.max > 0) return;\n        if (shift && this.selectedMedias.length > 0) {\n          var lastSelectedMedia = this.selectedMedias[this.selectedMedias.length - 1];\n          var lastSelectedMediaIndex = this.mediaItems.findIndex(function (media) {\n            return media.id === lastSelectedMedia.id;\n          });\n          var selectedMediaIndex = this.mediaItems.findIndex(function (media) {\n            return media.id === id;\n          });\n          if (selectedMediaIndex === -1 && lastSelectedMediaIndex === -1) return;\n          var start = null;\n          var end = null;\n          if (lastSelectedMediaIndex < selectedMediaIndex) {\n            start = lastSelectedMediaIndex + 1;\n            end = selectedMediaIndex + 1;\n          } else {\n            start = selectedMediaIndex;\n            end = lastSelectedMediaIndex;\n          }\n          var selectedMedias = this.mediaItems.slice(start, end);\n          selectedMedias.forEach(function (media) {\n            if (_this5.selectedMedias.length >= _this5.max && _this5.max > 0) return;\n            var index = _this5.selectedMedias.findIndex(function (m) {\n              return m.id === media.id;\n            });\n            if (index === -1) {\n              _this5.selectedMedias.push(media);\n            }\n          });\n        } else {\n          var mediaToSelect = this.mediaItems.filter(function (media) {\n            return media.id === id;\n          });\n\n          // Add one media to the selected media\n          if (mediaToSelect.length) this.selectedMedias.push(mediaToSelect[0]);\n        }\n      } else {\n        // Remove one item from the selected media\n        this.selectedMedias = this.selectedMedias.filter(function (media) {\n          return media.id !== id;\n        });\n      }\n    },\n    clearSelectedMedias: function clearSelectedMedias() {\n      this.selectedMedias.splice(0);\n    },\n    // for ue-filter\n    clearFilters: function clearFilters() {\n      var self = this;\n      // reset tags\n      if (this.$refs.filter) this.$refs.filter.value = null;\n      // reset unused field\n      if (this.$refs.unused) {\n        var input = this.$refs.unused.$el.querySelector('input');\n        input && input.checked && input.click();\n      }\n      this.$nextTick(function () {\n        self.submitFilter();\n      });\n    },\n    submitFilter: function submitFilter(formData) {\n      var self = this;\n      var el = this.$refs.list;\n      // when changing filters, reset the page to 1\n      this.page = 1;\n      this.clearMediaItems();\n      this.clearSelectedMedias();\n      if (el.scrollTop === 0) {\n        self.reloadGrid();\n        return;\n      }\n      scrollToY({\n        el: el,\n        offset: 0,\n        easing: 'easeOut',\n        onComplete: function onComplete() {\n          self.reloadGrid();\n        }\n      });\n    },\n    clearMediaItems: function clearMediaItems() {\n      this.mediaItems.splice(0);\n    }\n  }, _defineProperty(_methods, \"clearSelectedMedias\", function clearSelectedMedias() {\n    this.selectedMedias.splice(0);\n  }), _defineProperty(_methods, \"reloadGrid\", function reloadGrid() {\n    var _this6 = this;\n    this.loading = true;\n    var form = this.$refs.form;\n    var formdata = this.getFormData(form);\n\n    // if (this.selected[this.connector]) {\n    //   formdata.except = this.selected[this.connector].map((media) => {\n    //     return media.id\n    //   })\n    //   console.log(formdata.except)\n    // }\n\n    // see api/media-library for actual ajax\n    api.get(this.endpoint, formdata, function (resp) {\n      // add medias here\n      resp.data.items.forEach(function (item) {\n        if (!_this6.mediaItems.find(function (media) {\n          return media.id === item.id;\n        })) {\n          _this6.mediaItems.push(item);\n        }\n      });\n      _this6.maxPage = resp.data.maxPage || 1;\n      _this6.tags = resp.data.tags || [];\n      _this6.$store.commit(MEDIA_LIBRARY.UPDATE_MEDIA_TYPE_TOTAL, {\n        type: _this6.type,\n        total: resp.data.total\n      });\n      _this6.loading = false;\n      _this6.listenScrollPosition();\n      _this6.gridLoaded = true;\n    }, function (error) {\n      // this.$store.commit(NOTIFICATION.SET_NOTIF, {\n      //   message: error.data.message,\n      //   variant: 'error'\n      // })\n    });\n  }), _defineProperty(_methods, \"updateType\", function updateType(newType) {\n    if (this.loading) return;\n    if (this.strict) return;\n    if (this.type === newType) return;\n    this.$store.commit(MEDIA_LIBRARY.UPDATE_MEDIA_TYPE, newType);\n    this.submitFilter();\n  }), _defineProperty(_methods, \"getFormData\", function getFormData(form) {\n    var data = FormDataAsObj(form);\n    if (data) data.page = this.page;else data = {\n      page: this.page\n    };\n    data.type = this.type;\n    if (Array.isArray(data.unused) && data.unused.length) {\n      data.unused = data.unused[0];\n    }\n    return data;\n  }), _methods),\n  created: function created() {}\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}