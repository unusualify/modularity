{"ast":null,"code":"export function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return \"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withModifiers as _withModifiers, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \\\"vue\\\" export function render(_ctx, _cache, $props, $setup, $data, $options) { const _component_v_btn = _resolveComponent(\\\"v-btn\\\") const _component_v_card_title = _resolveComponent(\\\"v-card-title\\\") const _component_v_card_text = _resolveComponent(\\\"v-card-text\\\") const _component_v_spacer = _resolveComponent(\\\"v-spacer\\\") const _component_v_card_actions = _resolveComponent(\\\"v-card-actions\\\") const _component_v_card = _resolveComponent(\\\"v-card\\\") const _component_v_dialog = _resolveComponent(\\\"v-dialog\\\") const _component_v_row = _resolveComponent(\\\"v-row\\\") return (_openBlock(), _createBlock(_component_v_row, { justify: \\\"center\\\" }, { default: _withCtx(() => [ _createVNode(_component_v_btn, { color: \\\"primary\\\", dark: \\\"\\\", onClick: _cache[0] || (_cache[0] = _withModifiers($event => ($data.dialog = true), [\\\"stop\\\"])) }, { default: _withCtx(() => [ _createTextVNode(\\\" Open Dialog \\\") ]), _: 1 /* STABLE */ }), _createVNode(_component_v_dialog, { modelValue: $data.dialog, \\\"onUpdate:modelValue\\\": _cache[3] || (_cache[3] = $event => (($data.dialog) = $event)), fullscreen: _ctx.toggleFullScreen, persistent: _ctx.togglePersistent, scrollable: _ctx.toggleScrollable }, { default: _withCtx(() => [ _createVNode(_component_v_card, null, { default: _withCtx(() => [ _createVNode(_component_v_card_title, { class: \\\"text-h5\\\" }, { default: _withCtx(() => [ _createTextVNode(\\\" Use Google's location service? \\\") ]), _: 1 /* STABLE */ }), _createVNode(_component_v_card_text, null, { default: _withCtx(() => [ _createTextVNode(\\\" Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running. \\\") ]), _: 1 /* STABLE */ }), _createVNode(_component_v_card_actions, null, { default: _withCtx(() => [ _createVNode(_component_v_spacer), _createVNode(_component_v_btn, { color: \\\"green darken-1\\\", text: \\\"\\\", onClick: _cache[1] || (_cache[1] = $event => ($data.dialog = false)) }, { default: _withCtx(() => [ _createTextVNode(\\\" Disagree \\\") ]), _: 1 /* STABLE */ }), _createVNode(_component_v_btn, { color: \\\"green darken-1\\\", text: \\\"\\\", onClick: _cache[2] || (_cache[2] = $event => ($data.dialog = false)) }, { default: _withCtx(() => [ _createTextVNode(\\\" Agree \\\") ]), _: 1 /* STABLE */ }) ]), _: 1 /* STABLE */ }) ]), _: 1 /* STABLE */ }) ]), _: 1 /* STABLE */ }, 8 /* PROPS */, [\\\"modelValue\\\", \\\"fullscreen\\\", \\\"persistent\\\", \\\"scrollable\\\"]) ]), _: 1 /* STABLE */ })) }\";\n}","map":{"version":3,"names":[],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/modals/ModalDialog__.vue"],"sourcesContent":["<template>\n    <v-row justify=\"center\">\n        <v-btn\n            color=\"primary\"\n            dark\n            @click.stop=\"dialog = true\"\n            >\n            Open Dialog\n        </v-btn>\n        <v-dialog\n            v-model=\"dialog\"\n            :fullscreen=\"toggleFullScreen\"\n            :persistent=\"togglePersistent\"\n            :scrollable=\"toggleScrollable\"\n            >\n\n            <v-card>\n                <v-card-title class=\"text-h5\">\n                    Use Google's location service?\n                </v-card-title>\n\n                <v-card-text>\n                    Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n                </v-card-text>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n\n                    <v-btn\n                        color=\"green darken-1\"\n                        text\n                        @click=\"dialog = false\"\n                    >\n                        Disagree\n                    </v-btn>\n\n                    <v-btn\n                        color=\"green darken-1\"\n                        text\n                        @click=\"dialog = false\"\n                    >\n                        Agree\n                    </v-btn>\n                </v-card-actions>\n            </v-card>\n        </v-dialog>\n    </v-row>\n</template>\n\n<script>\nimport { ModalMixin } from '@/mixins'\n\nexport default {\n    \n    mixins: [ModalMixin],\n\n    props: {\n        cancelText: {\n            type: String,\n            default: ''\n        },\n        confirmText: {\n            type: String,\n            default: ''\n        },\n        description: {\n            type: String,\n            default: ''\n        }\n    },\n    data() {\n        return {\n            // open: false\n            dialog: false,\n\n        }\n    },\n\n    computed: {\n        textCancel() {\n            return this.cancelText != '' ? this.cancelText : this.$t('cancel') \n        },\n        textConfirm() {\n            return this.confirmText != '' ? this.confirmText : this.$t('confirm') \n        },\n        textDescription: {\n            get () {\n                return this.description != '' ? this.description : this.$t('confirm-description') \n            },\n            set (value) {\n                this.$emit('input', value)\n            }\n        }\n    },\n\n    watch: {\n\n    },\n\n    methods: {\n\n        cancelModal(callback){\n            __log('parent.cancelModal')\n\n            if (callback && typeof callback === 'function') {\n                callback()\n            }\n\n            this.$emit('cancel')\n        },\n        confirmModal(callback){\n            if (callback && typeof callback === 'function') {\n                callback()\n            }\n\n            this.$emit('confirm');\n        }\n    }\n}\n</script>\n\n<style>\n\n</style>"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}