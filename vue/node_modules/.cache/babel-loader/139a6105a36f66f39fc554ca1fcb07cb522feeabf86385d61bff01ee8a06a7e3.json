{"ast":null,"code":"import { MEDIA_LIBRARY } from '@/store/mutations';\nimport qq from 'fine-uploader/lib/dnd';\nimport FineUploaderS3 from 'fine-uploader-wrappers/s3';\nimport FineUploaderAzure from 'fine-uploader-wrappers/azure';\nimport FineUploaderTraditional from 'fine-uploader-wrappers/traditional';\nimport sanitizeFilename from '@/utils/sanitizeFilename.js';\nexport default {\n  name: 'A17Uploader',\n  props: {\n    type: {\n      type: Object,\n      required: true\n    }\n  },\n  data: function () {\n    return {\n      loadingMedias: []\n    };\n  },\n  computed: {\n    uploaderConfig: function () {\n      return this.type.uploaderConfig;\n    },\n    uploaderValidation: function () {\n      const extensions = this.uploaderConfig.allowedExtensions;\n      return {\n        allowedExtensions: extensions,\n        acceptFiles: '.' + extensions.join(', .'),\n        stopOnFirstInvalidFile: false\n      };\n    }\n  },\n  methods: {\n    initUploader: function () {\n      const buttonEl = this.$refs.uploaderBrowseButton;\n      const sharedConfig = {\n        debug: true,\n        maxConnections: 5,\n        button: buttonEl,\n        retry: {\n          enableAuto: false\n        },\n        callbacks: {\n          onSubmit: this._onSubmitCallback.bind(this),\n          onProgress: this._onProgressCallback.bind(this),\n          onError: this._onErrorCallback.bind(this),\n          onComplete: this._onCompleteCallback.bind(this),\n          onAllComplete: this._onAllCompleteCallback.bind(this),\n          onStatusChange: this._onStatusChangeCallback.bind(this),\n          onTotalProgress: this._onTotalProgressCallback.bind(this)\n        },\n        text: {\n          fileInputTitle: 'Browse...'\n        },\n        messages: {\n          // Todo: need to translate this in uploaderConfig\n          retryFailTooManyItemsError: 'Retry failed - you have reached your file limit.',\n          sizeError: '{file} is too large, maximum file size is {sizeLimit}.',\n          tooManyItemsError: 'Too many items ({netItems}) would be uploaded. Item limit is {itemLimit}.',\n          typeError: '{file} has an invalid extension. Valid extension(s): {extensions}.'\n        }\n      };\n      this._uploader = this.uploaderConfig.endpointType === 's3' ? new FineUploaderS3({\n        options: {\n          ...sharedConfig,\n          validation: {\n            ...this.uploaderValidation\n          },\n          objectProperties: {\n            key: id => {\n              return this.unique_folder_name + '/' + sanitizeFilename(this._uploader.methods.getName(id));\n            },\n            region: this.uploaderConfig.endpointRegion,\n            bucket: this.uploaderConfig.endpointBucket,\n            acl: this.uploaderConfig.acl\n          },\n          request: {\n            endpoint: this.uploaderConfig.endpoint,\n            accessKey: this.uploaderConfig.accessKey\n          },\n          signature: {\n            endpoint: this.uploaderConfig.signatureEndpoint,\n            version: 4,\n            customHeaders: {\n              'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n            }\n          },\n          uploadSuccess: {\n            endpoint: this.uploaderConfig.successEndpoint,\n            customHeaders: {\n              'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n            }\n          }\n        }\n      }) : this.uploaderConfig.endpointType === 'azure' ? new FineUploaderAzure({\n        options: {\n          ...sharedConfig,\n          validation: {\n            ...this.uploaderValidation\n          },\n          cors: {\n            expected: true,\n            sendCredentials: true\n          },\n          blobProperties: {\n            name: id => {\n              return new Promise(resolve => {\n                resolve(this.unique_folder_name + '/' + sanitizeFilename(this._uploader.methods.getName(id)));\n              });\n            }\n          },\n          request: {\n            endpoint: this.uploaderConfig.endpoint\n          },\n          signature: {\n            endpoint: this.uploaderConfig.signatureEndpoint,\n            version: 4,\n            customHeaders: {\n              'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n            }\n          },\n          uploadSuccess: {\n            endpoint: this.uploaderConfig.successEndpoint,\n            customHeaders: {\n              'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n            }\n          }\n        }\n      }) : new FineUploaderTraditional({\n        options: {\n          ...sharedConfig,\n          validation: {\n            ...this.uploaderValidation,\n            sizeLimit: this.uploaderConfig.filesizeLimit * 1048576 // mb to bytes\n          },\n\n          request: {\n            endpoint: this.uploaderConfig.endpoint,\n            customHeaders: {\n              'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n            }\n          }\n        }\n      });\n    },\n    replaceMedia: function (id) {\n      this.media_to_replace_id = id;\n      const qqinputs = this.$refs.uploaderBrowseButton.querySelectorAll('[name = \"qqfile\"]');\n      qqinputs[Array.from(qqinputs).length - 1].click();\n    },\n    loadingProgress: function (media) {\n      this.$store.commit(MEDIA_LIBRARY.PROGRESS_UPLOAD_MEDIA, media);\n    },\n    loadingFinished: function (loadingMedia, savedMedia) {\n      // add the saved image to the main image list\n      this.$emit('loaded', savedMedia);\n      this.$store.commit(MEDIA_LIBRARY.DONE_UPLOAD_MEDIA, loadingMedia);\n    },\n    loadingError: function (media) {\n      this.$store.commit(MEDIA_LIBRARY.ERROR_UPLOAD_MEDIA, media);\n    },\n    uploadProgress: function (uploadProgress) {\n      this.$store.commit(MEDIA_LIBRARY.PROGRESS_UPLOAD, uploadProgress);\n    },\n    _onCompleteCallback(id, name, responseJSON, xhr) {\n      const index = this.loadingMedias.findIndex(m => m.id === this._uploader.methods.getUuid(id));\n      if (responseJSON.success) {\n        this.loadingFinished(this.loadingMedias[index], responseJSON.media);\n      } else {\n        this.loadingError(this.loadingMedias[index]);\n      }\n    },\n    _onAllCompleteCallback(succeeded, failed) {\n      // reset folder name for next upload session\n      this.unique_folder_name = null;\n      this.uploadProgress(0);\n    },\n    _onSubmitCallback(id, name) {\n      this.$emit('clear');\n      // each upload session will add upload files with original filenames in a folder named using a uuid\n      this.unique_folder_name = this.unique_folder_name || this.uploaderConfig.endpointRoot + qq.getUniqueId();\n      this._uploader.methods.setParams({\n        unique_folder_name: this.unique_folder_name,\n        media_to_replace_id: this.media_to_replace_id\n      }, id);\n\n      // determine the image dimensions and add it to params sent on upload success\n      const imageUrl = URL.createObjectURL(this._uploader.methods.getFile(id));\n      const img = new Image();\n      img.onload = () => {\n        this._uploader.methods.setParams({\n          width: img.width,\n          height: img.height,\n          unique_folder_name: this.unique_folder_name,\n          media_to_replace_id: this.media_to_replace_id\n        }, id);\n        this.media_to_replace_id = null;\n      };\n      img.src = imageUrl;\n      const media = {\n        id: this._uploader.methods.getUuid(id),\n        name: sanitizeFilename(name),\n        progress: 0,\n        error: false,\n        errorMessage: null,\n        isReplacement: !!this.media_to_replace_id,\n        replacementId: this.media_to_replace_id\n      };\n      if (this.type.value === 'file') {\n        this.media_to_replace_id = null;\n      }\n      this.loadingMedias.push(media);\n      this.loadingProgress(media);\n    },\n    _onProgressCallback(id, name, uploadedBytes, totalBytes) {\n      const index = this.loadingMedias.findIndex(m => m.id === this._uploader.methods.getUuid(id));\n      if (index >= 0) {\n        const media = this.loadingMedias[index];\n        media.progress = uploadedBytes / totalBytes * 100 || 0;\n        media.error = false;\n        this.loadingProgress(media);\n      }\n    },\n    _onErrorCallback(id, name, errorReason, xhr) {\n      const index = id ? this.loadingMedias.findIndex(m => m.id === this._uploader.methods.getUuid(id)) : -1;\n      if (index >= 0) {\n        this.loadingMedias[index].errorMessage = errorReason;\n        this.loadingError(this.loadingMedias[index]);\n      } else {\n        const media = {\n          id: id ? this._uploader.methods.getUuid(id) : Math.floor(Math.random() * 1000),\n          name: sanitizeFilename(name),\n          progress: 0,\n          error: true,\n          errorMessage: errorReason\n        };\n        this.loadingMedias.push(media);\n        this.loadingProgress(media);\n        this.loadingError(this.loadingMedias[this.loadingMedias.length - 1]);\n      }\n    },\n    _onStatusChangeCallback(id, oldStatus, newStatus) {\n      if (newStatus === 'retrying upload') {\n        const index = this.loadingMedias.findIndex(function (m) {\n          return m.id === id;\n        });\n        if (index >= 0) {\n          const media = this.loadingMedias[index];\n          media.progress = 0;\n          media.error = false;\n          this.loadingProgress(media);\n        }\n      }\n    },\n    _onTotalProgressCallback(totalUploadedBytes, totalBytes) {\n      const uploadProgress = Math.floor(totalUploadedBytes / totalBytes * 100);\n      this.uploadProgress(uploadProgress);\n    },\n    _onDropError(errorCode, errorData) {\n      console.error(errorCode, errorData);\n    },\n    _onProcessingDroppedFilesComplete(files) {\n      this._uploader.methods.addFiles(files);\n    }\n  },\n  watch: {\n    type: function () {\n      if (this._uploader) {\n        this.initUploader();\n      }\n    }\n  },\n  mounted() {\n    // Init uploader\n    this.initUploader();\n\n    // Init dropzone\n    const dropzoneEl = this.$refs.uploaderDropzone;\n    this._qqDropzone && this._qqDropzone.dispose();\n    this._qqDropzone = new qq.DragAndDrop({\n      dropZoneElements: [dropzoneEl],\n      allowMultipleItems: true,\n      callbacks: {\n        dropError: this._onDropError.bind(this),\n        processingDroppedFilesComplete: this._onProcessingDroppedFilesComplete.bind(this)\n      }\n    });\n  },\n  beforeDestroy() {\n    this._qqDropzone && this._qqDropzone.dispose();\n  }\n};","map":{"version":3,"names":["MEDIA_LIBRARY","qq","FineUploaderS3","FineUploaderAzure","FineUploaderTraditional","sanitizeFilename","name","props","type","Object","required","data","loadingMedias","computed","uploaderConfig","uploaderValidation","extensions","allowedExtensions","acceptFiles","join","stopOnFirstInvalidFile","methods","initUploader","buttonEl","$refs","uploaderBrowseButton","sharedConfig","debug","maxConnections","button","retry","enableAuto","callbacks","onSubmit","_onSubmitCallback","bind","onProgress","_onProgressCallback","onError","_onErrorCallback","onComplete","_onCompleteCallback","onAllComplete","_onAllCompleteCallback","onStatusChange","_onStatusChangeCallback","onTotalProgress","_onTotalProgressCallback","text","fileInputTitle","messages","retryFailTooManyItemsError","sizeError","tooManyItemsError","typeError","_uploader","endpointType","options","validation","objectProperties","key","id","unique_folder_name","getName","region","endpointRegion","bucket","endpointBucket","acl","request","endpoint","accessKey","signature","signatureEndpoint","version","customHeaders","csrfToken","uploadSuccess","successEndpoint","cors","expected","sendCredentials","blobProperties","Promise","resolve","sizeLimit","filesizeLimit","replaceMedia","media_to_replace_id","qqinputs","querySelectorAll","Array","from","length","click","loadingProgress","media","$store","commit","PROGRESS_UPLOAD_MEDIA","loadingFinished","loadingMedia","savedMedia","$emit","DONE_UPLOAD_MEDIA","loadingError","ERROR_UPLOAD_MEDIA","uploadProgress","PROGRESS_UPLOAD","responseJSON","xhr","index","findIndex","m","getUuid","success","succeeded","failed","endpointRoot","getUniqueId","setParams","imageUrl","URL","createObjectURL","getFile","img","Image","onload","width","height","src","progress","error","errorMessage","isReplacement","replacementId","value","push","uploadedBytes","totalBytes","errorReason","Math","floor","random","oldStatus","newStatus","totalUploadedBytes","_onDropError","errorCode","errorData","console","_onProcessingDroppedFilesComplete","files","addFiles","watch","mounted","dropzoneEl","uploaderDropzone","_qqDropzone","dispose","DragAndDrop","dropZoneElements","allowMultipleItems","dropError","processingDroppedFilesComplete","beforeDestroy"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/Uploader.vue"],"sourcesContent":["<template>\n  <div class=\"uploader\">\n    <div class=\"uploader__dropzone\" ref=\"uploaderDropzone\">\n      <div class=\"button\" ref=\"uploaderBrowseButton\">{{ $trans('uploader.upload-btn-label', 'Add new') }}</div>\n      <div class=\"uploader__dropzone--desktop\">{{ $trans('uploader.dropzone-text', 'or drop new files here') }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { MEDIA_LIBRARY } from '@/store/mutations'\n  import qq from 'fine-uploader/lib/dnd'\n  import FineUploaderS3 from 'fine-uploader-wrappers/s3'\n  import FineUploaderAzure from 'fine-uploader-wrappers/azure'\n  import FineUploaderTraditional from 'fine-uploader-wrappers/traditional'\n  import sanitizeFilename from '@/utils/sanitizeFilename.js'\n\n  export default {\n    name: 'A17Uploader',\n    props: {\n      type: {\n        type: Object,\n        required: true\n      }\n    },\n    data: function () {\n      return {\n        loadingMedias: []\n      }\n    },\n    computed: {\n      uploaderConfig: function () {\n        return this.type.uploaderConfig\n      },\n      uploaderValidation: function () {\n        const extensions = this.uploaderConfig.allowedExtensions\n        return {\n          allowedExtensions: extensions,\n          acceptFiles: '.' + extensions.join(', .'),\n          stopOnFirstInvalidFile: false\n        }\n      }\n    },\n    methods: {\n      initUploader: function () {\n        const buttonEl = this.$refs.uploaderBrowseButton\n        const sharedConfig = {\n          debug: true,\n          maxConnections: 5,\n          button: buttonEl,\n          retry: {\n            enableAuto: false\n          },\n          callbacks: {\n            onSubmit: this._onSubmitCallback.bind(this),\n            onProgress: this._onProgressCallback.bind(this),\n            onError: this._onErrorCallback.bind(this),\n            onComplete: this._onCompleteCallback.bind(this),\n            onAllComplete: this._onAllCompleteCallback.bind(this),\n            onStatusChange: this._onStatusChangeCallback.bind(this),\n            onTotalProgress: this._onTotalProgressCallback.bind(this)\n          },\n          text: {\n            fileInputTitle: 'Browse...'\n          },\n          messages: {\n            // Todo: need to translate this in uploaderConfig\n            retryFailTooManyItemsError: 'Retry failed - you have reached your file limit.',\n            sizeError: '{file} is too large, maximum file size is {sizeLimit}.',\n            tooManyItemsError: 'Too many items ({netItems}) would be uploaded. Item limit is {itemLimit}.',\n            typeError: '{file} has an invalid extension. Valid extension(s): {extensions}.'\n          }\n        }\n\n        this._uploader = this.uploaderConfig.endpointType === 's3'\n          ? new FineUploaderS3({\n            options: {\n              ...sharedConfig,\n              validation: {\n                ...this.uploaderValidation\n              },\n              objectProperties: {\n                key: id => {\n                  return this.unique_folder_name + '/' + sanitizeFilename(this._uploader.methods.getName(id))\n                },\n                region: this.uploaderConfig.endpointRegion,\n                bucket: this.uploaderConfig.endpointBucket,\n                acl: this.uploaderConfig.acl\n              },\n              request: {\n                endpoint: this.uploaderConfig.endpoint,\n                accessKey: this.uploaderConfig.accessKey\n              },\n              signature: {\n                endpoint: this.uploaderConfig.signatureEndpoint,\n                version: 4,\n                customHeaders: {\n                  'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n                }\n              },\n              uploadSuccess: {\n                endpoint: this.uploaderConfig.successEndpoint,\n                customHeaders: {\n                  'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n                }\n              }\n            }\n          })\n          : this.uploaderConfig.endpointType === 'azure'\n            ? new FineUploaderAzure({\n              options: {\n                ...sharedConfig,\n                validation: {\n                  ...this.uploaderValidation\n                },\n                cors: {\n                  expected: true,\n                  sendCredentials: true\n                },\n                blobProperties: {\n                  name: id => {\n                    return new Promise((resolve) => {\n                      resolve(this.unique_folder_name + '/' + sanitizeFilename(this._uploader.methods.getName(id)))\n                    })\n                  }\n                },\n                request: {\n                  endpoint: this.uploaderConfig.endpoint\n                },\n                signature: {\n                  endpoint: this.uploaderConfig.signatureEndpoint,\n                  version: 4,\n                  customHeaders: {\n                    'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n                  }\n                },\n                uploadSuccess: {\n                  endpoint: this.uploaderConfig.successEndpoint,\n                  customHeaders: {\n                    'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n                  }\n                }\n              }\n            })\n            : new FineUploaderTraditional({\n              options: {\n                ...sharedConfig,\n                validation: {\n                  ...this.uploaderValidation,\n                  sizeLimit: this.uploaderConfig.filesizeLimit * 1048576 // mb to bytes\n                },\n                request: {\n                  endpoint: this.uploaderConfig.endpoint,\n                  customHeaders: {\n                    'X-CSRF-TOKEN': this.uploaderConfig.csrfToken\n                  }\n                }\n              }\n            })\n      },\n      replaceMedia: function (id) {\n        this.media_to_replace_id = id\n        const qqinputs = this.$refs.uploaderBrowseButton.querySelectorAll('[name = \"qqfile\"]')\n        qqinputs[Array.from(qqinputs).length - 1].click()\n      },\n      loadingProgress: function (media) {\n        this.$store.commit(MEDIA_LIBRARY.PROGRESS_UPLOAD_MEDIA, media)\n      },\n      loadingFinished: function (loadingMedia, savedMedia) {\n        // add the saved image to the main image list\n        this.$emit('loaded', savedMedia)\n        this.$store.commit(MEDIA_LIBRARY.DONE_UPLOAD_MEDIA, loadingMedia)\n      },\n      loadingError: function (media) {\n        this.$store.commit(MEDIA_LIBRARY.ERROR_UPLOAD_MEDIA, media)\n      },\n      uploadProgress: function (uploadProgress) {\n        this.$store.commit(MEDIA_LIBRARY.PROGRESS_UPLOAD, uploadProgress)\n      },\n      _onCompleteCallback (id, name, responseJSON, xhr) {\n        const index = this.loadingMedias.findIndex((m) => m.id === this._uploader.methods.getUuid(id))\n\n        if (responseJSON.success) {\n          this.loadingFinished(this.loadingMedias[index], responseJSON.media)\n        } else {\n          this.loadingError(this.loadingMedias[index])\n        }\n      },\n      _onAllCompleteCallback (succeeded, failed) {\n        // reset folder name for next upload session\n        this.unique_folder_name = null\n        this.uploadProgress(0)\n      },\n      _onSubmitCallback (id, name) {\n        this.$emit('clear')\n        // each upload session will add upload files with original filenames in a folder named using a uuid\n        this.unique_folder_name = this.unique_folder_name || (this.uploaderConfig.endpointRoot + qq.getUniqueId())\n        this._uploader.methods.setParams({\n          unique_folder_name: this.unique_folder_name,\n          media_to_replace_id: this.media_to_replace_id\n        }, id)\n\n        // determine the image dimensions and add it to params sent on upload success\n        const imageUrl = URL.createObjectURL(this._uploader.methods.getFile(id))\n        const img = new Image()\n\n        img.onload = () => {\n          this._uploader.methods.setParams({\n            width: img.width,\n            height: img.height,\n            unique_folder_name: this.unique_folder_name,\n            media_to_replace_id: this.media_to_replace_id\n          }, id)\n          this.media_to_replace_id = null\n        }\n\n        img.src = imageUrl\n\n        const media = {\n          id: this._uploader.methods.getUuid(id),\n          name: sanitizeFilename(name),\n          progress: 0,\n          error: false,\n          errorMessage: null,\n          isReplacement: !!this.media_to_replace_id,\n          replacementId: this.media_to_replace_id\n        }\n\n        if (this.type.value === 'file') {\n          this.media_to_replace_id = null\n        }\n\n        this.loadingMedias.push(media)\n        this.loadingProgress(media)\n      },\n      _onProgressCallback (id, name, uploadedBytes, totalBytes) {\n        const index = this.loadingMedias.findIndex((m) => m.id === this._uploader.methods.getUuid(id))\n\n        if (index >= 0) {\n          const media = this.loadingMedias[index]\n          media.progress = uploadedBytes / totalBytes * 100 || 0\n          media.error = false\n          this.loadingProgress(media)\n        }\n      },\n      _onErrorCallback (id, name, errorReason, xhr) {\n        const index = id ? this.loadingMedias.findIndex((m) => m.id === this._uploader.methods.getUuid(id)) : -1\n\n        if (index >= 0) {\n          this.loadingMedias[index].errorMessage = errorReason\n          this.loadingError(this.loadingMedias[index])\n        } else {\n          const media = {\n            id: id ? this._uploader.methods.getUuid(id) : Math.floor(Math.random() * 1000),\n            name: sanitizeFilename(name),\n            progress: 0,\n            error: true,\n            errorMessage: errorReason\n          }\n\n          this.loadingMedias.push(media)\n          this.loadingProgress(media)\n          this.loadingError(this.loadingMedias[this.loadingMedias.length - 1])\n        }\n      },\n      _onStatusChangeCallback (id, oldStatus, newStatus) {\n        if (newStatus === 'retrying upload') {\n          const index = this.loadingMedias.findIndex(function (m) {\n            return m.id === id\n          })\n\n          if (index >= 0) {\n            const media = this.loadingMedias[index]\n            media.progress = 0\n            media.error = false\n            this.loadingProgress(media)\n          }\n        }\n      },\n      _onTotalProgressCallback (totalUploadedBytes, totalBytes) {\n        const uploadProgress = Math.floor(totalUploadedBytes / totalBytes * 100)\n        this.uploadProgress(uploadProgress)\n      },\n      _onDropError (errorCode, errorData) {\n        console.error(errorCode, errorData)\n      },\n      _onProcessingDroppedFilesComplete (files) {\n        this._uploader.methods.addFiles(files)\n      }\n    },\n    watch: {\n      type: function () {\n        if (this._uploader) {\n          this.initUploader()\n        }\n      }\n    },\n    mounted () {\n      // Init uploader\n      this.initUploader()\n\n      // Init dropzone\n      const dropzoneEl = this.$refs.uploaderDropzone\n      this._qqDropzone && this._qqDropzone.dispose()\n      this._qqDropzone = new qq.DragAndDrop({\n        dropZoneElements: [dropzoneEl],\n        allowMultipleItems: true,\n        callbacks: {\n          dropError: this._onDropError.bind(this),\n          processingDroppedFilesComplete: this._onProcessingDroppedFilesComplete.bind(this)\n        }\n      })\n    },\n    beforeDestroy () {\n      this._qqDropzone && this._qqDropzone.dispose()\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n\n  $height_small_btn: 35px;\n\n  .uploader {\n    margin: 10px;\n  }\n\n  .uploader__dropzone {\n    border: 1px dashed $color__border--hover;\n    text-align: center;\n    padding: 26px 0;\n    color: $color__text--light;\n\n    .button {\n      @include btn-reset;\n      display: inline-block;\n      height: $height_small_btn;\n      margin-right: 10px;\n      line-height: $height_small_btn - 2px;\n      border-radius: calc($height_small_btn / 2);\n      background-color: transparent;\n      border: 1px solid $color__border--hover;\n      color: $color__text--light;\n      padding: 0 20px;\n      text-align: center;\n      transition: color .2s linear, border-color .2s linear, background-color .2s linear;\n\n      &.qq-upload-button-hover,\n      &:hover {\n        border-color: $color__text;\n        color: $color__text;\n      }\n\n      &.qq-upload-button-focus,\n      &:focus {\n        border-color: $color__text;\n        color: $color__text;\n      }\n\n      &:disabled {\n        opacity: .5;\n        pointer-events: none;\n      }\n    }\n  }\n\n  .uploader__dropzone--desktop {\n    display: inline-block;\n    vertical-align: top;\n    margin-top: 8px;\n    @include breakpoint(small-) {\n      display: none;\n    }\n  }\n</style>\n"],"mappings":"AAUE,SAASA,aAAY,QAAS,mBAAkB;AAChD,OAAOC,EAAC,MAAO,uBAAsB;AACrC,OAAOC,cAAa,MAAO,2BAA0B;AACrD,OAAOC,iBAAgB,MAAO,8BAA6B;AAC3D,OAAOC,uBAAsB,MAAO,oCAAmC;AACvE,OAAOC,gBAAe,MAAO,6BAA4B;AAEzD,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJA,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAI,EAAE,SAAAA,CAAA,EAAY;IAChB,OAAO;MACLC,aAAa,EAAE;IACjB;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,cAAc,EAAE,SAAAA,CAAA,EAAY;MAC1B,OAAO,IAAI,CAACN,IAAI,CAACM,cAAa;IAChC,CAAC;IACDC,kBAAkB,EAAE,SAAAA,CAAA,EAAY;MAC9B,MAAMC,UAAS,GAAI,IAAI,CAACF,cAAc,CAACG,iBAAgB;MACvD,OAAO;QACLA,iBAAiB,EAAED,UAAU;QAC7BE,WAAW,EAAE,GAAE,GAAIF,UAAU,CAACG,IAAI,CAAC,KAAK,CAAC;QACzCC,sBAAsB,EAAE;MAC1B;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,YAAY,EAAE,SAAAA,CAAA,EAAY;MACxB,MAAMC,QAAO,GAAI,IAAI,CAACC,KAAK,CAACC,oBAAmB;MAC/C,MAAMC,YAAW,GAAI;QACnBC,KAAK,EAAE,IAAI;QACXC,cAAc,EAAE,CAAC;QACjBC,MAAM,EAAEN,QAAQ;QAChBO,KAAK,EAAE;UACLC,UAAU,EAAE;QACd,CAAC;QACDC,SAAS,EAAE;UACTC,QAAQ,EAAE,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;UAC3CC,UAAU,EAAE,IAAI,CAACC,mBAAmB,CAACF,IAAI,CAAC,IAAI,CAAC;UAC/CG,OAAO,EAAE,IAAI,CAACC,gBAAgB,CAACJ,IAAI,CAAC,IAAI,CAAC;UACzCK,UAAU,EAAE,IAAI,CAACC,mBAAmB,CAACN,IAAI,CAAC,IAAI,CAAC;UAC/CO,aAAa,EAAE,IAAI,CAACC,sBAAsB,CAACR,IAAI,CAAC,IAAI,CAAC;UACrDS,cAAc,EAAE,IAAI,CAACC,uBAAuB,CAACV,IAAI,CAAC,IAAI,CAAC;UACvDW,eAAe,EAAE,IAAI,CAACC,wBAAwB,CAACZ,IAAI,CAAC,IAAI;QAC1D,CAAC;QACDa,IAAI,EAAE;UACJC,cAAc,EAAE;QAClB,CAAC;QACDC,QAAQ,EAAE;UACR;UACAC,0BAA0B,EAAE,kDAAkD;UAC9EC,SAAS,EAAE,wDAAwD;UACnEC,iBAAiB,EAAE,2EAA2E;UAC9FC,SAAS,EAAE;QACb;MACF;MAEA,IAAI,CAACC,SAAQ,GAAI,IAAI,CAACzC,cAAc,CAAC0C,YAAW,KAAM,IAAG,GACrD,IAAItD,cAAc,CAAC;QACnBuD,OAAO,EAAE;UACP,GAAG/B,YAAY;UACfgC,UAAU,EAAE;YACV,GAAG,IAAI,CAAC3C;UACV,CAAC;UACD4C,gBAAgB,EAAE;YAChBC,GAAG,EAAEC,EAAC,IAAK;cACT,OAAO,IAAI,CAACC,kBAAiB,GAAI,GAAE,GAAIzD,gBAAgB,CAAC,IAAI,CAACkD,SAAS,CAAClC,OAAO,CAAC0C,OAAO,CAACF,EAAE,CAAC;YAC5F,CAAC;YACDG,MAAM,EAAE,IAAI,CAAClD,cAAc,CAACmD,cAAc;YAC1CC,MAAM,EAAE,IAAI,CAACpD,cAAc,CAACqD,cAAc;YAC1CC,GAAG,EAAE,IAAI,CAACtD,cAAc,CAACsD;UAC3B,CAAC;UACDC,OAAO,EAAE;YACPC,QAAQ,EAAE,IAAI,CAACxD,cAAc,CAACwD,QAAQ;YACtCC,SAAS,EAAE,IAAI,CAACzD,cAAc,CAACyD;UACjC,CAAC;UACDC,SAAS,EAAE;YACTF,QAAQ,EAAE,IAAI,CAACxD,cAAc,CAAC2D,iBAAiB;YAC/CC,OAAO,EAAE,CAAC;YACVC,aAAa,EAAE;cACb,cAAc,EAAE,IAAI,CAAC7D,cAAc,CAAC8D;YACtC;UACF,CAAC;UACDC,aAAa,EAAE;YACbP,QAAQ,EAAE,IAAI,CAACxD,cAAc,CAACgE,eAAe;YAC7CH,aAAa,EAAE;cACb,cAAc,EAAE,IAAI,CAAC7D,cAAc,CAAC8D;YACtC;UACF;QACF;MACF,CAAC,IACC,IAAI,CAAC9D,cAAc,CAAC0C,YAAW,KAAM,OAAM,GACzC,IAAIrD,iBAAiB,CAAC;QACtBsD,OAAO,EAAE;UACP,GAAG/B,YAAY;UACfgC,UAAU,EAAE;YACV,GAAG,IAAI,CAAC3C;UACV,CAAC;UACDgE,IAAI,EAAE;YACJC,QAAQ,EAAE,IAAI;YACdC,eAAe,EAAE;UACnB,CAAC;UACDC,cAAc,EAAE;YACd5E,IAAI,EAAEuD,EAAC,IAAK;cACV,OAAO,IAAIsB,OAAO,CAAEC,OAAO,IAAK;gBAC9BA,OAAO,CAAC,IAAI,CAACtB,kBAAiB,GAAI,GAAE,GAAIzD,gBAAgB,CAAC,IAAI,CAACkD,SAAS,CAAClC,OAAO,CAAC0C,OAAO,CAACF,EAAE,CAAC,CAAC;cAC9F,CAAC;YACH;UACF,CAAC;UACDQ,OAAO,EAAE;YACPC,QAAQ,EAAE,IAAI,CAACxD,cAAc,CAACwD;UAChC,CAAC;UACDE,SAAS,EAAE;YACTF,QAAQ,EAAE,IAAI,CAACxD,cAAc,CAAC2D,iBAAiB;YAC/CC,OAAO,EAAE,CAAC;YACVC,aAAa,EAAE;cACb,cAAc,EAAE,IAAI,CAAC7D,cAAc,CAAC8D;YACtC;UACF,CAAC;UACDC,aAAa,EAAE;YACbP,QAAQ,EAAE,IAAI,CAACxD,cAAc,CAACgE,eAAe;YAC7CH,aAAa,EAAE;cACb,cAAc,EAAE,IAAI,CAAC7D,cAAc,CAAC8D;YACtC;UACF;QACF;MACF,CAAC,IACC,IAAIxE,uBAAuB,CAAC;QAC5BqD,OAAO,EAAE;UACP,GAAG/B,YAAY;UACfgC,UAAU,EAAE;YACV,GAAG,IAAI,CAAC3C,kBAAkB;YAC1BsE,SAAS,EAAE,IAAI,CAACvE,cAAc,CAACwE,aAAY,GAAI,OAAM,CAAE;UACzD,CAAC;;UACDjB,OAAO,EAAE;YACPC,QAAQ,EAAE,IAAI,CAACxD,cAAc,CAACwD,QAAQ;YACtCK,aAAa,EAAE;cACb,cAAc,EAAE,IAAI,CAAC7D,cAAc,CAAC8D;YACtC;UACF;QACF;MACF,CAAC;IACP,CAAC;IACDW,YAAY,EAAE,SAAAA,CAAU1B,EAAE,EAAE;MAC1B,IAAI,CAAC2B,mBAAkB,GAAI3B,EAAC;MAC5B,MAAM4B,QAAO,GAAI,IAAI,CAACjE,KAAK,CAACC,oBAAoB,CAACiE,gBAAgB,CAAC,mBAAmB;MACrFD,QAAQ,CAACE,KAAK,CAACC,IAAI,CAACH,QAAQ,CAAC,CAACI,MAAK,GAAI,CAAC,CAAC,CAACC,KAAK,EAAC;IAClD,CAAC;IACDC,eAAe,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAChC,IAAI,CAACC,MAAM,CAACC,MAAM,CAAClG,aAAa,CAACmG,qBAAqB,EAAEH,KAAK;IAC/D,CAAC;IACDI,eAAe,EAAE,SAAAA,CAAUC,YAAY,EAAEC,UAAU,EAAE;MACnD;MACA,IAAI,CAACC,KAAK,CAAC,QAAQ,EAAED,UAAU;MAC/B,IAAI,CAACL,MAAM,CAACC,MAAM,CAAClG,aAAa,CAACwG,iBAAiB,EAAEH,YAAY;IAClE,CAAC;IACDI,YAAY,EAAE,SAAAA,CAAUT,KAAK,EAAE;MAC7B,IAAI,CAACC,MAAM,CAACC,MAAM,CAAClG,aAAa,CAAC0G,kBAAkB,EAAEV,KAAK;IAC5D,CAAC;IACDW,cAAc,EAAE,SAAAA,CAAUA,cAAc,EAAE;MACxC,IAAI,CAACV,MAAM,CAACC,MAAM,CAAClG,aAAa,CAAC4G,eAAe,EAAED,cAAc;IAClE,CAAC;IACDlE,mBAAkBA,CAAGoB,EAAE,EAAEvD,IAAI,EAAEuG,YAAY,EAAEC,GAAG,EAAE;MAChD,MAAMC,KAAI,GAAI,IAAI,CAACnG,aAAa,CAACoG,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACpD,EAAC,KAAM,IAAI,CAACN,SAAS,CAAClC,OAAO,CAAC6F,OAAO,CAACrD,EAAE,CAAC;MAE7F,IAAIgD,YAAY,CAACM,OAAO,EAAE;QACxB,IAAI,CAACf,eAAe,CAAC,IAAI,CAACxF,aAAa,CAACmG,KAAK,CAAC,EAAEF,YAAY,CAACb,KAAK;MACpE,OAAO;QACL,IAAI,CAACS,YAAY,CAAC,IAAI,CAAC7F,aAAa,CAACmG,KAAK,CAAC;MAC7C;IACF,CAAC;IACDpE,sBAAqBA,CAAGyE,SAAS,EAAEC,MAAM,EAAE;MACzC;MACA,IAAI,CAACvD,kBAAiB,GAAI,IAAG;MAC7B,IAAI,CAAC6C,cAAc,CAAC,CAAC;IACvB,CAAC;IACDzE,iBAAgBA,CAAG2B,EAAE,EAAEvD,IAAI,EAAE;MAC3B,IAAI,CAACiG,KAAK,CAAC,OAAO;MAClB;MACA,IAAI,CAACzC,kBAAiB,GAAI,IAAI,CAACA,kBAAiB,IAAM,IAAI,CAAChD,cAAc,CAACwG,YAAW,GAAIrH,EAAE,CAACsH,WAAW,EAAE;MACzG,IAAI,CAAChE,SAAS,CAAClC,OAAO,CAACmG,SAAS,CAAC;QAC/B1D,kBAAkB,EAAE,IAAI,CAACA,kBAAkB;QAC3C0B,mBAAmB,EAAE,IAAI,CAACA;MAC5B,CAAC,EAAE3B,EAAE;;MAEL;MACA,MAAM4D,QAAO,GAAIC,GAAG,CAACC,eAAe,CAAC,IAAI,CAACpE,SAAS,CAAClC,OAAO,CAACuG,OAAO,CAAC/D,EAAE,CAAC;MACvE,MAAMgE,GAAE,GAAI,IAAIC,KAAK,EAAC;MAEtBD,GAAG,CAACE,MAAK,GAAI,MAAM;QACjB,IAAI,CAACxE,SAAS,CAAClC,OAAO,CAACmG,SAAS,CAAC;UAC/BQ,KAAK,EAAEH,GAAG,CAACG,KAAK;UAChBC,MAAM,EAAEJ,GAAG,CAACI,MAAM;UAClBnE,kBAAkB,EAAE,IAAI,CAACA,kBAAkB;UAC3C0B,mBAAmB,EAAE,IAAI,CAACA;QAC5B,CAAC,EAAE3B,EAAE;QACL,IAAI,CAAC2B,mBAAkB,GAAI,IAAG;MAChC;MAEAqC,GAAG,CAACK,GAAE,GAAIT,QAAO;MAEjB,MAAMzB,KAAI,GAAI;QACZnC,EAAE,EAAE,IAAI,CAACN,SAAS,CAAClC,OAAO,CAAC6F,OAAO,CAACrD,EAAE,CAAC;QACtCvD,IAAI,EAAED,gBAAgB,CAACC,IAAI,CAAC;QAC5B6H,QAAQ,EAAE,CAAC;QACXC,KAAK,EAAE,KAAK;QACZC,YAAY,EAAE,IAAI;QAClBC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC9C,mBAAmB;QACzC+C,aAAa,EAAE,IAAI,CAAC/C;MACtB;MAEA,IAAI,IAAI,CAAChF,IAAI,CAACgI,KAAI,KAAM,MAAM,EAAE;QAC9B,IAAI,CAAChD,mBAAkB,GAAI,IAAG;MAChC;MAEA,IAAI,CAAC5E,aAAa,CAAC6H,IAAI,CAACzC,KAAK;MAC7B,IAAI,CAACD,eAAe,CAACC,KAAK;IAC5B,CAAC;IACD3D,mBAAkBA,CAAGwB,EAAE,EAAEvD,IAAI,EAAEoI,aAAa,EAAEC,UAAU,EAAE;MACxD,MAAM5B,KAAI,GAAI,IAAI,CAACnG,aAAa,CAACoG,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACpD,EAAC,KAAM,IAAI,CAACN,SAAS,CAAClC,OAAO,CAAC6F,OAAO,CAACrD,EAAE,CAAC;MAE7F,IAAIkD,KAAI,IAAK,CAAC,EAAE;QACd,MAAMf,KAAI,GAAI,IAAI,CAACpF,aAAa,CAACmG,KAAK;QACtCf,KAAK,CAACmC,QAAO,GAAIO,aAAY,GAAIC,UAAS,GAAI,GAAE,IAAK;QACrD3C,KAAK,CAACoC,KAAI,GAAI,KAAI;QAClB,IAAI,CAACrC,eAAe,CAACC,KAAK;MAC5B;IACF,CAAC;IACDzD,gBAAeA,CAAGsB,EAAE,EAAEvD,IAAI,EAAEsI,WAAW,EAAE9B,GAAG,EAAE;MAC5C,MAAMC,KAAI,GAAIlD,EAAC,GAAI,IAAI,CAACjD,aAAa,CAACoG,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACpD,EAAC,KAAM,IAAI,CAACN,SAAS,CAAClC,OAAO,CAAC6F,OAAO,CAACrD,EAAE,CAAC,IAAI,CAAC;MAEvG,IAAIkD,KAAI,IAAK,CAAC,EAAE;QACd,IAAI,CAACnG,aAAa,CAACmG,KAAK,CAAC,CAACsB,YAAW,GAAIO,WAAU;QACnD,IAAI,CAACnC,YAAY,CAAC,IAAI,CAAC7F,aAAa,CAACmG,KAAK,CAAC;MAC7C,OAAO;QACL,MAAMf,KAAI,GAAI;UACZnC,EAAE,EAAEA,EAAC,GAAI,IAAI,CAACN,SAAS,CAAClC,OAAO,CAAC6F,OAAO,CAACrD,EAAE,IAAIgF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAI,IAAI,CAAC;UAC9EzI,IAAI,EAAED,gBAAgB,CAACC,IAAI,CAAC;UAC5B6H,QAAQ,EAAE,CAAC;UACXC,KAAK,EAAE,IAAI;UACXC,YAAY,EAAEO;QAChB;QAEA,IAAI,CAAChI,aAAa,CAAC6H,IAAI,CAACzC,KAAK;QAC7B,IAAI,CAACD,eAAe,CAACC,KAAK;QAC1B,IAAI,CAACS,YAAY,CAAC,IAAI,CAAC7F,aAAa,CAAC,IAAI,CAACA,aAAa,CAACiF,MAAK,GAAI,CAAC,CAAC;MACrE;IACF,CAAC;IACDhD,uBAAsBA,CAAGgB,EAAE,EAAEmF,SAAS,EAAEC,SAAS,EAAE;MACjD,IAAIA,SAAQ,KAAM,iBAAiB,EAAE;QACnC,MAAMlC,KAAI,GAAI,IAAI,CAACnG,aAAa,CAACoG,SAAS,CAAC,UAAUC,CAAC,EAAE;UACtD,OAAOA,CAAC,CAACpD,EAAC,KAAMA,EAAC;QACnB,CAAC;QAED,IAAIkD,KAAI,IAAK,CAAC,EAAE;UACd,MAAMf,KAAI,GAAI,IAAI,CAACpF,aAAa,CAACmG,KAAK;UACtCf,KAAK,CAACmC,QAAO,GAAI;UACjBnC,KAAK,CAACoC,KAAI,GAAI,KAAI;UAClB,IAAI,CAACrC,eAAe,CAACC,KAAK;QAC5B;MACF;IACF,CAAC;IACDjD,wBAAuBA,CAAGmG,kBAAkB,EAAEP,UAAU,EAAE;MACxD,MAAMhC,cAAa,GAAIkC,IAAI,CAACC,KAAK,CAACI,kBAAiB,GAAIP,UAAS,GAAI,GAAG;MACvE,IAAI,CAAChC,cAAc,CAACA,cAAc;IACpC,CAAC;IACDwC,YAAWA,CAAGC,SAAS,EAAEC,SAAS,EAAE;MAClCC,OAAO,CAAClB,KAAK,CAACgB,SAAS,EAAEC,SAAS;IACpC,CAAC;IACDE,iCAAgCA,CAAGC,KAAK,EAAE;MACxC,IAAI,CAACjG,SAAS,CAAClC,OAAO,CAACoI,QAAQ,CAACD,KAAK;IACvC;EACF,CAAC;EACDE,KAAK,EAAE;IACLlJ,IAAI,EAAE,SAAAA,CAAA,EAAY;MAChB,IAAI,IAAI,CAAC+C,SAAS,EAAE;QAClB,IAAI,CAACjC,YAAY,EAAC;MACpB;IACF;EACF,CAAC;EACDqI,OAAMA,CAAA,EAAK;IACT;IACA,IAAI,CAACrI,YAAY,EAAC;;IAElB;IACA,MAAMsI,UAAS,GAAI,IAAI,CAACpI,KAAK,CAACqI,gBAAe;IAC7C,IAAI,CAACC,WAAU,IAAK,IAAI,CAACA,WAAW,CAACC,OAAO,EAAC;IAC7C,IAAI,CAACD,WAAU,GAAI,IAAI7J,EAAE,CAAC+J,WAAW,CAAC;MACpCC,gBAAgB,EAAE,CAACL,UAAU,CAAC;MAC9BM,kBAAkB,EAAE,IAAI;MACxBlI,SAAS,EAAE;QACTmI,SAAS,EAAE,IAAI,CAAChB,YAAY,CAAChH,IAAI,CAAC,IAAI,CAAC;QACvCiI,8BAA8B,EAAE,IAAI,CAACb,iCAAiC,CAACpH,IAAI,CAAC,IAAI;MAClF;IACF,CAAC;EACH,CAAC;EACDkI,aAAYA,CAAA,EAAK;IACf,IAAI,CAACP,WAAU,IAAK,IAAI,CAACA,WAAW,CAACC,OAAO,EAAC;EAC/C;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}