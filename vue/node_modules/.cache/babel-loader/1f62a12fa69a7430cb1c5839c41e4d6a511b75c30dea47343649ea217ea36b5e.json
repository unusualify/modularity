{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { mapState, mapGetters } from 'vuex';\nimport htmlClasses from '@/utils/htmlClasses';\nexport default {\n  emits: ['update:modelValue'],\n  props: {\n    modelValue: {\n      type: Boolean,\n      \"default\": false\n    },\n    cancelText: {\n      type: String,\n      \"default\": ''\n    },\n    confirmText: {\n      type: String,\n      \"default\": ''\n    }\n  },\n  data: function data() {\n    return {\n      id: Math.ceil(Math.random() * 1000000) + '-modal'\n    };\n  },\n  computed: {\n    show: {\n      get: function get() {\n        return this.modelValue;\n      },\n      set: function set(value) {\n        __log('show set', value);\n        this.$emit('update:modelValue', value);\n      }\n    },\n    textCancel: function textCancel() {\n      return this.cancelText !== '' ? this.cancelText : this.$t('cancel');\n    },\n    textConfirm: function textConfirm() {\n      return this.confirmText !== '' ? this.confirmText : this.$t('confirm');\n    }\n  },\n  methods: {\n    setValue: function setValue(e) {\n      __log('setValue', e.target.name);\n      this[e.target.name] = e.target.value;\n    },\n    openModal: function openModal() {\n      this.show = true;\n    },\n    closeModal: function closeModal() {\n      this.show = false;\n    },\n    cancelModal: function cancelModal() {\n      if (typeof this.cancelCallback === 'undefined') {\n        this.closeModal();\n      } else {\n        this.cancelCallback();\n      }\n      this.$emit('cancel');\n    },\n    confirmModal: function confirmModal() {\n      if (typeof this.confirmCallback === 'undefined') {\n        this.closeModal();\n      } else {\n        this.confirmCallback();\n      }\n      this.$emit('confirm');\n    }\n  },\n  created: function created() {\n    // setInterval((self) => {\n    //   __log('show', self.show)\n    // }, 5000, this)\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","htmlClasses","emits","props","modelValue","type","Boolean","cancelText","String","confirmText","data","id","Math","ceil","random","computed","show","get","set","value","__log","$emit","textCancel","$t","textConfirm","methods","setValue","e","target","name","openModal","closeModal","cancelModal","cancelCallback","confirmModal","confirmCallback","created"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/mixins/modal.js"],"sourcesContent":["import { mapState, mapGetters } from 'vuex'\nimport htmlClasses from '@/utils/htmlClasses'\n\nexport default {\n  emits: ['update:modelValue'],\n  props: {\n    modelValue: {\n      type: Boolean,\n      default: false\n    },\n    cancelText: {\n      type: String,\n      default: ''\n    },\n    confirmText: {\n      type: String,\n      default: ''\n    }\n  },\n  data () {\n    return {\n      id: Math.ceil(Math.random() * 1000000) + '-modal'\n    }\n  },\n\n  computed: {\n    show: {\n      get () {\n        return this.modelValue\n      },\n      set (value) {\n        __log('show set', value)\n        this.$emit('update:modelValue', value)\n      }\n    },\n    textCancel () {\n      return this.cancelText !== '' ? this.cancelText : this.$t('cancel')\n    },\n    textConfirm () {\n      return this.confirmText !== '' ? this.confirmText : this.$t('confirm')\n    }\n  },\n  methods: {\n    setValue (e) {\n      __log('setValue', e.target.name)\n      this[e.target.name] = e.target.value\n    },\n    openModal () {\n      this.show = true\n    },\n    closeModal () {\n      this.show = false\n    },\n\n    cancelModal () {\n      if (typeof this.cancelCallback === 'undefined') {\n        this.closeModal()\n      } else {\n        this.cancelCallback()\n      }\n      this.$emit('cancel')\n    },\n\n    confirmModal () {\n      if (typeof this.confirmCallback === 'undefined') {\n        this.closeModal()\n      } else {\n        this.confirmCallback()\n      }\n      this.$emit('confirm')\n    }\n  },\n  created () {\n    // setInterval((self) => {\n    //   __log('show', self.show)\n    // }, 5000, this)\n  }\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,UAAU,QAAQ,MAAM;AAC3C,OAAOC,WAAW,MAAM,qBAAqB;AAE7C,eAAe;EACbC,KAAK,EAAE,CAAC,mBAAmB,CAAC;EAC5BC,KAAK,EAAE;IACLC,UAAU,EAAE;MACVC,IAAI,EAAEC,OAAO;MACb,WAAS;IACX,CAAC;IACDC,UAAU,EAAE;MACVF,IAAI,EAAEG,MAAM;MACZ,WAAS;IACX,CAAC;IACDC,WAAW,EAAE;MACXJ,IAAI,EAAEG,MAAM;MACZ,WAAS;IACX;EACF,CAAC;EACDE,IAAI,WAAAA,KAAA,EAAI;IACN,OAAO;MACLC,EAAE,EAAEC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,OAAO,CAAC,GAAG;IAC3C,CAAC;EACH,CAAC;EAEDC,QAAQ,EAAE;IACRC,IAAI,EAAE;MACJC,GAAG,WAAAA,IAAA,EAAI;QACL,OAAO,IAAI,CAACb,UAAU;MACxB,CAAC;MACDc,GAAG,WAAAA,IAAEC,KAAK,EAAE;QACVC,KAAK,CAAC,UAAU,EAAED,KAAK,CAAC;QACxB,IAAI,CAACE,KAAK,CAAC,mBAAmB,EAAEF,KAAK,CAAC;MACxC;IACF,CAAC;IACDG,UAAU,WAAAA,WAAA,EAAI;MACZ,OAAO,IAAI,CAACf,UAAU,KAAK,EAAE,GAAG,IAAI,CAACA,UAAU,GAAG,IAAI,CAACgB,EAAE,CAAC,QAAQ,CAAC;IACrE,CAAC;IACDC,WAAW,WAAAA,YAAA,EAAI;MACb,OAAO,IAAI,CAACf,WAAW,KAAK,EAAE,GAAG,IAAI,CAACA,WAAW,GAAG,IAAI,CAACc,EAAE,CAAC,SAAS,CAAC;IACxE;EACF,CAAC;EACDE,OAAO,EAAE;IACPC,QAAQ,WAAAA,SAAEC,CAAC,EAAE;MACXP,KAAK,CAAC,UAAU,EAAEO,CAAC,CAACC,MAAM,CAACC,IAAI,CAAC;MAChC,IAAI,CAACF,CAAC,CAACC,MAAM,CAACC,IAAI,CAAC,GAAGF,CAAC,CAACC,MAAM,CAACT,KAAK;IACtC,CAAC;IACDW,SAAS,WAAAA,UAAA,EAAI;MACX,IAAI,CAACd,IAAI,GAAG,IAAI;IAClB,CAAC;IACDe,UAAU,WAAAA,WAAA,EAAI;MACZ,IAAI,CAACf,IAAI,GAAG,KAAK;IACnB,CAAC;IAEDgB,WAAW,WAAAA,YAAA,EAAI;MACb,IAAI,OAAO,IAAI,CAACC,cAAc,KAAK,WAAW,EAAE;QAC9C,IAAI,CAACF,UAAU,EAAE;MACnB,CAAC,MAAM;QACL,IAAI,CAACE,cAAc,EAAE;MACvB;MACA,IAAI,CAACZ,KAAK,CAAC,QAAQ,CAAC;IACtB,CAAC;IAEDa,YAAY,WAAAA,aAAA,EAAI;MACd,IAAI,OAAO,IAAI,CAACC,eAAe,KAAK,WAAW,EAAE;QAC/C,IAAI,CAACJ,UAAU,EAAE;MACnB,CAAC,MAAM;QACL,IAAI,CAACI,eAAe,EAAE;MACxB;MACA,IAAI,CAACd,KAAK,CAAC,SAAS,CAAC;IACvB;EACF,CAAC;EACDe,OAAO,WAAAA,QAAA,EAAI;IACT;IACA;IACA;EAAA;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}