{"ast":null,"code":"import _typeof from \"/var/www/crm_template/packages/oobook/crm-base/vue/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nexport default function (formNode) {\n  // We are not using FormaData because this can be used for get requests (where you need to send direct params)\n\n  var formRef = null;\n\n  /**\n   * Defaults\n   */\n\n  var includeEmptyValuedElements = false;\n\n  // Currently matching only '[]'.\n  var keyRegex = /[^\\[\\]]+|\\[\\]/g; // eslint-disable-line\n  var $form = null;\n  var $formElements = [];\n\n  /**\n   * Private methods\n   */\n\n  /**\n   * Check to see if the object is a HTML node.\n   *\n   * @param {object} node\n   * @returns {boolean}\n   */\n  function isDomElementNode(node) {\n    return !!(node && _typeof(node) === 'object' && 'nodeType' in node && node.nodeType === 1);\n  }\n\n  /**\n   * Check for last numeric key.\n   *\n   * @param o object\n   * @return mixed (string|undefined)\n   */\n  function checkForLastNumericKey(o) {\n    if (!o || _typeof(o) !== 'object') {\n      return undefined;\n    }\n    return Object.keys(o).filter(function (elem) {\n      return !isNaN(parseInt(elem, 10));\n    }).splice(-1)[0];\n  }\n\n  /**\n   * Get last numeric key from an object.\n   * @param o object\n   * @return int\n   */\n  function getLastIntegerKey(o) {\n    var lastKeyIndex = checkForLastNumericKey(o);\n    if (typeof lastKeyIndex === 'string') {\n      return parseInt(lastKeyIndex, 10);\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * Get the next numeric key (like the index from a PHP array)\n   * @param o object\n   * @return int\n   */\n  function getNextIntegerKey(o) {\n    var lastKeyIndex = checkForLastNumericKey(o);\n    if (typeof lastKeyIndex === 'string') {\n      return parseInt(lastKeyIndex, 10) + 1;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * Get the real number of properties from an object.\n   *\n   * @param {object} o\n   * @returns {number}\n   */\n  function getObjLength(o) {\n    if (_typeof(o) !== 'object' || o === null) {\n      return 0;\n    }\n    var l = 0;\n    var k;\n    if (typeof Object.keys === 'function') {\n      l = Object.keys(o).length;\n    } else {\n      for (k in o) {\n        if (o.hasOwnProperty(k)) {\n          l++;\n        }\n      }\n    }\n    return l;\n  }\n\n  // Iteration through arrays.\n  // Compatible with IE.\n  function forEach(arr, callback) {\n    if ([].forEach) {\n      return [].forEach.call(arr, callback);\n    }\n    var i;\n    for (i = 0; i < arr.length; i++) {\n      callback.call(arr, arr[i], i);\n    }\n  }\n\n  // Constructor\n  function init(formNode) {\n    // Assign the current form reference.\n    if (!formNode) return false;\n    formRef = formNode;\n    if (!setForm()) {\n      return false;\n    }\n    if (!setFormElements()) {\n      return false;\n    }\n    return convertToObj();\n  }\n\n  // Set the main form object we are working on.\n  function setForm() {\n    switch (_typeof(formRef)) {\n      case 'string':\n        $form = document.getElementById(formRef);\n        break;\n      case 'object':\n        if (isDomElementNode(formRef)) {\n          $form = formRef;\n        }\n        break;\n    }\n    return $form;\n  }\n  function isUploadForm() {\n    return !!($form.enctype && $form.enctype === 'multipart/form-data');\n  }\n\n  // Set the elements we need to parse.\n  function setFormElements() {\n    $formElements = $form.querySelectorAll('input, textarea, select');\n    return $formElements.length;\n  }\n  function isRadio($domNode) {\n    return $domNode.nodeName === 'INPUT' && $domNode.type === 'radio';\n  }\n  function isCheckbox($domNode) {\n    return $domNode.nodeName === 'INPUT' && $domNode.type === 'checkbox';\n  }\n  function isFileField($domNode) {\n    return $domNode.nodeName === 'INPUT' && $domNode.type === 'file';\n  }\n  function isTextarea($domNode) {\n    return $domNode.nodeName === 'TEXTAREA';\n  }\n  function isSelectSimple($domNode) {\n    return $domNode.nodeName === 'SELECT' && $domNode.type === 'select-one';\n  }\n  function isSelectMultiple($domNode) {\n    return $domNode.nodeName === 'SELECT' && $domNode.type === 'select-multiple';\n  }\n  function isSubmitButton($domNode) {\n    return $domNode.nodeName === 'BUTTON' && $domNode.type === 'submit';\n  }\n  function isChecked($domNode) {\n    return $domNode.checked;\n  }\n\n  // function isMultiple($domNode){\n  //  return ($domNode.multiple ? true : false);\n  // }\n\n  function isFileList($domNode) {\n    return window.FileList && $domNode.files instanceof window.FileList;\n  }\n  function getNodeValues($domNode) {\n    // We're only interested in the radio that is checked.\n    if (isRadio($domNode)) {\n      return isChecked($domNode) ? $domNode.value : false;\n    }\n\n    // We're only interested in the checkbox that is checked.\n    if (isCheckbox($domNode)) {\n      return isChecked($domNode) ? $domNode.value : false;\n    }\n\n    // File inputs are a special case.\n    // We have to grab the .files property of the input, which is a FileList.\n    if (isFileField($domNode)) {\n      // Ignore input file fields if the form is not encoded properly.\n      if (isUploadForm()) {\n        // HTML5 compatible browser.\n        if (isFileList($domNode) && $domNode.files.length > 0) {\n          return $domNode.files;\n        } else {\n          return $domNode.value && $domNode.value !== '' ? $domNode.value : false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n    // We're only interested in textarea fields that have values.\n    if (isTextarea($domNode)) {\n      return $domNode.value && $domNode.value !== '' ? $domNode.value : false;\n    }\n    if (isSelectSimple($domNode)) {\n      if ($domNode.value && $domNode.value !== '') {\n        return $domNode.value;\n      } else if ($domNode.options && $domNode.options.length && $domNode.options[0].value !== '') {\n        return $domNode.options[0].value;\n      } else {\n        return false;\n      }\n    }\n\n    // We're only interested in multiple selects that have at least one option selected.\n    if (isSelectMultiple($domNode)) {\n      if ($domNode.options && $domNode.options.length > 0) {\n        var values = [];\n        forEach($domNode.options, function ($option) {\n          if ($option.selected) {\n            values.push($option.value);\n          }\n        });\n        if (includeEmptyValuedElements) {\n          return values;\n        } else {\n          return values.length ? values : false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n    // We're only interested if the button is type=\"submit\"\n    if (isSubmitButton($domNode)) {\n      if ($domNode.value && $domNode.value !== '') {\n        return $domNode.value;\n      }\n      if ($domNode.innerText && $domNode.innerText !== '') {\n        return $domNode.innerText;\n      }\n      return false;\n    }\n\n    // Fallback or other non special fields.\n    if (typeof $domNode.value !== 'undefined') {\n      if (includeEmptyValuedElements) {\n        return $domNode.value;\n      } else {\n        return $domNode.value !== '' ? $domNode.value : false;\n      }\n    } else {\n      return false;\n    }\n  }\n  function processSingleLevelNode($domNode, arr, domNodeValue, result) {\n    // Get the last remaining key.\n    var key = arr[0];\n\n    // We're only interested in the radio that is checked.\n    if (isRadio($domNode)) {\n      if (domNodeValue !== false) {\n        result[key] = domNodeValue;\n        return domNodeValue;\n      } else {\n        return;\n      }\n    }\n\n    // Checkboxes are a special case.\n    // We have to grab each checked values\n    // and put them into an array.\n    if (isCheckbox($domNode)) {\n      if (domNodeValue !== false) {\n        if (!result[key]) {\n          result[key] = [];\n        }\n        return result[key].push(domNodeValue);\n      } else {\n        return;\n      }\n    }\n\n    // Multiple select is a special case.\n    // We have to grab each selected option and put them into an array.\n    if (isSelectMultiple($domNode)) {\n      if (domNodeValue !== false) {\n        result[key] = domNodeValue;\n      } else {\n        return;\n      }\n    }\n\n    // Fallback or other cases that don't\n    // need special treatment of the value.\n    result[key] = domNodeValue;\n    return domNodeValue;\n  }\n  function processMultiLevelNode($domNode, arr, value, result) {\n    var keyName = arr[0];\n    if (arr.length > 1) {\n      if (keyName === '[]') {\n        // result.push({});\n        result[getNextIntegerKey(result)] = {};\n        return processMultiLevelNode($domNode, arr.splice(1, arr.length), value, result[getLastIntegerKey(result)]);\n      } else {\n        if (result[keyName] && getObjLength(result[keyName]) > 0) {\n          // result[keyName].push(null);\n          return processMultiLevelNode($domNode, arr.splice(1, arr.length), value, result[keyName]);\n        } else {\n          result[keyName] = {};\n        }\n        return processMultiLevelNode($domNode, arr.splice(1, arr.length), value, result[keyName]);\n      }\n    }\n\n    // Last key, attach the original value.\n    if (arr.length === 1) {\n      if (keyName === '[]') {\n        // result.push(value);\n        result[getNextIntegerKey(result)] = value;\n        return result;\n      } else {\n        processSingleLevelNode($domNode, arr, value, result);\n\n        //  result[keyName] = value;\n        return result;\n      }\n    }\n  }\n  function convertToObj() {\n    var i = 0;\n    var objKeyNames;\n    var $domNode;\n    var domNodeValue;\n    var result = {};\n    for (i = 0; i < $formElements.length; i++) {\n      $domNode = $formElements[i];\n\n      // Skip the element if the 'name' attribute is empty.\n      // Skip the 'disabled' elements.\n      // Skip the non selected radio elements.\n      if (!$domNode.name || $domNode.name === '' || $domNode.disabled || isRadio($domNode) && !isChecked($domNode)) {\n        continue;\n      }\n\n      // Get the final processed domNode value.\n      domNodeValue = getNodeValues($domNode);\n\n      // Exclude empty valued nodes if the settings allow it.\n      if (domNodeValue === false && !includeEmptyValuedElements) {\n        continue;\n      }\n\n      // Extract all possible keys\n      // Eg. name=\"firstName\", name=\"settings[a][b]\", name=\"settings[0][a]\"\n      objKeyNames = $domNode.name.match(keyRegex);\n      if (objKeyNames.length === 1) {\n        processSingleLevelNode($domNode, objKeyNames, domNodeValue || '', result);\n      }\n      if (objKeyNames.length > 1) {\n        processMultiLevelNode($domNode, objKeyNames, domNodeValue || '', result);\n      }\n    }\n\n    // Check the length of the result.\n    var resultLength = getObjLength(result);\n    return resultLength > 0 ? result : false;\n  }\n  return init(formNode);\n}","map":{"version":3,"names":["formNode","formRef","includeEmptyValuedElements","keyRegex","$form","$formElements","isDomElementNode","node","_typeof","nodeType","checkForLastNumericKey","o","undefined","Object","keys","filter","elem","isNaN","parseInt","splice","getLastIntegerKey","lastKeyIndex","getNextIntegerKey","getObjLength","l","k","length","hasOwnProperty","forEach","arr","callback","call","i","init","setForm","setFormElements","convertToObj","document","getElementById","isUploadForm","enctype","querySelectorAll","isRadio","$domNode","nodeName","type","isCheckbox","isFileField","isTextarea","isSelectSimple","isSelectMultiple","isSubmitButton","isChecked","checked","isFileList","window","FileList","files","getNodeValues","value","options","values","$option","selected","push","innerText","processSingleLevelNode","domNodeValue","result","key","processMultiLevelNode","keyName","objKeyNames","name","disabled","match","resultLength"],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/utils/formDataAsObj.js"],"sourcesContent":["export default function (formNode) {\n  // We are not using FormaData because this can be used for get requests (where you need to send direct params)\n\n  let formRef = null\n\n  /**\n   * Defaults\n   */\n\n  const includeEmptyValuedElements = false\n\n  // Currently matching only '[]'.\n  let keyRegex = /[^\\[\\]]+|\\[\\]/g // eslint-disable-line\n  let $form = null\n  let $formElements = []\n\n  /**\n   * Private methods\n   */\n\n  /**\n   * Check to see if the object is a HTML node.\n   *\n   * @param {object} node\n   * @returns {boolean}\n   */\n  function isDomElementNode (node) {\n    return !!(node &&\n      typeof node === 'object' &&\n      'nodeType' in node &&\n      node.nodeType === 1)\n  }\n\n  /**\n   * Check for last numeric key.\n   *\n   * @param o object\n   * @return mixed (string|undefined)\n   */\n  function checkForLastNumericKey (o) {\n    if (!o || typeof o !== 'object') {\n      return undefined\n    }\n\n    return Object.keys(o).filter(function (elem) {\n      return !isNaN(parseInt(elem, 10))\n    }).splice(-1)[0]\n  }\n\n  /**\n   * Get last numeric key from an object.\n   * @param o object\n   * @return int\n   */\n  function getLastIntegerKey (o) {\n    const lastKeyIndex = checkForLastNumericKey(o)\n    if (typeof lastKeyIndex === 'string') {\n      return parseInt(lastKeyIndex, 10)\n    } else {\n      return 0\n    }\n  }\n\n  /**\n   * Get the next numeric key (like the index from a PHP array)\n   * @param o object\n   * @return int\n   */\n  function getNextIntegerKey (o) {\n    const lastKeyIndex = checkForLastNumericKey(o)\n    if (typeof lastKeyIndex === 'string') {\n      return parseInt(lastKeyIndex, 10) + 1\n    } else {\n      return 0\n    }\n  }\n\n  /**\n   * Get the real number of properties from an object.\n   *\n   * @param {object} o\n   * @returns {number}\n   */\n  function getObjLength (o) {\n    if (typeof o !== 'object' || o === null) {\n      return 0\n    }\n\n    let l = 0\n    let k\n\n    if (typeof Object.keys === 'function') {\n      l = Object.keys(o).length\n    } else {\n      for (k in o) {\n        if (o.hasOwnProperty(k)) {\n          l++\n        }\n      }\n    }\n\n    return l\n  }\n\n  // Iteration through arrays.\n  // Compatible with IE.\n  function forEach (arr, callback) {\n    if ([].forEach) {\n      return [].forEach.call(arr, callback)\n    }\n\n    let i\n    for (i = 0; i < arr.length; i++) {\n      callback.call(arr, arr[i], i)\n    }\n  }\n\n  // Constructor\n  function init (formNode) {\n    // Assign the current form reference.\n    if (!formNode) return false\n\n    formRef = formNode\n\n    if (!setForm()) {\n      return false\n    }\n\n    if (!setFormElements()) {\n      return false\n    }\n\n    return convertToObj()\n  }\n\n  // Set the main form object we are working on.\n  function setForm () {\n    switch (typeof formRef) {\n      case 'string':\n        $form = document.getElementById(formRef)\n        break\n\n      case 'object':\n        if (isDomElementNode(formRef)) {\n          $form = formRef\n        }\n        break\n    }\n\n    return $form\n  }\n\n  function isUploadForm () {\n    return (!!($form.enctype && $form.enctype === 'multipart/form-data'))\n  }\n\n  // Set the elements we need to parse.\n  function setFormElements () {\n    $formElements = $form.querySelectorAll('input, textarea, select')\n    return $formElements.length\n  }\n\n  function isRadio ($domNode) {\n    return $domNode.nodeName === 'INPUT' && $domNode.type === 'radio'\n  }\n\n  function isCheckbox ($domNode) {\n    return $domNode.nodeName === 'INPUT' && $domNode.type === 'checkbox'\n  }\n\n  function isFileField ($domNode) {\n    return $domNode.nodeName === 'INPUT' && $domNode.type === 'file'\n  }\n\n  function isTextarea ($domNode) {\n    return $domNode.nodeName === 'TEXTAREA'\n  }\n\n  function isSelectSimple ($domNode) {\n    return $domNode.nodeName === 'SELECT' && $domNode.type === 'select-one'\n  }\n\n  function isSelectMultiple ($domNode) {\n    return $domNode.nodeName === 'SELECT' && $domNode.type === 'select-multiple'\n  }\n\n  function isSubmitButton ($domNode) {\n    return $domNode.nodeName === 'BUTTON' && $domNode.type === 'submit'\n  }\n\n  function isChecked ($domNode) {\n    return $domNode.checked\n  }\n\n  // function isMultiple($domNode){\n  //  return ($domNode.multiple ? true : false);\n  // }\n\n  function isFileList ($domNode) {\n    return (window.FileList && $domNode.files instanceof window.FileList)\n  }\n\n  function getNodeValues ($domNode) {\n    // We're only interested in the radio that is checked.\n    if (isRadio($domNode)) {\n      return isChecked($domNode) ? $domNode.value : false\n    }\n\n    // We're only interested in the checkbox that is checked.\n    if (isCheckbox($domNode)) {\n      return isChecked($domNode) ? $domNode.value : false\n    }\n\n    // File inputs are a special case.\n    // We have to grab the .files property of the input, which is a FileList.\n    if (isFileField($domNode)) {\n      // Ignore input file fields if the form is not encoded properly.\n      if (isUploadForm()) {\n        // HTML5 compatible browser.\n        if (isFileList($domNode) && $domNode.files.length > 0) {\n          return $domNode.files\n        } else {\n          return ($domNode.value && $domNode.value !== '' ? $domNode.value : false)\n        }\n      } else {\n        return false\n      }\n    }\n\n    // We're only interested in textarea fields that have values.\n    if (isTextarea($domNode)) {\n      return ($domNode.value && $domNode.value !== '' ? $domNode.value : false)\n    }\n\n    if (isSelectSimple($domNode)) {\n      if ($domNode.value && $domNode.value !== '') {\n        return $domNode.value\n      } else if ($domNode.options && $domNode.options.length && $domNode.options[0].value !== '') {\n        return $domNode.options[0].value\n      } else {\n        return false\n      }\n    }\n\n    // We're only interested in multiple selects that have at least one option selected.\n    if (isSelectMultiple($domNode)) {\n      if ($domNode.options && $domNode.options.length > 0) {\n        const values = []\n        forEach($domNode.options, function ($option) {\n          if ($option.selected) {\n            values.push($option.value)\n          }\n        })\n\n        if (includeEmptyValuedElements) {\n          return values\n        } else {\n          return (values.length ? values : false)\n        }\n      } else {\n        return false\n      }\n    }\n\n    // We're only interested if the button is type=\"submit\"\n    if (isSubmitButton($domNode)) {\n      if ($domNode.value && $domNode.value !== '') {\n        return $domNode.value\n      }\n\n      if ($domNode.innerText && $domNode.innerText !== '') {\n        return $domNode.innerText\n      }\n\n      return false\n    }\n\n    // Fallback or other non special fields.\n    if (typeof $domNode.value !== 'undefined') {\n      if (includeEmptyValuedElements) {\n        return $domNode.value\n      } else {\n        return ($domNode.value !== '' ? $domNode.value : false)\n      }\n    } else {\n      return false\n    }\n  }\n\n  function processSingleLevelNode ($domNode, arr, domNodeValue, result) {\n    // Get the last remaining key.\n    const key = arr[0]\n\n    // We're only interested in the radio that is checked.\n    if (isRadio($domNode)) {\n      if (domNodeValue !== false) {\n        result[key] = domNodeValue\n        return domNodeValue\n      } else {\n        return\n      }\n    }\n\n    // Checkboxes are a special case.\n    // We have to grab each checked values\n    // and put them into an array.\n    if (isCheckbox($domNode)) {\n      if (domNodeValue !== false) {\n        if (!result[key]) {\n          result[key] = []\n        }\n\n        return result[key].push(domNodeValue)\n      } else {\n        return\n      }\n    }\n\n    // Multiple select is a special case.\n    // We have to grab each selected option and put them into an array.\n    if (isSelectMultiple($domNode)) {\n      if (domNodeValue !== false) {\n        result[key] = domNodeValue\n      } else {\n        return\n      }\n    }\n\n    // Fallback or other cases that don't\n    // need special treatment of the value.\n    result[key] = domNodeValue\n\n    return domNodeValue\n  }\n\n  function processMultiLevelNode ($domNode, arr, value, result) {\n    const keyName = arr[0]\n\n    if (arr.length > 1) {\n      if (keyName === '[]') {\n        // result.push({});\n        result[getNextIntegerKey(result)] = {}\n        return processMultiLevelNode(\n          $domNode,\n          arr.splice(1, arr.length),\n          value,\n          result[getLastIntegerKey(result)]\n        )\n      } else {\n        if (result[keyName] && getObjLength(result[keyName]) > 0) {\n          // result[keyName].push(null);\n          return processMultiLevelNode(\n            $domNode,\n            arr.splice(1, arr.length),\n            value,\n            result[keyName]\n          )\n        } else {\n          result[keyName] = {}\n        }\n\n        return processMultiLevelNode($domNode, arr.splice(1, arr.length), value, result[keyName])\n      }\n    }\n\n    // Last key, attach the original value.\n    if (arr.length === 1) {\n      if (keyName === '[]') {\n        // result.push(value);\n        result[getNextIntegerKey(result)] = value\n        return result\n      } else {\n        processSingleLevelNode($domNode, arr, value, result)\n\n        //  result[keyName] = value;\n        return result\n      }\n    }\n  }\n\n  function convertToObj () {\n    let i = 0\n    let objKeyNames\n    let $domNode\n    let domNodeValue\n    const result = {}\n\n    for (i = 0; i < $formElements.length; i++) {\n      $domNode = $formElements[i]\n\n      // Skip the element if the 'name' attribute is empty.\n      // Skip the 'disabled' elements.\n      // Skip the non selected radio elements.\n      if (\n        !$domNode.name ||\n        $domNode.name === '' ||\n        $domNode.disabled ||\n        (isRadio($domNode) && !isChecked($domNode))\n      ) {\n        continue\n      }\n\n      // Get the final processed domNode value.\n      domNodeValue = getNodeValues($domNode)\n\n      // Exclude empty valued nodes if the settings allow it.\n      if (domNodeValue === false && !includeEmptyValuedElements) {\n        continue\n      }\n\n      // Extract all possible keys\n      // Eg. name=\"firstName\", name=\"settings[a][b]\", name=\"settings[0][a]\"\n      objKeyNames = $domNode.name.match(keyRegex)\n\n      if (objKeyNames.length === 1) {\n        processSingleLevelNode(\n          $domNode,\n          objKeyNames,\n          (domNodeValue || ''),\n          result\n        )\n      }\n\n      if (objKeyNames.length > 1) {\n        processMultiLevelNode(\n          $domNode,\n          objKeyNames,\n          (domNodeValue || ''),\n          result\n        )\n      }\n    }\n\n    // Check the length of the result.\n    const resultLength = getObjLength(result)\n\n    return resultLength > 0 ? result : false\n  }\n\n  return init(formNode)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}