{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VSwitch.css\";\n\n// Components\nimport { filterControlProps, makeSelectionControlProps, VSelectionControl } from \"../VSelectionControl/VSelectionControl.mjs\";\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VProgressCircular } from \"../VProgressCircular/index.mjs\"; // Composables\nimport { LoaderSlot, useLoader } from \"../../composables/loader.mjs\";\nimport { useFocus } from \"../../composables/focus.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utility\nimport { computed, ref } from 'vue';\nimport { filterInputAttrs, genericComponent, getUid, useRender } from \"../../util/index.mjs\"; // Types\nexport const VSwitch = genericComponent()({\n  name: 'VSwitch',\n  inheritAttrs: false,\n  props: {\n    indeterminate: Boolean,\n    inset: Boolean,\n    flat: Boolean,\n    loading: {\n      type: [Boolean, String],\n      default: false\n    },\n    ...makeVInputProps(),\n    ...makeSelectionControlProps()\n  },\n  emits: {\n    'update:focused': focused => true,\n    'update:modelValue': () => true,\n    'update:indeterminate': val => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const indeterminate = useProxiedModel(props, 'indeterminate');\n    const model = useProxiedModel(props, 'modelValue');\n    const {\n      loaderClasses\n    } = useLoader(props);\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const loaderColor = computed(() => {\n      return typeof props.loading === 'string' && props.loading !== '' ? props.loading : props.color;\n    });\n    const uid = getUid();\n    const id = computed(() => props.id || `switch-${uid}`);\n    function onChange() {\n      if (indeterminate.value) {\n        indeterminate.value = false;\n      }\n    }\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs);\n      const [inputProps, _1] = filterInputProps(props);\n      const [controlProps, _2] = filterControlProps(props);\n      const control = ref();\n      function onClick() {\n        control.value?.input?.click();\n      }\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-switch', {\n          'v-switch--inset': props.inset\n        }, {\n          'v-switch--indeterminate': indeterminate.value\n        }, loaderClasses.value]\n      }, inputAttrs, inputProps, {\n        \"id\": id.value,\n        \"focused\": isFocused.value\n      }), {\n        ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            messagesId,\n            isDisabled,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VSelectionControl, _mergeProps({\n            \"ref\": control\n          }, controlProps, {\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": [$event => model.value = $event, onChange],\n            \"id\": id.value,\n            \"aria-describedby\": messagesId.value,\n            \"type\": \"checkbox\",\n            \"aria-checked\": indeterminate.value ? 'mixed' : undefined,\n            \"disabled\": isDisabled.value,\n            \"readonly\": isReadonly.value,\n            \"onFocus\": focus,\n            \"onBlur\": blur\n          }, controlAttrs), {\n            ...slots,\n            default: () => _createVNode(\"div\", {\n              \"class\": \"v-switch__track\",\n              \"onClick\": onClick\n            }, null),\n            input: _ref3 => {\n              let {\n                textColorClasses,\n                textColorStyles\n              } = _ref3;\n              return _createVNode(\"div\", {\n                \"class\": ['v-switch__thumb', textColorClasses.value],\n                \"style\": textColorStyles.value\n              }, [props.loading && _createVNode(LoaderSlot, {\n                \"name\": \"v-switch\",\n                \"active\": true,\n                \"color\": isValid.value === false ? undefined : loaderColor.value\n              }, {\n                default: slotProps => slots.loader ? slots.loader(slotProps) : _createVNode(VProgressCircular, {\n                  \"active\": slotProps.isActive,\n                  \"color\": slotProps.color,\n                  \"indeterminate\": true,\n                  \"size\": \"16\",\n                  \"width\": \"2\"\n                }, null)\n              })]);\n            }\n          });\n        }\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"names":["filterControlProps","makeSelectionControlProps","VSelectionControl","filterInputProps","makeVInputProps","VInput","VProgressCircular","LoaderSlot","useLoader","useFocus","useProxiedModel","computed","ref","filterInputAttrs","genericComponent","getUid","useRender","VSwitch","name","inheritAttrs","props","indeterminate","Boolean","inset","flat","loading","type","String","default","emits","focused","update:modelValue","val","setup","_ref","attrs","slots","model","loaderClasses","isFocused","focus","blur","loaderColor","color","uid","id","onChange","value","inputAttrs","controlAttrs","inputProps","_1","controlProps","_2","control","onClick","input","click","_createVNode","_mergeProps","_ref2","messagesId","isDisabled","isReadonly","isValid","$event","undefined","_ref3","textColorClasses","textColorStyles","slotProps","loader","isActive"],"sources":["../../../src/components/VSwitch/VSwitch.tsx"],"sourcesContent":["// Styles\nimport './VSwitch.sass'\n\n// Components\nimport { filterControlProps, makeSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { LoaderSlot, useLoader } from '@/composables/loader'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, ref } from 'vue'\nimport { filterInputAttrs, genericComponent, getUid, useRender } from '@/util'\n\n// Types\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VSelectionControlSlots } from '@/components/VSelectionControl/VSelectionControl'\n\nexport type VSwitchSlots = VInputSlots & VSelectionControlSlots\n\nexport const VSwitch = genericComponent<VSwitchSlots>()({\n  name: 'VSwitch',\n\n  inheritAttrs: false,\n\n  props: {\n    indeterminate: Boolean,\n    inset: Boolean,\n    flat: Boolean,\n    loading: {\n      type: [Boolean, String],\n      default: false,\n    },\n\n    ...makeVInputProps(),\n    ...makeSelectionControlProps(),\n  },\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': () => true,\n    'update:indeterminate': (val: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const model = useProxiedModel(props, 'modelValue')\n    const { loaderClasses } = useLoader(props)\n    const { isFocused, focus, blur } = useFocus(props)\n\n    const loaderColor = computed(() => {\n      return typeof props.loading === 'string' && props.loading !== ''\n        ? props.loading\n        : props.color\n    })\n\n    const uid = getUid()\n    const id = computed(() => props.id || `switch-${uid}`)\n\n    function onChange () {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = filterInputProps(props)\n      const [controlProps, _2] = filterControlProps(props)\n      const control = ref<VSelectionControl>()\n\n      function onClick () {\n        control.value?.input?.click()\n      }\n\n      return (\n        <VInput\n          class={[\n            'v-switch',\n            { 'v-switch--inset': props.inset },\n            { 'v-switch--indeterminate': indeterminate.value },\n            loaderClasses.value,\n          ]}\n          { ...inputAttrs }\n          { ...inputProps }\n          id={ id.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n              isValid,\n            }) => (\n              <VSelectionControl\n                ref={ control }\n                { ...controlProps }\n                v-model={ model.value }\n                id={ id.value }\n                aria-describedby={ messagesId.value }\n                type=\"checkbox\"\n                onUpdate:modelValue={ onChange }\n                aria-checked={ indeterminate.value ? 'mixed' : undefined }\n                disabled={ isDisabled.value }\n                readonly={ isReadonly.value }\n                onFocus={ focus }\n                onBlur={ blur }\n                { ...controlAttrs }\n              >\n                {{\n                  ...slots,\n                  default: () => (<div class=\"v-switch__track\" onClick={ onClick }></div>),\n                  input: ({ textColorClasses, textColorStyles }) => (\n                    <div\n                      class={[\n                        'v-switch__thumb',\n                        textColorClasses.value,\n                      ]}\n                      style={ textColorStyles.value }\n                    >\n                      { props.loading && (\n                        <LoaderSlot\n                          name=\"v-switch\"\n                          active\n                          color={ isValid.value === false ? undefined : loaderColor.value }\n                        >\n                          { slotProps => (\n                            slots.loader\n                              ? slots.loader(slotProps)\n                              : (\n                                  <VProgressCircular\n                                    active={ slotProps.isActive }\n                                    color={ slotProps.color }\n                                    indeterminate\n                                    size=\"16\"\n                                    width=\"2\"\n                                  />\n                              )\n                          )}\n                        </LoaderSlot>\n                      ) }\n                    </div>\n                  ),\n                }}\n              </VSelectionControl>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSwitch = InstanceType<typeof VSwitch>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}