{"ast":null,"code":"import { mapState, mapGetters } from 'vuex';\nimport { DATATABLE, FORM } from '@/store/mutations/index';\nimport ACTIONS from '@/store/actions';\nexport default {\n  props: {\n    name: {\n      type: String,\n      default: \"Item\"\n    },\n    titleKey: {\n      type: String,\n      default: \"name\"\n    },\n    hideDefaultHeader: Boolean,\n    hideDefaultFooter: Boolean,\n    isRowEditing: Boolean,\n    createOnModal: Boolean,\n    editOnModal: Boolean\n    // tableOptions: {\n    //   type: Object,\n    //   default() {\n    //     return { \n    //       page: 1,\n    //       itemsPerPage: 5,\n    //       sortBy: [],\n    //       sortDesc: [],\n    //       groupBy: [],\n    //       groupDesc: [],\n    //       multiSort: false,\n    //       mustSort: false\n    //     }\n    //   }\n    // },\n  },\n\n  data: function () {\n    return {\n      editedIndex: -1,\n      createUrl: window[process.env.VUE_APP_NAME].ENDPOINTS.create,\n      editUrl: window[process.env.VUE_APP_NAME].ENDPOINTS.edit\n    };\n  },\n  watch: {\n    editedItem(val) {\n      this.editedIndex = this.elements.findIndex(o => {\n        return o.id === val.id;\n      });\n      // __log('editedIndex', this.editedIndex)\n    }\n  },\n\n  computed: {\n    formTitle() {\n      return this.$t(this.editedIndex === -1 ? 'new-item' : 'edit-item', {\n        'item': this.name\n      });\n      return this.editedIndex === -1 ? `New ${this.name}` : `Edit ${this.name}`;\n    },\n    options: {\n      get() {\n        return this.$store.state.datatable.options;\n      },\n      set(value) {\n        // __log('options set', value)\n        this.$store.dispatch(ACTIONS.GET_DATATABLE, {\n          payload: {\n            options: value\n          }\n        });\n        // this.$store.commit(DATATABLE.UPDATE_DATATABLE_OPTIONS, value)\n      }\n    },\n\n    search: {\n      get() {\n        return this.$store.state.datatable.search;\n      },\n      set(val) {\n        this.$store.commit(DATATABLE.UPDATE_DATATABLE_SEARCH, val);\n        this.$store.dispatch(ACTIONS.GET_DATATABLE);\n      }\n    },\n    ...mapState({\n      // datatable module\n      headers: state => state.datatable.headers,\n      loading: state => state.datatable.loading,\n      elements: state => state.datatable.data,\n      // form module\n      inputs: state => state.form.inputs,\n      editedItem: state => state.form.editedItem,\n      formLoading: state => state.form.loading,\n      formErrors: state => state.form.errors\n    }),\n    ...mapGetters([\n    // datatable module\n    'totalElements', 'formatterColumns', 'editableColumns', 'rowEditables', 'rowActionsType', 'rowActions', 'mainFilters',\n    // form module\n    'defaultItem'])\n  },\n  methods: {\n    handleFunctionCall(functionName, ...val) {\n      // __log(functionName)\n      return this[functionName](...val);\n    },\n    initialize() {\n      this.$store.commit(DATATABLE.UPDATE_DATATABLE_SEARCH, '');\n      this.$store.commit(DATATABLE.UPDATE_DATATABLE_OPTIONS, window[process.env.VUE_APP_NAME].STORE.datatable.options);\n      this.$store.dispatch(ACTIONS.GET_DATATABLE);\n    },\n    editItem(item) {\n      if (this.editOnModal) {\n        this.setEditedItem(item);\n        this.$refs.formModal.openModal();\n      } else {\n        const route = this.editUrl.replace(':id', item.id);\n        window.open(route);\n      }\n    },\n    deleteItem(item) {\n      this.setEditedItem(item);\n      this.$refs.dialog.openModal();\n    },\n    formatDate(value) {\n      // __log(value)\n      return this.$d(new Date(value), 'long');\n      return new Date(value).toLocaleString();\n    },\n    setEditedItem(item) {\n      // this.editedIndex = this.elements.indexOf(item)\n      // this.editedItem = Object.assign({}, item)\n      this.$store.commit(FORM.SET_EDITED_ITEM, item);\n    },\n    resetEditedItem() {\n      this.$nextTick(() => {\n        // this.editedItem = Object.assign({}, this.defaultItem)\n        this.$store.commit(FORM.SET_EDITED_ITEM, this.defaultItem);\n        // this.editedIndex = -1\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
