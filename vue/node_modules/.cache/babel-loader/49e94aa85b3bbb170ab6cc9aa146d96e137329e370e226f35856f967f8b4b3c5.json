{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n// Utilities\nimport { computed, inject, provide, ref } from 'vue';\n\n// Types\n\n// Depth\nexport var DepthKey = Symbol[\"for\"]('vuetify:depth');\nexport function useDepth(hasPrepend) {\n  var parent = inject(DepthKey, ref(-1));\n  var depth = computed(function () {\n    return parent.value + 1 + (hasPrepend !== null && hasPrepend !== void 0 && hasPrepend.value ? 1 : 0);\n  });\n  provide(DepthKey, depth);\n  return depth;\n}\n\n// List\nexport var ListKey = Symbol[\"for\"]('vuetify:list');\nexport function createList() {\n  var parent = inject(ListKey, {\n    hasPrepend: ref(false),\n    updateHasPrepend: function updateHasPrepend() {\n      return null;\n    }\n  });\n  var data = {\n    hasPrepend: ref(false),\n    updateHasPrepend: function updateHasPrepend(value) {\n      if (value) data.hasPrepend.value = value;\n    }\n  };\n  provide(ListKey, data);\n  return parent;\n}\nexport function useList() {\n  return inject(ListKey, null);\n}","map":{"version":3,"names":["computed","inject","provide","ref","DepthKey","Symbol","useDepth","hasPrepend","parent","depth","value","ListKey","createList","updateHasPrepend","data","useList"],"sources":["../../../src/components/VList/list.ts"],"sourcesContent":["// Utilities\nimport { computed, inject, provide, ref } from 'vue'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\n\n// Depth\nexport const DepthKey: InjectionKey<Ref<number>> = Symbol.for('vuetify:depth')\n\nexport function useDepth (hasPrepend?: Ref<boolean>) {\n  const parent = inject(DepthKey, ref(-1))\n\n  const depth = computed(() => parent.value + 1 + (hasPrepend?.value ? 1 : 0))\n\n  provide(DepthKey, depth)\n\n  return depth\n}\n\n// List\nexport const ListKey: InjectionKey<{\n  hasPrepend: Ref<boolean>\n  updateHasPrepend: (value: boolean) => void\n}> = Symbol.for('vuetify:list')\n\nexport function createList () {\n  const parent = inject(ListKey, { hasPrepend: ref(false), updateHasPrepend: () => null })\n\n  const data = {\n    hasPrepend: ref(false),\n    updateHasPrepend: (value: boolean) => {\n      if (value) data.hasPrepend.value = value\n    },\n  }\n\n  provide(ListKey, data)\n\n  return parent\n}\n\nexport function useList () {\n  return inject(ListKey, null)\n}\n"],"mappings":";;;AAAA;AACA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAEC,GAAG,QAAQ,KAAK;;AAEpD;;AAGA;AACA,OAAO,IAAMC,QAAmC,GAAGC,MAAM,OAAI,CAAC,eAAe,CAAC;AAE9E,OAAO,SAASC,QAAQA,CAAEC,UAAyB,EAAE;EACnD,IAAMC,MAAM,GAAGP,MAAM,CAACG,QAAQ,EAAED,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAExC,IAAMM,KAAK,GAAGT,QAAQ,CAAC;IAAA,OAAMQ,MAAM,CAACE,KAAK,GAAG,CAAC,IAAIH,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;EAAA,EAAC;EAE5ER,OAAO,CAACE,QAAQ,EAAEK,KAAK,CAAC;EAExB,OAAOA,KAAK;AACd;;AAEA;AACA,OAAO,IAAME,OAGX,GAAGN,MAAM,OAAI,CAAC,cAAc,CAAC;AAE/B,OAAO,SAASO,UAAUA,CAAA,EAAI;EAC5B,IAAMJ,MAAM,GAAGP,MAAM,CAACU,OAAO,EAAE;IAAEJ,UAAU,EAAEJ,GAAG,CAAC,KAAK,CAAC;IAAEU,gBAAgB,EAAE,SAAAA,iBAAA;MAAA,OAAM;IAAA;EAAK,CAAC,CAAC;EAExF,IAAMC,IAAI,GAAG;IACXP,UAAU,EAAEJ,GAAG,CAAC,KAAK,CAAC;IACtBU,gBAAgB,EAAG,SAAAA,iBAAAH,KAAc,EAAK;MACpC,IAAIA,KAAK,EAAEI,IAAI,CAACP,UAAU,CAACG,KAAK,GAAGA,KAAK;IAC1C;EACF,CAAC;EAEDR,OAAO,CAACS,OAAO,EAAEG,IAAI,CAAC;EAEtB,OAAON,MAAM;AACf;AAEA,OAAO,SAASO,OAAOA,CAAA,EAAI;EACzB,OAAOd,MAAM,CAACU,OAAO,EAAE,IAAI,CAAC;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}