{"ast":null,"code":"export function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return \"import { resolveComponent as _resolveComponent, toHandlers as _toHandlers, mergeProps as _mergeProps, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, withCtx as _withCtx } from \\\"vue\\\" export function render(_ctx, _cache, $props, $setup, $data, $options) { const _component_v_text_field = _resolveComponent(\\\"v-text-field\\\") const _component_v_time_picker = _resolveComponent(\\\"v-time-picker\\\") const _component_v_menu = _resolveComponent(\\\"v-menu\\\") return (_openBlock(), _createBlock(_component_v_menu, { ref: `${_ctx.id}-menu`, modelValue: $data.menuActive, \\\"onUpdate:modelValue\\\": _cache[3] || (_cache[3] = $event => (($data.menuActive) = $event)), \\\"close-on-content-click\\\": false, \\\"nudge-right\\\": 40, \\\"return-value\\\": _ctx.value, transition: \\\"scale-transition\\\", \\\"offset-y\\\": \\\"\\\", \\\"max-width\\\": \\\"290px\\\", \\\"min-width\\\": \\\"290px\\\" }, { activator: _withCtx(({ on, attrs }) => [ _createVNode(_component_v_text_field, _mergeProps({ modelValue: _ctx.value, \\\"onUpdate:modelValue\\\": _cache[0] || (_cache[0] = $event => ((_ctx.value) = $event)), label: _ctx.label, readonly: \\\"\\\" }, { ...attrs, ..._ctx.props }, _toHandlers(on)), null, 16 /* FULL_PROPS */, [\\\"modelValue\\\", \\\"label\\\"]) ]), default: _withCtx(() => [ ($data.menuActive) ? (_openBlock(), _createBlock(_component_v_time_picker, _mergeProps({ key: 0, modelValue: _ctx.value, \\\"onUpdate:modelValue\\\": _cache[1] || (_cache[1] = $event => ((_ctx.value) = $event)), \\\"full-width\\\": \\\"\\\", \\\"onClick:minute\\\": _cache[2] || (_cache[2] = $event => (_ctx.$refs[`${_ctx.id}-menu`].save(_ctx.value))) }, $options.pickerProps), null, 16 /* FULL_PROPS */, [\\\"modelValue\\\"])) : _createCommentVNode(\\\"v-if\\\", true) ]), _: 1 /* STABLE */ }, 8 /* PROPS */, [\\\"modelValue\\\", \\\"return-value\\\"])) }\";\n}","map":{"version":3,"names":[],"sources":["/var/www/crm_template/packages/oobook/crm-base/vue/src/js/components/inputs/Time.vue"],"sourcesContent":["<template>\n    <v-menu\n        :ref=\"`${id}-menu`\"\n        v-model=\"menuActive\"\n        :close-on-content-click=\"false\"\n        :nudge-right=\"40\"\n        :return-value.sync=\"value\"\n        transition=\"scale-transition\"\n        offset-y\n        max-width=\"290px\"\n        min-width=\"290px\"\n      >\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-text-field\n            v-model=\"value\"\n            :label=\"label\"\n            \n            readonly\n            v-bind=\"{\n                ...attrs,\n                ...props\n            }\"\n            v-on=\"on\"\n          ></v-text-field>\n        </template>\n        <v-time-picker\n          v-if=\"menuActive\"\n          v-model=\"value\"\n          full-width\n          @click:minute=\"$refs[`${id}-menu`].save(value)\"\n          v-bind=\"pickerProps\"\n        ></v-time-picker>\n    </v-menu>\n</template>\n\n<script>\nimport { InputMixin } from '@/mixins'\n\nexport default {\n    mixins: [InputMixin],\n    data() {\n        return {\n            menuActive: false,\n        }\n    },\n    computed: {\n        pickerProps() {\n            if(!!this.attributes.picker_props){\n                return this.configureProps(this.attributes.picker_props);\n            }else{\n                return {}\n            }\n        }\n    }\n}\n</script>"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}