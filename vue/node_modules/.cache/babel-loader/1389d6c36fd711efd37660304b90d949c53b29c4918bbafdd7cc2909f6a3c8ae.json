{"ast":null,"code":"import { mapState } from 'vuex';\nimport { DATATABLE, FORM, ALERT } from '@/store/mutations';\nimport ACTIONS from '@/store/actions';\nimport { DatatableMixin } from '@/mixins';\nexport default {\n  mixins: [DatatableMixin],\n  data: function () {\n    return {\n      formModalActive: false,\n      dialogActive: false,\n      langs: ['tr', 'en'],\n      cellInput: ''\n    };\n  },\n  computed: {\n    dialogDescription() {\n      return this.$t('confirm-deletion', {\n        route: this.transName.toLowerCase(),\n        name: this.editedItem[this.titleKey]\n      });\n    },\n    transName() {\n      return this.$t('modules.' + this.name.toLowerCase());\n    }\n  },\n  created() {\n    // __log(this.createOnModal, this.editOnModal)\n    // __log( \n    //   window[process.env.VUE_APP_NAME].ENDPOINTS.create\n\n    // )\n  },\n  watch: {\n    formModalActive(val) {\n      val || this.resetEditedItem();\n    },\n    dialogActive(val) {\n      val || this.resetEditedItem();\n    }\n  },\n  methods: {\n    deleteRow: function () {\n      let self = this;\n      this.$store.dispatch(ACTIONS.DELETE_ITEM, {\n        id: this.editedItem.id,\n        callback: () => {\n          this.$refs.dialog.closeModal();\n        },\n        errorCallback: () => {}\n      });\n    },\n    columnChanged(value) {\n      this.cellInput = value;\n    },\n    /**\n     * @param {string} key - related key of object\n     */\n    updateCell(key) {\n      this.$store.commit(ALERT.CLEAR_ALERT);\n      if (this.editedItem[key] !== this.cellInput) {\n        let data = {\n          id: this.editedItem.id,\n          [key]: this.cellInput\n          // reload: false\n        };\n\n        this.$store.dispatch(ACTIONS.SAVE_FORM, {\n          item: data\n        });\n      }\n    },\n    changeSort(column) {\n      if (this.pagination.sortBy === column) {\n        this.pagination.descending = !this.pagination.descending;\n      } else {\n        this.pagination.sortBy = column;\n        this.pagination.descending = false;\n      }\n    },\n    columnValueList(val) {\n      return this.elements.map(d => d[val]);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
