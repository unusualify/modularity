import{_ as s,c as n,o as a,a2 as e}from"./chunks/framework.Dzy1sSWx.js";const g=JSON.parse('{"title":"Introduction to Modular Design","description":"","frontmatter":{},"headers":[],"relativePath":"user-guide/creating-modules/introduction.md","filePath":"user-guide/creating-modules/introduction.md","lastUpdated":1717575516000}'),p={name:"user-guide/creating-modules/introduction.md"},i=e(`<h1 id="introduction-to-modular-design" tabindex="-1">Introduction to Modular Design <a class="header-anchor" href="#introduction-to-modular-design" aria-label="Permalink to &quot;Introduction to Modular Design&quot;">​</a></h1><p>Modular design or <code>modularity design</code> is a design princible that subdivides a system into smaller parts called <code>modules</code>. Modular design aims modules to created, modified, replaced or exchanged with other modules or between different systems.</p><p>By means of <code>Unusualify/Modularity</code> a module is similar to a Laravel project, will have its own controllers, entities, migrations and etc. to construct the module.</p><p>Basically a module&#39;s structure can be presented as:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├─ Testify</span></span>
<span class="line"><span>|    ├─ Config</span></span>
<span class="line"><span>|        └─ config.php</span></span>
<span class="line"><span>|    ├─ Database</span></span>
<span class="line"><span>|        ├─ factories</span></span>
<span class="line"><span>|        ├─ Migrations</span></span>
<span class="line"><span>|        ├─ Seeders</span></span>
<span class="line"><span>|    ├─ Entities</span></span>
<span class="line"><span>|        ├─ Slugs</span></span>
<span class="line"><span>|        └─ *.php (Entities)</span></span>
<span class="line"><span>|    ├─ Http</span></span>
<span class="line"><span>|        ├─ Controllers</span></span>
<span class="line"><span>|        ├─ Middleware</span></span>
<span class="line"><span>|        ├─ Requests</span></span>
<span class="line"><span>|    ├─ Providers</span></span>
<span class="line"><span>|    ├─ Repositories</span></span>
<span class="line"><span>|    ├─ Resources</span></span>
<span class="line"><span>|        ├─ assets</span></span>
<span class="line"><span>|        ├─ lang</span></span>
<span class="line"><span>|        ├─ views</span></span>
<span class="line"><span>|    ├─ Routes</span></span>
<span class="line"><span>|    ├─ Tests</span></span>
<span class="line"><span>|    ├─ Transformers</span></span>
<span class="line"><span>|    └─ composer.json</span></span>
<span class="line"><span>|    └─ module.json</span></span>
<span class="line"><span>|    └─ routes_statuses.json*</span></span></code></pre></div><h2 id="module-and-routes-definitions" tabindex="-1">Module and Routes Definitions <a class="header-anchor" href="#module-and-routes-definitions" aria-label="Permalink to &quot;Module and Routes Definitions&quot;">​</a></h2><p>As mentioned before, each module is a Laravel project that has its own controllers, entities and etc. Following this convention, a module can be constructed with plain folder structure to build on it or with a parent domain that named recursively.</p><p>For an example, imagine building a <code>Authorization</code> module with:</p><ul><li>User</li><li>User Roles</li><li>Roles Permissions</li></ul><p>Since authorization will be dealt with the User model itself, and capabilities of a user will be assigned with its role and roles permissions there is no need to have any <code>Authorization</code> model in the package. Now, Authorization can be constructed as a plain module structure then mentioned routes are can be constructed in it.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├─ Authorization</span></span>
<span class="line"><span>|    ├─ Config</span></span>
<span class="line"><span>|        └─ config.php</span></span>
<span class="line"><span>|    ├─ Database</span></span>
<span class="line"><span>|        ├─ factories</span></span>
<span class="line"><span>|        ├─ Migrations</span></span>
<span class="line"><span>|        ├─ Seeders</span></span>
<span class="line"><span>|    ├─ Entities</span></span>
<span class="line"><span>|        ├─ Slugs</span></span>
<span class="line"><span>|        └─ User.php *</span></span>
<span class="line"><span>|        └─ Role.php *</span></span>
<span class="line"><span>|        └─ Permission.php *</span></span>
<span class="line"><span>|    ├─ Http</span></span>
<span class="line"><span>|        ├─ Controllers</span></span>
<span class="line"><span>|        ├─ Middleware</span></span>
<span class="line"><span>|        ├─ Requests</span></span>
<span class="line"><span>|    ├─ Providers</span></span>
<span class="line"><span>|    ├─ Repositories</span></span>
<span class="line"><span>|    ├─ Resources</span></span>
<span class="line"><span>|        ├─ assets</span></span>
<span class="line"><span>|        ├─ lang</span></span>
<span class="line"><span>|        ├─ views</span></span>
<span class="line"><span>|    ├─ Routes</span></span>
<span class="line"><span>|    ├─ Tests</span></span>
<span class="line"><span>|    ├─ Transformers</span></span>
<span class="line"><span>|    └─ composer.json</span></span>
<span class="line"><span>|    └─ module.json</span></span>
<span class="line"><span>|    └─ routes_statuses.json*</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In many use-cases user is suggested to use --plain module constructing option. Please see <a href="./creating-modules">Creating a Module</a></p></div>`,12),l=[i];function t(o,c,r,d,u,h){return a(),n("div",null,l)}const f=s(p,[["render",t]]);export{g as __pageData,f as default};
