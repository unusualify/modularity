import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.Dzy1sSWx.js";const g=JSON.parse('{"title":"Modularity Setup","description":"","frontmatter":{"sidebarPos":3},"headers":[],"relativePath":"get-started/installation-guide.md","filePath":"get-started/installation-guide.md","lastUpdated":1717764435000}'),e={name:"get-started/installation-guide.md"},t=n(`<h1 id="modularity-setup" tabindex="-1">Modularity Setup <a class="header-anchor" href="#modularity-setup" aria-label="Permalink to &quot;Modularity Setup&quot;">​</a></h1><p>This document will discuss about installation and required configurations for installation of the package.</p><h2 id="pre-requisites" tabindex="-1">Pre-requisites <a class="header-anchor" href="#pre-requisites" aria-label="Permalink to &quot;Pre-requisites&quot;">​</a></h2><p>The modules package requires <strong>PHP XXX</strong> or higher and also requires <strong>Laravel 10</strong> or higher.</p><h2 id="creating-a-modularity-project" tabindex="-1">Creating a Modularity Project <a class="header-anchor" href="#creating-a-modularity-project" aria-label="Permalink to &quot;Creating a Modularity Project&quot;">​</a></h2><h3 id="using-modularity-laravel-boilerplate" tabindex="-1">Using Modularity-Laravel Boilerplate <a class="header-anchor" href="#using-modularity-laravel-boilerplate" aria-label="Permalink to &quot;Using Modularity-Laravel Boilerplate&quot;">​</a></h3><p>Modularity provides a Laravel boilerplate that all the pre-required files such as config files, environment file and etc published, and the folder structure is built as Modularity does. In order to create a modularity-laravel project following <code>shell</code> command can be used:</p><p>After <code>cd</code> to your preferred directory for your project,</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unusualify/modularity-laravel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-project-name</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>After the setup is done, you can customize the config files and follow the intallation steps with <code>Only Database Operations</code>. Please proceed with <a href="#installation-wizard">Installation Wizard</a></p></div><h3 id="using-default-laravel-project" tabindex="-1">Using Default Laravel Project <a class="header-anchor" href="#using-default-laravel-project" aria-label="Permalink to &quot;Using Default Laravel Project&quot;">​</a></h3><ol><li><strong>Intalling Modularity</strong></li></ol><p>After creating a default Laravel project, cd to your project folder</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-project-folder</span></span></code></pre></div><p>To install Modularity via Composer, run the following shell command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unusualify/modularity</span></span></code></pre></div><p>After the installation of the package is done run:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vendor:publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --provider=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Unusualify\\\\Modularity\\\\LaravelServiceProvider&#39;</span></span></code></pre></div><p>This will publish the package&#39;s configuration files <br><br></p><h2 id="environment-file-configuration" tabindex="-1">Environment File Configuration <a class="header-anchor" href="#environment-file-configuration" aria-label="Permalink to &quot;Environment File Configuration&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Configuration for many variable is <code>must</code> to construct your Vue &amp; Laravel app with your project configuration before <a href="#installation-wizard">Installation</a></p></div><p><strong>Administration Application Configuration</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ADMIN_APP_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ADMIN_APP_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DESIRED_ADMIN_APP_PATH</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ADMIN_ROUTE_NAME_PREFIX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DESIRED_ADMIN_ROUTE_NAME_PREFIX</span></span></code></pre></div><p>As mentioned, modularity aims to construct your administration panel user interface while you building your project&#39;s backend application. Given key-value pairs corresponds to</p><ul><li>Your administration panel domain name</li><li>Your admin route path as <code>&#39;yourdomain.com/admin&#39;</code> if <code>ADMIN_APP_URL</code> key is not set</li><li>Your route naming prefixes for administration routes like <code>admin.password</code></li></ul><p><strong>Database Configuration</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_CONNECTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">127.0.0.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3306</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_DATABASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">YOUR_DB_NAME</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_USERNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">root</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_PASSWORD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span></code></pre></div><p>The default Laravel database environment configuration must be done before installation. You should create your empty DB with the customized DB name.</p><p><strong>Laravel Development Variables</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Laravel Development Variables</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MEDIA_LIBRARY_ENDPOINT_TYPE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">local</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MEDIA_LIBRARY_IMAGE_SERVICE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Unusualify</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">odularity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ervices</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ediaLibrary</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ocal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MEDIA_LIBRARY_LOCAL_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">uploads</span></span></code></pre></div><p>Shown key-value pairs is aims to point out the media library constructed in the <code>Modularity</code> package. For now, they are not customizable.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ACTIVITY_LOGGER_DB_CONNECTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span></span></code></pre></div><p>Default system logger configuration. Again, it is not customizable for now.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DEFAULT_USER_PASSWORD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DESIRED_DEFAULT_USER_PASSWORD</span></span></code></pre></div><p>You can set your client-users default password. It will be set as fallback password if its not set while creating user.</p><p><strong>Vue Development Variables</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VUE_APP_THEME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">unusual</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VUE_APP_LOCALE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VUE_APP_FALLBACK_LOCALE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">en</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VUE_DEV_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5173</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VUE_DEV_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">localhost</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VUE_DEV_PROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span></code></pre></div><p>Admin panel application user interface is highly customizable through module configs. Also you can create your own custom <code>Vue</code> components in order to use in user interface. For further information see [Vue Component Sayfası] . In summary,</p><ul><li>A custom theme can be constructed, its name should be defined with <code>VUE_APP_THEME</code></li><li>Vue app locale language and fallback language should be setted</li><li>Vue dev port should be setted, can be same as the locale port</li><li>Vue dev host can be your domain-name like <code>mytestapp.com</code></li><li>Proxy should be setted if it is in undergo like <code>http://nginx</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can do further custom configuration through <code>config</code> files which are stored in the <code>config</code> directory. See [Configs]</p></div><h2 id="installation-wizard" tabindex="-1">Installation Wizard <a class="header-anchor" href="#installation-wizard" aria-label="Permalink to &quot;Installation Wizard&quot;">​</a></h2><p>Modularity ships with a command line installation wizard that will help on scaffolding a basic project. After installation via Composer, wizard can be started by running:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unusual:install</span></span></code></pre></div><p>Wizard will be processing with simple questions to construct projects core configurations.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Installment process consists of two(2) main operations.</span></span>
<span class="line"><span>    1. Publishing Config Files: Modularity Config files manages heavily table names, jwt configurations and etc.User should customize them after publishing in order to customize table names and other opeartions</span></span>
<span class="line"><span>    2. Database Operations and Creating Super Admin. DO NOT select this option if you have not published vendor files to theproject. This option will only dealing with db operations</span></span>
<span class="line"><span>    3. Complete Installment with default configurations (√ suggested)</span></span>
<span class="line"><span>                 </span></span>
<span class="line"><span></span></span>
<span class="line"><span> ┌ Select Operation ────────────────────────────────────────────┐</span></span>
<span class="line"><span> │   ○ Only Vendor Publish ( Config Files, Assets and Views)    │</span></span>
<span class="line"><span> │   ○ Only Database Operations                                 │</span></span>
<span class="line"><span> │ › ● Complete Installment with defaults                       │</span></span>
<span class="line"><span> └──────────────────────────────────────────────────────────────┘</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Installation Options</p><p>A Modularity Project heavily depends on the configration files that will be published under your-project/config directory. Modularity comes with a series of default configuration, however they can be customized before Database Operations</p></div><div class="tip custom-block"><p class="custom-block-title">Customization</p><p>This page will be continue with the complete installment option with the default configrations. See [Config Customization] to inspect other options</p></div><p>Starting installation with the <code>Complete Installment</code> option will,</p><ul><li>Create database tables for required system modules</li><li>Deal with the migrations</li><li>Seed default data for the system modules automatically after publishing default assets, views and configuration files to your project.</li></ul><p>For the last step, intallation process includes creating a super-admin account</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>         Creating super-admin account</span></span>
<span class="line"><span></span></span>
<span class="line"><span> E-mail configuration for super-admin account</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ┌ Do you want to use default configuration for super-admin e-mail? ┐</span></span>
<span class="line"><span> │ ● YES / ○ No, enter custom e-mail                                │</span></span>
<span class="line"><span> └──────────────────────────────────────────────────────────────────┘</span></span>
<span class="line"><span>  Default e-mail address: software-dev@unusualgrowth.com</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Password configuration for super-admin account</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ┌ Do you want to use default configuration for super-admin password? ┐</span></span>
<span class="line"><span> │ ● YES / ○ No, enter custom password                                │</span></span>
<span class="line"><span> └────────────────────────────────────────────────────────────────────┘</span></span>
<span class="line"><span>  Default password is w@123456</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can either select the default settings or type your custom e-mail and password to reach your backend panel application.</p></div><details class="details custom-block"><summary>Creating Super Admin</summary><p>Creating one or more super-admin account with custom e-mail and password is avaliable. See [Creating Super Admin]</p></details><h2 id="file-structure" tabindex="-1">File Structure <a class="header-anchor" href="#file-structure" aria-label="Permalink to &quot;File Structure&quot;">​</a></h2><p>A <code>Modularity Module</code> is similar to a Laravel package. It has its own, configs, controllers, migrations and etc. This file structure aims to writing modular applications and have more organized project to work with.</p><p>Assuming installment is done and a test module <code>Testify</code> is created</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├─Modules</span></span>
<span class="line"><span>|   └─.keep</span></span>
<span class="line"><span>|   ├─ Testify</span></span>
<span class="line"><span>|       ├─ Config</span></span>
<span class="line"><span>|           └─ config.php</span></span>
<span class="line"><span>|       ├─ Database</span></span>
<span class="line"><span>|           ├─ factories</span></span>
<span class="line"><span>|           ├─ Migrations</span></span>
<span class="line"><span>|           ├─ Seeders</span></span>
<span class="line"><span>|       ├─ Entities</span></span>
<span class="line"><span>|           ├─ Slugs</span></span>
<span class="line"><span>|           └─ *.php (Entities)</span></span>
<span class="line"><span>|       ├─ Http</span></span>
<span class="line"><span>|           ├─ Controllers</span></span>
<span class="line"><span>|           ├─ Middleware</span></span>
<span class="line"><span>|           ├─ Requests</span></span>
<span class="line"><span>|       ├─ Providers</span></span>
<span class="line"><span>|       ├─ Repositories</span></span>
<span class="line"><span>|       ├─ Resources</span></span>
<span class="line"><span>|           ├─ assets</span></span>
<span class="line"><span>|           ├─ lang</span></span>
<span class="line"><span>|           ├─ views</span></span>
<span class="line"><span>|       ├─ Routes</span></span>
<span class="line"><span>|       ├─ Tests</span></span>
<span class="line"><span>|       ├─ Transformers</span></span>
<span class="line"><span>|       └─ composer.json</span></span>
<span class="line"><span>|       └─ module.json</span></span>
<span class="line"><span>|       └─ routes_statuses.json*</span></span>
<span class="line"><span>|       └─ .keep</span></span>
<span class="line"><span>├─app\\</span></span>
<span class="line"><span>├─bootstrap\\</span></span>
<span class="line"><span>├─..default laravel folders</span></span>
<span class="line"><span>|</span></span>
<span class="line"><span>|</span></span>
<span class="line"><span>└─ .env</span></span></code></pre></div>`,57),l=[t];function p(o,r,h,d,c,u){return i(),a("div",null,l)}const y=s(e,[["render",p]]);export{g as __pageData,y as default};
